(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * 类模块<br>
 * version 1.0.1.20140602<br>
 * author zzbo<zhenbo.zheng@vipshop.com><br>
 * @module Class
 */
(function () {
    'use strict';

    /**
     * 基类的实现
     * @class Class
     * @constructor
     * @param obj {Object} 属性集或方法集
     */
    var Class = function (obj) {
        var obj = obj || {};
        var Constructor = function () {
            if (this._init) {
                this._init.apply(this, arguments);
            }
        }

        //分配属性到原型
        Constructor.prototype = clone(obj);
        //调整Constructor
        Constructor.prototype.constructor = Constructor;
        //添加基本方法
        classify(Constructor);
        //
        Constructor.prototype.setOptions = Class.setOptions;
        Constructor.prototype.getOptions = Class.getOptions;

        return Constructor;
    }

    /**
     * 类扩展方法
     * @method extend
     * @param  {Function, Object} prop 目标类或对象
     * @extends Class.extend
     * @demo Class_extend.html
     * @show true
     * @return {Function}     返回扩展后的类。
     */
    Class.extend = function (prop) {
        var self = this;
        var prototype = this.prototype;
        var newObj = merge(prototype, prop); 

        for (var i in prop) {
            if (typeof prop[i] == 'function'
                && /_super/.test(prop[i].toString())) {
                newObj[i] = (function (name, method) {
                    return function () {
                        this._super = prototype[name];
                        var ret = method.apply(this, arguments);
                        return ret;
                    }
                })(i, prop[i]);
            }
        }

        return Class(newObj);
    }

    /**
     * 合并一个或多个类的方法到目标类
     * @method implement
     * @param  {Array} objArr   要合并的各种对象
     * @demo Class_implement.html
     * @show true
     * @return {Function}     返回扩展后的类。
     */
    Class.implement = function (objArr) {
        var obj = merge(this.prototype, implement(objArr));
        this.prototype = obj;
        return obj;
    }

    /**
     * 获取静态变量
     * @method getOptions
     * @param  {String} name 获取options的指定属性
     * @demo Class_getOptions.html
     * @show true
     * @return {Object} 静态变量
     */
    Class.getOptions = function (name) {
        var options;

        if (type(this) == 'Function') {
            options = this.prototype.options;
        }
        else {
            options = this.options;
        }

        if (options) {
            return name ? options[name]
                : options;
        }
        else {
            return name ? undefined : {};
        }
        return this.prototype.options || {};
    }

    /**
     * 设置静态变量
     * @method setOptions
     * @param  {String} options 设置options属性
     * @demo Class_setOptions.html
     * @show true
     * @return {Object} 合并之后的静态变量
     */
    Class.setOptions = function (options) {
        var original;
        var obj;
        if (type(this) == 'Function') {
            original = this.prototype.options;
            obj = jQuery.extend(true, {}, original, options);
            this.prototype.options = obj;
        }
        else {
            original = this.options;
            obj = jQuery.extend(true, {}, original, options);
            this.options = obj;
        }
        
        return obj;
    }

    /**
     * 复制目标对象的属性到类
     * @param  {Function | Object} args 目标类或对象
     * @return {Object} 生成的对象
     */
    function clone (args) {
        var F = function () {};

        if (typeof args == 'function') {
            F.prototype = args.prototype;
        }
        else {
            F.prototype = args.prototype || args;
        }
        return new F();
    }

    /**
     * 删除对象的指定属性
     * @param  {Object} obj    指定对象
     * @param  {String} name   指定属性名
     * @param  {Boolean} effect 是否作用于原对象
     * @return {Object}        返回处理后的对象
     */
    function remove (obj, name, effect) {
        if (effect) {
            var newObj = {};
            for (var i in obj) {
                newObj[i] = obj[i];
            }
        }
        else {
            delete obj[name];
        }

        return newObj;
    }

    /**
     * 测试类型
     * @param  {Object, Function, Array} o 传入要测试的参数
     * @return {String}   返回类型
     */
    function type (o) {
        var toString = Object.prototype.toString;
        var typeList = {
            '[object Object]' : 'Object',
            '[object Function]' : 'Function',
            '[object Array]' : 'Array'
        }
        return typeList[toString.call(o)];
    }

    /**
     * 合并两个对象
     * @param  {Object} oldObj   要合并的对象
     * @param  {Object} newObj   被合并的对象
     * @param  {[type]} preserve 同名属性时，是否保留原对象属性
     * @return {[type]}          [description]
     */
    function merge (oldObj, newObj, preserve) {
        if (oldObj && newObj) {
            //克隆对象，避免影响原有对象
            oldObj = clone(oldObj);
            newObj = clone(newObj);

            for (var i in newObj) {
                var newProp = newObj[i];
                if (type(newProp) == 'Object') {
                    oldObj[i] = merge(oldObj[i], newProp);
                }
                else {
                    if (preserve && oldObj[i]) {
                        oldObj[i] = oldObj[i];
                    }
                    else {
                        oldObj[i] = newProp;
                    }
                }
            }

            return oldObj;
        }
        else {
            return oldObj || newObj || {};
        }
    }

    /**
     * 改变基类的原型，方便修改已存在的类
     * @param  {Object, Array} args 对象或类
     * @return {Object}     [description]
     */
    function implement (args) {
        var collection = {};
        args = type(args) == 'Array' ? args : [args];

        for (var i = 0; i < args.length; i++) {
            if (type(args[i]) == 'Function') {
                args[i] = args[i].prototype;
            }

            var safe = remove(args[i], '_init', true);
            if (safe.implement) {
                collection = implement(safe.implement);
            }
            else {
                collection = merge(collection, safe);
            }
        }

        return collection;
    }

    /**
     * 为类添加基本方法
     * @param  {Function} Constructor 类
     */
    function classify (Constructor) {
        Constructor.extend = Class.extend;
        Constructor.implement = Class.implement;
        Constructor.getOptions = Class.getOptions;
        Constructor.setOptions = Class.setOptions;
    }

    module.exports = Class;
})();
},{}],2:[function(require,module,exports){
/**
 * 登录弹窗<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Component
 * @class Login
 */
(function () {
    var Log = require('../Util/Log');
    var Class = require('../Class/Class');
    var Messenger = require('../Lib/Messenger');
    var queryStringToJSON = require('../Util/queryStringToJSON');

    var interactDialog = Class({
        dialogIsFixed : false,
        _init : function (options) {
            // 扩展配置
            $.extend(this, options);
            this.openDialog();
        },
        /**
         * 设置dialog高度
         * @param {[type]} height [description]
         */
        setDialogHeight : function (height) {
            var that = this;
            var dialogW = {
                login : 430,
                setPwd : 550
            }

            that.dialog
                .size(dialogW[this.type], height)
                .getElem('.login_iframe')
                .attr('height', height);
        },
        /**
         * 关闭dialog
         * @return {[type]} [description]
         */
        closeDialog : function (data) {
            this.closeEvent.call(this, data);
            this.dialog.close();
        },
        /**
         * 登录成功
         * @return {[type]} [description]
         */
        loginSuccess : function () {
            var that = this;
            that.closeDialog.call(that);
            that.loginEvent.call(that);
        },
        setPwdSuccess : function () {
            this.setPwdEvent.call(this);
        },
        /**
         * [loginEvent description]
         * @type {[type]}
         */
        loginEvent : $.noop,
        setPwdEvent : $.noop,
        closeEvent : $.noop,
        /**
         * 打开登录弹窗
         * @return {[type]} [description]
         */
        openDialog : function () {
            var that = this;

            if (this.type == 'login') {
                var size = {
                    w : 430,
                    h : 610
                };
                var frameUrl = 'https://passport.vip.com/login?gotype=2';
                var iframeHtml = '<iframe class="login_iframe" frameborder="0" scrolling="no" width="' + size.w + '" height="' + size.h + '" src="' + frameUrl + '">';
                //登录弹窗
                var dialog = $.Dialog({
                    model : true,
                    elStyle : 'login_dialog',
                    opacity : 0.3,
                    size : [430, 610],
                    content : iframeHtml,
                    isFixed : that.dialogIsFixed,
                    custom : true,
                    showEvent : function () {
                        //登录
                        if (that.type == 'login') {
                            //跨域
                            var messenger = new Messenger('loginDialog', 'vip.com');
                            //监听事件
                            messenger.listen(function (msg) {
                                Log(msg);
                                var queryObj = queryStringToJSON(msg);
                                var method = queryObj['method'];
                                var args = queryObj.args;
                                that[method].call(that, args);
                            });
                        }
                    }
                }).open();
                that.dialog = dialog;
            }
            else if (this.type === 'setPwd') {
                var setPayPwdCom = '//member.vipstatic.com/js/public/safe/1/set-pay-password-component.js';

                $.ajax({
                    url : setPayPwdCom,
                    dataType : 'script',
                    success : function () {
                        new SetPayPwd({
                            isBg: true,//是否显示遮罩，默认true
                            hasPhoneTip: false,//当未设置绑定手机的用户跳转绑定手机时。是否显示绑定手机的温馨提示，默认true
                            show: true ,//是否生成组件的时候立即显示组件。默认true
                            finish: function(){// 完成时的回调（完成就是设置支付密码成功后有个3秒的倒计时，等倒计时结束，弹窗关闭时的状态，成功后点击确定也算完成）
                                that.setPwdSuccess();
                            },
                            success: function() {//成功时的回调（成功就是支付密码设置成功）
                            },
                            error: function() {//设置失败时候的回调
                            },
                            cancel: function() {//关闭弹窗时候的回调
                                that.closeEvent.call(that);
                            }
                        });
                    }
                });
            }
        }
    });

    module.exports = {
        login : {
            /**
             * 登录弹窗
             * @method login.init
             * @param  {Object} options 登录弹窗的配置
             * @return {Object}         登录弹窗的对象
             */
            init : function (options) {
                options = $.extend({
                    type : 'login'
                }, options);
                return new interactDialog(options);
            }
        },
        setPwd : {
            /**
             * 设置密码弹窗
             * @method setPwd.init
             * @param  {Object} options 设置密码弹窗配置
             * @return {Object}         登录弹窗对象
             */
            init : function (options) {
                options = $.extend({
                    type : 'setPwd'
                }, options);
                return new interactDialog(options);
            }
        }
    };
})();

},{"../Class/Class":1,"../Lib/Messenger":9,"../Util/Log":35,"../Util/queryStringToJSON":43}],3:[function(require,module,exports){
/**
 * 登录弹窗<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Component
 * @class Member
 */
(function () {
    var Storage = require('../Util/Storage'); //本地存储
    var Listeners = require('../Util/Listeners'); //事件监听
    var Cookie = require('../Util/Cookie'); //cookie类
    var cutString = require('../Util/CutString'); //字符串截取
    
    Cookie = new Cookie({
        path : '/',
        domain : '.vip.com'
    });

    var srcUrl = encodeURIComponent(window.location.href);

    var Member = {
        /**
         * 用户信息
         * @type {Object}
         * @default null
         * @property info
         */
        info : null,
        /**
         * 检查会员身份状态
         * @method chk
         * @static
         */
        chk : function () {
            var loginID = Cookie.get('VipLID');
            var account = Cookie.get('login_username');
            var jqHeaderLog = $('#J_head_log');

            if (loginID) {
                //验证成功，已登录
                var afterTxt = $('#J_header_logAfter').html() || '';
                var userName = Cookie.get('VipRNAME');

                jqHeaderLog
                    .addClass('login_after')
                    .removeClass('login_before')
                    .html(afterTxt.replace('{$J_header_account}', cutString(userName, 9)));

                $('#J_header_lnkLogOut').on('click', function () {
                    location.href = VIPSHOP.userHost +'/logout?src='+ srcUrl;
                });

                this.info = {
                    'account' : account,
                    'level' : parseInt(Cookie.get('VipMonopoly')),
                    'nickname' : userName
                };

                Listeners.pub('loginSuccess').success();

                return ;
            }
            
            //未登陆
            jqHeaderLog
                .addClass('login_before')
                .removeClass('login_after')
                .html($('#J_header_logBefor').html());

            $('#J_header_lnkLogin').on('click', function () {
                location.href = VIPSHOP.userHost +'/login?src='+ srcUrl;
            });
            $('#J_header_lnkRegister').on('click', function () {
                location.href = VIPSHOP.userHost +'/register?src='+ srcUrl;
            });
            Listeners.pub('unLogin').success();
            return ;
        },

        /**
         * 设置最近浏览记录
         * @method viewed
         * @static
         * @param {String} cookie_name cookie名
         * @param {Number} merchandise_id 商品id
         * @deprecated 1.0
         */
        viewed : function (cookie_name, merchandise_id) {
            //获取已浏览
            var viewed = Cookie.get(cookie_name);
            if (viewed == '') {
                var arViewed = [];
            }
            else {
                var arViewed = viewed.split(',');
            }

            //id填充
            var viewed = -1;
            for (var i = 0;i < arViewed.length;i++ ) {
                if (arViewed[i] == merchandise_id) { viewed = i; }
            }
            if (viewed == -1 && arViewed.length >= 5) {
                arViewed.shift();
            }
            else if (viewed > -1) {
                arViewed.splice(viewed, 1);
            }
            arViewed.push(merchandise_id);

            //获取根域
            var domain = (document.domain).split('.');
            domain.shift();
            var rootDomain = domain.join('.');

            Cookie.set(cookie_name, arViewed.join(','), rootDomain);
        },

        /**
         * 设置最近浏览记录
         * @method setViewed
         * @static
         * @param {String} channel 频道名称
         * @param {Object} merchandise 商品信息
         * @param {Number} [length] 商品信息数组长度
         */
        setViewed : function (channel, merchandise) {
            //获取数据
            var data = Storage.get(channel),
                arrMer = !!data ? data : [],
                newMer = [];

            if (arrMer) {
                //设定长度
                var arrLength = arguments.length > 2 ? arguments[2] : 5,
                    forLength = arrLength;
                
                if (arrMer.length < arrLength) {
                    forLength = arrMer.length;
                }

                //过滤之前浏览过
                for (var i = 0;i < forLength;i++ ) {
                    if (arrMer[i].id != merchandise.id) {
                        newMer.push(arrMer[i]);
                    }
                }

                //先进先出
                if (newMer.length >= arrLength) {
                    newMer.shift();
                }
            }

            //转换数组
            newMer.push(merchandise);
            Storage.set(channel, newMer);
        },

        /**
         * 获取最近浏览记录
         * @method getViewed
         * @static
         * @param {String} channel 频道名称
         * @return {Array}
         */
        getViewed : function (channel) {
            var data = Storage.get(channel);
            return !!data ? data : [];
        }
    }

    module.exports = Member;
})();

},{"../Util/Cookie":25,"../Util/CutString":27,"../Util/Listeners":33,"../Util/Storage":38}],4:[function(require,module,exports){
/**
 * 在线客服<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Component
 * @class OnlineService
 */
(function () {
    'use strict';

    /**
     * 调出在线客服弹窗
     * @method fn_onlineService
     **/
    function fn_onlineService () {
        var openner = null;
        var chatUrl = 'http://800.vip.com/live800/chatClient/chatbox.jsp?companyID=8900&configID=13&codeType=custom';   
        chatUrl+="&enterurl="+encodeURIComponent(document.referrer||document.URL);
        chatUrl+="&t="+new Date().getTime();
        try {
            openner = window.open(chatUrl, "chatbox143639", "toolbar=0,scrollbars=0,location=0,menubar=0,resizable=1,width=900,height=720");
            return openner;
        }
        catch(e){}
    }

    module.exports = fn_onlineService;
})();


},{}],5:[function(require,module,exports){
/**
 * 页面ready消息监听<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Component
 * @class Ready
 */
(function () {
    'use strict';
    var Detect = require('../Util/Detect.js');
    var Listeners = require('../Util/Listeners.js'); //事件监听
    
    $(function () {
        Listeners.pub('ready.first').success();
    });

    //ready.second的触发规则为dom.ready2秒后定时触发
    Listeners.sub('ready.first').onsuccess(function () {
        setTimeout(function () {
            Listeners.pub('ready.second').success();
        }, 2000);
    });

    //增加ready.third执行时的规则，
    //必须明确为ready.second已经成功触发完成后才可以执行。
    //避免window.load执行得比2秒快。
    $(window).on('load.Listeners', function () {
        Listeners.sub('ready.second').onsuccess(function () {
            Listeners.pub('ready.third').success();
            Listeners.pub('winLoaded').success();
        });
    });

    Listeners.sub('ready.third').onsuccess(function () {
        setTimeout(function () {
            Listeners.pub('ready.four').success();
        }, 800);
    });


    Listeners.sub('ready.four').onsuccess(function () {
        $(window).one('scroll',function(){
          Listeners.pub('ready.five').success();
        });
    });

    Listeners.sub('ready.first').onsuccess(function () {
        //登录校验
        //VIPSHOP.member.chk();

        /**
         * ie6下通过脚本去设置样式来实现hover
         * html节点上需要加上data-hover如data-hover='className'
         */
        if (Detect.isIE6) {
            $('body').on({
                mouseenter : function () {
                    $(this).addClass($(this).data('hover'));
                },
                mouseleave : function () {
                    $(this).removeClass($(this).data('hover'));
                }
            }, '[data-hover]');
        }

        if (Detect.mobile) {
            $('.device-pc').removeClass('device-pc');
            $('body').on('touchstart', function (e) {
                var jqTarget = $(e.target);
                var isInner = false;
                if (typeof jqTarget.data('touch') == 'undefined') {
                    isInner = true;
                    jqTarget = jqTarget.closest('[data-touch]');
                }

                $('[data-touch]').not(jqTarget).removeClass(function () {
                    var className = $(this).data('touch') || 'z-touch';
                    $(this).removeClass(className);
                });

                // 点击[data-touch]本身 或 [data-touch]的子元素时
                if (jqTarget.length != 0) {
                    // z-touch 为默认类名
                    var className = jqTarget.data('touch') || 'z-touch';
                    // 已加指定类名则去除，否则加上指定类名
                    if (!jqTarget.hasClass(className)) {
                        jqTarget.addClass(className);
                    }
                    else {
                        if (!isInner) {
                            jqTarget.removeClass(className);
                        }
                    }
                }
            });
        }

        _lazyLoad();
    });

    Listeners.sub('ready.second').onsuccess(function () {
        _lazyLoad();
    });

    Listeners.sub('ready.third').onsuccess(function () {
        _lazyLoad();
    });

    function _lazyLoad () {
        if ($('img.lazy').length) {
            $.Loader.advScript( {
                name : 'lazyload',
                url : VIPSHOP.staticJs +'/plugins/lazyload.js?'+ VIPSHOP.jsVer
            }, {
                name : 'lazyloadAfter',
                def : function () { $('img.lazy').lazyload({threshold : 200}); },
                requires : ['lazyload']
            } );
        }
    } 

    //  创建一个间隔为1s的计时器
    //  http://redmine.tools.vipshop.com/issues/84200
    ;(function () {
        var count = 1;

        setInterval(function () {
            Listeners.pub('interval','interval.1000').success();
            if (count % 2 === 0) {
                Listeners.pub('interval.2000').success();
            }

            count++;
        }, 1000);
    })();

})();


},{"../Util/Detect.js":29,"../Util/Listeners.js":33}],6:[function(require,module,exports){
/**
 * 分享组件<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Component
 * @class Share
 */
(function () {
    'use strict';

    var tsina = 'http://v.t.sina.com.cn/share/share.php';
    var qzone = 'http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey';
    var tqq = 'http://v.t.qq.com/share/share.php';
    var douban = 'http://www.douban.com/recommend/';
    var kaixin = 'http://www.kaixin001.com/repaste/share.php';
    var renren = 'http://share.renren.com/share/buttonshare.do';
    var sohu = 'http://t.sohu.com/third/post.jsp';
    var t163 = 'http://t.163.com/article/user/checkLogin.do';
    /**
     * 调出分享弹窗
     * @param {String} type 分享类型
     * @param {Object} info 分享内容
     * @param {Boolean} addVmark 是否加V值, true表示加V值，false表示不加V值。
     * @method fn_share
     **/
    function fn_share (type, info, addVmark) {
        var pic = encodeURIComponent(info.pic);
        var content = encodeURIComponent(info.desc);
        var title = encodeURIComponent(info.title);
        var url = encodeURIComponent(info.url);
        var openner = null;
        var openSet = 'width=680, height=580, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no';

        if (typeof addVmark == 'undefined') {addVmark = true;}

        switch (type) {
        case 'tsina':
        //分享内容=desc+url
        //图片=pic+url抓取
            openner = window.open(tsina + '?title='+ content +'&url='+ url +'&appkey=1493335026&pic='+ pic, '', openSet);
            
            break;
        case 'qzone':
        //title
        //desc
        //url
        //图片=url抓取
            openner = window.open(qzone + '?url='+ url +'&summary='+ content +'&title='+ title, '', openSet);
            break;
        case 'tqq':
        //分享内容=desc+url
        //图片=url抓取
            openner = window.open(tqq + '?title='+ content +'&url='+ url, '', openSet);
            break;
        case 'douban':
        //内容=desc
        //无图
            openner = window.open(douban + '?url='+ url +'&title='+ content, '', openSet);
            break;
        case 'kaixin001':
        //分享内容=title+desc+url
        //图片=url抓取
            openner = window.open(kaixin + '?rtitle='+ title +'&rurl='+ url +'&rcontent='+ content, '', openSet);
            break;
        case 'renren':
        //所有=url抓取
            openner = window.open(renren + '?link='+ url, '', openSet);
            break;
        case 'sohu':
            openner = window.open(sohu + '?&url=' + url + '&title=' + title + '&content=utf-8&pic=', '', openSet);
            break;
        case 't163':    
            content = title + ('  ' + info.url);
            openner = window.open(t163 + '?link='+ url +'&source='+ title +'&info='+ content, '', openSet);
            break;
        default:
            break;
        }

        if (addVmark) {
            $.ajax({
                'url' : 'http://myopen.vip.com/my/add_vmark',
                data : {
                    type : 'shareGoods'
                },
                jsonp : 'callback',
                dataType : 'jsonp',
                jsonpCallback : 'add_vmark',
                success : function (res) {}
            });
        }

        return openner;
    }

    module.exports = fn_share;
})();


},{}],7:[function(require,module,exports){
/**
 * 判断用户判断组件<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Component
 * @class UINFO
 */
(function () {
    'use strict';

    var UINFO = {
        rule : {
            newUser : ['', 'a', 'b'],
            oldUser : ['c']
        },
        /**
        * 解析VipUINFO cookie
        * @return {Array} 竖线分切
        */
        parseCookie : function () {
            var uinfo = $.Cookie.get('VipUINFO');
            if (uinfo === '') {
                return '';
            }
            //  ‘luc:c|suc:c_test’
            var pairs = uinfo.split('|');
            var result = {};
            var i = 0;
            var len = pairs.length;

            if (len > 2) { //新cookie格式
                for (; i < len; i++) {
                    var pair = pairs[i].split(':');
                    if (!!pair[0]) {
                        result[pair[0]] = decodeURIComponent(pair[1] || '');
                    }
                }
            }
            else {
                result = {
                    luc : pairs[0] || '',
                    suc : pairs[1] || ''
                }
            }
            return result;
        },
        /**
        * 判断是否是新客
        * @return {Boolean} 是新客则返回true，否则返回false
        */
        isNewUser : function () {
            return this.is('newUser');
        },
        /**
        * 判断是否是旧客
        * @return {Boolean} 是旧客则返回true，否则返回false
        */
        isOldUser : function () {
            return this.is('oldUser');
        },
        /**
         * 判断是否是某类用户群
         * @param  {String}  ruleType 用户类型名称，对应rule
         * @param  {Number}  typeName VipUINFO切割竖线后的第几部分，默认是luc
         *                            可选值有:luc, suc, bct, kct, hct, bdts, bcts
         *                            具体说明可参考wiki：http://wiki.corp.vipshop.com/pages/viewpage.action?pageId=33361172 
         * @return {Boolean}          是否符合规则，符合返回true，否则返回false
         */
        is : function (ruleType, typeName) {
            var c = this.parseCookie();
            var rtn = false;
            typeName = typeName || 'luc';
            var i = 0;
            var rule = this.rule[ruleType];
            var len = rule.length;

            for (; i < len; i++) {
                if (rule[i] === c[typeName]) {
                    rtn = true;
                    break;
                }
            }
            return rtn;
        }
    }

    module.exports = UINFO;
})();


},{}],8:[function(require,module,exports){
/**
 * 移动端事件(本组件为JQuery增加tapstart, tapmove, tapend, swipe事件)<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Event
 * @class swipe
 */
(function () {
    'use strict';
    var detect = require('../Util/Detect');
    var isMobile = detect.mobile;
    var settings = {
        tap_pixel_range : 5,
        swipe_h_threshold : 20,
        swipe_v_threshold : 20,
        taphold_threshold : 750,
        doubletap_int : 500,
        touch_capable : isMobile,
        orientation_support : ('orientation' in window && 'onorientationchange' in window),
        startevent : isMobile ? 'touchstart' : 'mousedown',
        endevent : isMobile ? 'touchend' : 'mouseup',
        moveevent : isMobile ? 'touchmove' : 'mousemove',
        tapevent : isMobile ? 'tap' : 'click',
        scrollevent : isMobile ? 'touchmove' : 'scroll',
        hold_timer : null,
        tap_timer : null
    }

    var eventNames = ['tapstart', 'tapend', 'tapmove', 'swipe', 'swipeup', 
                    'swiperight', 'swipedown', 'swipeleft', 'swipeend'];

    var i = 0;
    var len = eventNames.length;
    for (; i < len; i++) {
        var name = eventNames[i];
        //支持 $(elem).tap(fn);
        jQuery.fn[name] = function (fn) {
            return fn ? this.on(name, fn) : this.trigger(name);
        }
    }

    var threshold = 15;
    var incrementalElementId = 0;
    var mutex = 0;
    $.event.special.tap = {
        setup : function () {
            var self = this;
            var jqSelf = $(self);
            var moveDistance = 0;
            var touches = null;
            var elementId = ++incrementalElementId;
            var startPoint = null;
            var startOffset = null;
            var touching = false;

            function touchStart (e) {
                jqSelf.data('tapcallee1', touchStart);
                if (mutex != 0) return;
                else mutex = elementId;

                touching = true;
                moveDistance = 0;

                if (e.originalEvent.touches && e.originalEvent.touches[0]) {
                    touches = e.originalEvent.touches[0];
                    startPoint = {
                        x : touches.pageX,
                        y : touches.pageY
                    }
                    startOffset = {
                        x : touches.pageX - touches.target.offsetLeft,
                        y : touches.pageY - touches.target.offsetTop
                    }
                }
            }

            function touchEnd (e) {
                jqSelf.data('tapcallee2', touchEnd);
                if (mutex == elementId) mutex = 0;
                if (!touching) return;
                touching = false;

                if (moveDistance < threshold) {
                    var touchData = {
                        position : {
                            x : startPoint.x,
                            y : startPoint.y
                        },
                        offset : {
                            x : startOffset.x,
                            y : startOffset.y
                        },
                        target : e.target
                    }

                    triggerCustomEvent(self, 'tap', e, touchData);
                }
                else {
                    jqSelf.trigger('tap-failed');
                }
            }

            function touchMove (e) {
                jqSelf.data('tapcallee3', touchMove);
                if (!touching) return;
                if (e.originalEvent.touches.length == 0 || startPoint === null) {
                    return touching = false;
                }

                touches = e.originalEvent.touches[0];

                moveDistance = Math.sqrt(Math.pow(touches.screenX - startPoint.x, 2) +
                Math.pow(touches.screenY - startPoint.y, 2));

                if (moveDistance > threshold) {
                    jqSelf.trigger('exceed-tap-threshold');
                    touching = false;
                }
            }

            function touchcancel (e) {
                jqSelf.data('tapcallee4', touchcancel);
                if (mutex == elementId) mutex = 0;
                touching = false;
                jqSelf.trigger('tap-failed');
            }

            jqSelf.on(settings.startevent, touchStart);
            jqSelf.on(settings.moveevent, touchMove);
            jqSelf.on(settings.endevent, touchEnd);
            jqSelf.on('touchcancel', touchcancel);
        },
        /**
         * 移除事件
         */
        remove : function () {
            var jqSelf = $(this);
            jqSelf.off(settings.startevent, jqSelf.data.tapcallee1)
                  .off(settings.moveevent, jqSelf.data.tapcallee2)
                  .off(settings.endevent, jqSelf.data.tapcallee3)
                  .off('tapcallee3', jqSelf.data.tapcallee4);
        }
    }

    /**
     * tapstart 事件
     * @method tapstart
     * @chainable
     */
    $.event.special.tapstart = {
        setup : function () {
            var self = this;
            var jqSelf = $(self);

            function event (e) {
                jqSelf.data('callee', event); // 保存event
                if (e.which && e.which !== 1) {
                    return false;
                }

                var origEvent = e.originalEvent;
                var posX, posY, offsetX, offsetY, touches;

                if (settings.touch_capable) {
                    touches = origEvent.touches[0];
                    posX = touches.pageX;
                    posY = touches.pageY;
                    offsetX = touches.pageX - touches.target.offsetLeft;
                    offsetY = touches.pageY - touches.target.offsetTop;
                }
                else {
                    posX = e.pageX;
                    posY = e.pageY;
                    offsetX = e.offsetX;
                    offsetY = e.offsetY;
                }

                var touchData = {
                    position : {
                        x : posX,
                        y : posY
                    },
                    offset : {
                        x : offsetX,
                        y : offsetY
                    },
                    target : e.target
                }

                triggerCustomEvent(self, 'tapstart', e, touchData);
                return true;
            }

            jqSelf.on(settings.startevent, event);
        },
        /**
         * 移除事件
         */
        remove : function () {
            var jqSelf = $(this);
            jqSelf.off(settings.startevent, jqSelf.data.callee);
        }
    }

    /**
     * tapmove 事件
     * @method tapmove
     * @chainable
     */
    $.event.special.tapmove = {
        setup : function () {
            var self = this;
            var jqSelf = $(self);

            function event (e) {
                jqSelf.data('callee', event);
                var origEvent = e.originalEvent;
                var posX, posY, offsetX, offsetY, touches;

                if (settings.touch_capable) {
                    touches = origEvent.touches[0];
                    posX = touches.pageX;
                    posY = touches.pageY;
                    offsetX = touches.pageX - touches.target.offsetLeft;
                    offsetY = touches.pageY - touches.target.offsetTop;
                }
                else {
                    posX = e.pageX;
                    posY = e.pageY;
                    offsetX = e.offsetX;
                    offsetY = e.offsetY;
                }

                var touchData = {
                    position : {
                        x : posX,
                        y : posY
                    },
                    offset : {
                        x : offsetX,
                        y : offsetY
                    },
                    target : e.target
                }

                triggerCustomEvent(self, 'tapmove', e, touchData);
                return true;
            }

            jqSelf.on(settings.moveevent, event);
        },
        /**
         * 移除事件
         */
        remove : function () {
            var jqSelf = $(this);
            jqSelf.off(settings.moveevent, jqSelf.data.callee);
        }
    }

    /**
     * tapend 事件
     * @method tapend
     * @chainable
     */
    $.event.special.tapend = {
        setup : function () {
            var self = this;
            var jqSelf = $(this);

            function event (e) {
                jqSelf.data('callee', event);
                var origEvent = e.originalEvent;
                var posX, posY, offsetX, offsetY, changedTouches;

                if (settings.touch_capable) {
                    changedTouches = origEvent.changedTouches[0];
                    posX = changedTouches.pageX;
                    posY = changedTouches.pageY;
                    offsetX = changedTouches.pageX - changedTouches.target.offsetLeft;
                    offsetY = changedTouches.pageY - changedTouches.target.offsetTop;
                }
                else {
                    posX = e.pageX;
                    posY = e.pageY;
                    offsetX = e.offsetX;
                    offsetY = e.offsetY;
                }

                var touchData = {
                    position : {
                        x : posX,
                        y : posY
                    }, 
                    offset : {
                        x : offsetX,
                        y : offsetY
                    }
                }

                triggerCustomEvent(self, 'tapend', e, touchData);
                return true;
            }

            jqSelf.on(settings.endevent, event);
        },
        /**
         * 移除事件
         */
        remove : function () {
            var jqSelf = $(this);
            jqSelf.off(settings.endevent, jqSelf.data.callee);
        }
    }

    /**
     * swipe 事件
     * @method swipe
     * @demo Event.html
     * @show true
     * @chainable
     */
    $.event.special.swipe = {
        setup : function () {
            var self = this;
            var jqSelf = $(this);
            var started = false;
            var hasSwiped = false;
            var originalCoord = {
                x : 0,
                y : 0
            }
            var finalCoord = {
                x : 0,
                y : 0
            }
            var originalOffset = {
                left : 0,
                top : 0
            }
            var startEvent;
            var swipedir;

            // tapstart时，记录当前坐标
            function touchStart (e) {
                var origEvent = e.originalEvent;
                var targetTouches = origEvent.targetTouches;
                jqSelf = $(e.target);
                jqSelf.data('callee1', touchStart);

                if (targetTouches) {
                    originalCoord.x = targetTouches[0].pageX;
                    originalCoord.y = targetTouches[0].pageY;
                }
                else {
                    originalCoord.x = e.pageX;
                    originalCoord.y = e.pageY;
                }

                finalCoord.x = originalCoord.x;
                finalCoord.y = originalCoord.x;
                started = true;

                var posX, posY, offsetX, offsetY;
                if (settings.touch_capable) {
                    var touches = origEvent.touches[0];
                    posX = touches.pageX;
                    posY = touches.pageY;
                    offsetX = posX - touches.target.offsetLeft;
                    offsetY = posY - touches.target.offsetTop;
                    originalOffset.left = offsetX;
                    originalOffset.top = offsetY;
                }
                else {
                    posX = e.pageX;
                    posY = e.pageY;
                    offsetX = e.offsetX;
                    offsetY = e.offsetY;
                }

                startEvent = {
                    position : {
                        x : posX,
                        y : posY
                    },
                    offset : {
                        x : offsetX,
                        y : offsetY
                    },
                    time : new Date().getTime(),
                    target : e.target
                }

                swipedir = undefined;
                var dt = new Date();
                while ((new Date()) - dt < 100) {}
            }

            // touchmove
            function touchMove (e) {
                var origEvent = e.originalEvent;
                var targetTouches = origEvent.targetTouches;
                jqSelf = $(e.target);
                jqSelf.data('callee2', touchMove);
                //e.preventDefault();

                if (targetTouches) {
                    finalCoord.x = targetTouches[0].pageX;
                    finalCoord.y = targetTouches[0].pageY;
                }
                else {
                    finalCoord.x = e.pageX;
                    finalCoord.y = e.pageY;
                }

                clearTimeout(settings.hold_timer);
                
                var h_threshold;
                var v_threshold;
                var ele_x_threshold = jqSelf.data('xthreshold');
                var ele_y_threshold = jqSelf.data('ythreshold');

                if (typeof ele_x_threshold !== 'undefined'
                    && ele_x_threshold !== false
                    && parseInt(ele_x_threshold)) {
                    h_threshold = parseInt(ele_x_threshold);
                }
                else {
                    h_threshold = settings.swipe_h_threshold;
                }

                if (typeof ele_y_threshold !== 'undefined'
                    && ele_y_threshold !== false
                    && parseInt(ele_y_threshold)) {
                    v_threshold = parseInt(ele_y_threshold);
                }
                else {
                    v_threshold = settings.swipe_v_threshold;
                }

                if (originalCoord.y > finalCoord.y
                    && (originalCoord.y - finalCoord.y > v_threshold)) {
                    swipedir = 'swipeup';
                }

                if (originalCoord.x < finalCoord.x
                    && (finalCoord.x - originalCoord.x > h_threshold)) {
                    swipedir = 'swiperight';
                }

                if (originalCoord.y < finalCoord.y
                    && (finalCoord.y - originalCoord.y > v_threshold)) {
                    swipedir = 'swipedown';
                }

                if (originalCoord.x > finalCoord.x
                    && (originalCoord.x - finalCoord.x > h_threshold)) {
                    swipedir = 'swipeleft';
                }

                if (typeof swipedir != 'undefined' && started) {
                    /*originalCoord.x = 0;
                    originalCoord.y = 0;
                    finalCoord.x = 0;
                    finalCoord.y = 0;
                    started = false;*/

                    var posX, posY, offsetX, offsetY;
                    if (settings.touch_capable) {
                        var touches = origEvent.touches[0];
                        posX = touches.pageX;
                        posY = touches.pageY;
                        offsetX = touches.pageX - touches.target.offsetLeft;
                        offsetY = touches.pageY - touches.target.offsetTop;
                    }
                    else {
                        posX = e.pageX;
                        posY = e.pageY;
                        offsetX = e.offsetX;
                        offsetY = e.offsetY;
                    }

                    var endEvent = {
                        position : {
                            x : posX,
                            y : posY
                        },
                        offset : {
                            x : offsetX,
                            y : offsetY
                        },
                        time : new Date().getTime(),
                        target : e.target
                    }

                    var xAmount = Math.abs(startEvent.position.x - endEvent.position.x);
                    var yAmount = Math.abs(startEvent.position.y - endEvent.position.y);

                    var touchData = {
                        e : e,
                        startEvent : startEvent,
                        endEvent : endEvent,
                        direction : swipedir.replace('swipe', ''),
                        xAmount : xAmount,
                        yAmount : yAmount,
                        delta : {
                            x : finalCoord.x - originalCoord.x,
                            y : finalCoord.y - originalCoord.y
                        },
                        duration : endEvent.time - startEvent.time,
                        originalOffset : originalOffset
                    }

                    hasSwiped = true;
                    jqSelf
                    .trigger('swipe', touchData)
                    .trigger(swipedir, touchData);
                }
            }

            // touchend
            function touchEnd (e) {
                var jqSelf = $(e.target);
                var swipedir = '';
                jqSelf.data('callee3', touchEnd);

                if (hasSwiped) {
                    var h_threshold;
                    var v_threshold;
                    var ele_x_threshold = jqSelf.data('xthreshold');
                    var ele_y_threshold = jqSelf.data('ythreshold');
                    var origEvent = e.originalEvent;

                    if (typeof ele_x_threshold !== 'undefined'
                        && ele_x_threshold !== false
                        && parseInt(ele_x_threshold)) {
                        h_threshold = parseInt(ele_x_threshold);
                    }
                    else {
                        settings.swipe_h_threshold;
                    }

                    if (typeof ele_y_threshold !== 'undefined'
                        && ele_y_threshold !== false
                        && parseInt(ele_y_threshold)) {
                        v_threshold = parseInt(ele_y_threshold);
                    }
                    else {
                        settings.swipe_v_threshold;
                    }

                    var posX, posY, offsetX, offsetY;
                    var changedTouches = origEvent.changedTouches[0];
                    if (settings.touch_capable) {
                        posX = changedTouches.screenX;
                        posY = changedTouches.screenY;
                        offsetX = changedTouches.pageX - changedTouches.target.offsetLeft;
                        offsetY = changedTouches.pageY - changedTouches.target.offsetTop;
                    }
                    else {
                        posX = e.screenX;
                        posY = e.screenY;
                        offsetX = e.offsetX;
                        offsetY = e.offsetY;
                    }

                    var endEvent = {
                        position : {
                            x : posX,
                            y : posY
                        },
                        offset : {
                            x : offsetX,
                            y : offsetY
                        },
                        time : new Date().getTime(),
                        target : e.target
                    }

                    if (startEvent.position.y > endEvent.position.y
                        && (startEvent.position.y - endEvent.position.y  > v_threshold)) {
                        swipedir = 'swipeup';
                    }

                    if (startEvent.position.x < endEvent.position.x
                        && (endEvent.position.x - startEvent.position.x > h_threshold)) {
                        swipedir = 'swiperight';
                    }

                    if (startEvent.position.y < endEvent.position.y
                        && (endEvent.position.y - startEvent.position.y > v_threshold)) {
                        swipedir = 'swipedown';
                    }

                    if (startEvent.position.x > endEvent.position.x
                        && (startEvent.position.x - endEvent.position.x > h_threshold)) {
                        swipedir = 'swipeleft';
                    }

                    var xAmount = Math.abs(startEvent.position.x - endEvent.position.x);
                    var yAmount = Math.abs(startEvent.position.y - endEvent.position.y);

                    var touchData = {
                        startEvent : startEvent,
                        endEvent : endEvent,
                        direction : swipedir.replace('swipe', ''),
                        xAmount : xAmount,
                        yAmount : yAmount,
                        duration : endEvent.time - startEvent.time
                    }

                    jqSelf.trigger('swipeend', touchData);
                }

                started = false;
                hasSwiped = false;
            }

            jqSelf.on(settings.startevent, touchStart);
            jqSelf.on(settings.moveevent, touchMove);
            jqSelf.on(settings.endevent, touchEnd);
        },
        remove : function () {
            var jqSelf = $(this);
            jqSelf.off(settings.startevent, jqSelf.data.callee1)
                  .off(settings.moveevent, jqSelf.data.callee2)
                  .off(settings.endevent, jqSelf.data.callee3);
        }
    }

    /**
     * Trigger a custom event
     * @param  {Object} obj       DOM Object
     * @param  {String} eventType 事件类型
     * @param  {Object} event     事件相关数据
     * @param  {Object} touchData 事件自定义数据
     */
    function triggerCustomEvent(obj, eventType, event, touchData) {
        var originalType = event.type;
        event.type = eventType;
        event.offsetX = touchData.offset.x;
        event.offsetY = touchData.offset.y;
        event.pageX = touchData.position.x;
        event.pageY = touchData.position.y;
        $.event.dispatch.call(obj, event, touchData);
        event.type = originalType;
    }
})();







},{"../Util/Detect":29}],9:[function(require,module,exports){
/**
 *     __  ___
 *    /  |/  /___   _____ _____ ___   ____   ____ _ ___   _____
 *   / /|_/ // _ \ / ___// ___// _ \ / __ \ / __ `// _ \ / ___/
 *  / /  / //  __/(__  )(__  )/  __// / / // /_/ //  __// /
 * /_/  /_/ \___//____//____/ \___//_/ /_/ \__, / \___//_/
 *                                        /____/
 *
 * @description MessengerJS, a common cross-document communicate solution.
 * @author biqing kwok
 * @version 2.0
 * @license release under MIT license
 */
(function(){
    'use strict';

    // 消息前缀, 建议使用自己的项目名, 避免多项目之间的冲突
    var prefix = "[PROJECT_NAME]",
        supportPostMessage = 'postMessage' in window;
    var toString = Object.prototype.toString;

    function isFunction (o) {
        return toString.call(o) == '[object Function]';
    }

    function isObject (o) {
        return toString.call(o) == '[object Object]';
    }

    // Target 类, 消息对象
    function Target(target, name, prefix){
        var errMsg = '';
        if(arguments.length < 2){
            errMsg = 'target error - target and name are both requied';
        } else if (typeof target != 'object'){
            errMsg = 'target error - target itself must be window object';
        } else if (typeof name != 'string'){
            errMsg = 'target error - target name must be string type';
        }
        if(errMsg){
            throw new Error(errMsg);
        }
        this.target = target;
        this.name = name;
        this.prefix = prefix;
    }

    // 往 target 发送消息, 出于安全考虑, 发送消息会带上前缀
    if ( supportPostMessage ){
        // IE8+ 以及现代浏览器支持
        Target.prototype.send = function(msg){
            this.target.postMessage(this.prefix + '|' + this.name + '__Messenger__' + msg, '*');
        };
    } else {
        // 兼容IE 6/7
        Target.prototype.send = function(msg){
            var targetFunc = window.navigator[this.prefix + this.name];
            if ( typeof targetFunc == 'function' ) {
                targetFunc(this.prefix + '|' + this.name + '__Messenger__' + msg, window);
            } else {
                throw new Error("target callback function is not defined");
            }
        };
    }

    // 信使类
    // 创建Messenger实例时指定, 必须指定Messenger的名字, (可选)指定项目名, 以避免Mashup类应用中的冲突
    // !注意: 父子页面中projectName必须保持一致, 否则无法匹配
    function Messenger(messengerName, projectName){
        this.targets = {};
        this.name = messengerName;
        this.listenFunc = [];
        this.prefix = projectName || prefix;
        this.initListen();
    }

    // 添加一个消息对象
    Messenger.prototype.addTarget = function(target, name){
        var targetObj = new Target(target, name,  this.prefix);
        this.targets[name] = targetObj;
    };

    // 初始化消息监听
    Messenger.prototype.initListen = function(){
        var self = this;
        var generalCallback = function(msg){
            if(typeof msg == 'object' && msg.data){
                msg = msg.data;
            }

            var msgPairs = msg.split('__Messenger__');
            var msg = msgPairs[1];
            var pairs = msgPairs[0].split('|');
            var prefix = pairs[0];
            var name = pairs[1];

            for(var i = 0; i < self.listenFunc.length; i++){
                if (prefix + name === self.prefix + self.name) {
                    self.listenFunc[i](msg);
                }
            }
        };

        if ( supportPostMessage ){
            if ( 'addEventListener' in document ) {
                window.addEventListener('message', generalCallback, false);
            } else if ( 'attachEvent' in document ) {
                window.attachEvent('onmessage', generalCallback);
            }
        } else {
            // 兼容IE 6/7
            window.navigator[this.prefix + this.name] = generalCallback;
        }
    };

    // 监听消息
    Messenger.prototype.listen = function(callback){
        var i = 0;
        var len = this.listenFunc.length;
        var cbIsExist = false;
        for (; i < len; i++) {
            if (this.listenFunc[i] == callback) {
                cbIsExist = true;
                break;
            }
        }
        if (!cbIsExist) {
            this.listenFunc.push(callback);
        }
    };
    // 注销监听
    Messenger.prototype.clear = function(){
        this.listenFunc = [];
    };
    // 广播消息
    Messenger.prototype.send = function(msg){
        var targets = this.targets,
            target;
        for(target in targets){
            if(targets.hasOwnProperty(target)){
                targets[target].send(msg);
            }
        }
    };

    module.exports = Messenger;
})();

},{}],10:[function(require,module,exports){
/*
 * stringifyJSON
 * http://github.com/flowersinthesand/stringifyJSON
 * 
 * Copyright 2011, Donghwan Kim 
 * Licensed under the Apache License, Version 2.0
 * http://www.apache.org/licenses/LICENSE-2.0
 */
 // This plugin is heavily based on Douglas Crockford's reference implementation
(function () {
    'use strict';

    var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, 
        meta = {
            '\b' : '\\b',
            '\t' : '\\t',
            '\n' : '\\n',
            '\f' : '\\f',
            '\r' : '\\r',
            '"' : '\\"',
            '\\' : '\\\\'
        };
    
    function quote(string) {
        return '"' + string.replace(escapable, function(a) {
            var c = meta[a];
            return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"';
    }
    
    function f(n) {
        return n < 10 ? "0" + n : n;
    }
    
    function str(key, holder) {
        var i, v, len, partial, value = holder[key], type = typeof value;
                
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
            value = value.toJSON(key);
            type = typeof value;
        }

        switch (type) {
        case "string":
            return quote(value);
        case "number":
            return isFinite(value) ? String(value) : "null";
        case "boolean":
            return String(value);
        case "object":
            if (!value) {
                return "null";
            }
            
            switch (Object.prototype.toString.call(value)) {
            case "[object Date]":
                return isFinite(value.valueOf()) ? 
                    '"' + value.getUTCFullYear() + "-" + f(value.getUTCMonth() + 1) + "-" + f(value.getUTCDate()) + 
                    "T" + f(value.getUTCHours()) + ":" + f(value.getUTCMinutes()) + ":" + f(value.getUTCSeconds()) + "Z" + '"' : 
                    "null";
            case "[object Array]":
                len = value.length;
                partial = [];
                for (i = 0; i < len; i++) {
                    partial.push(str(i, value) || "null");
                }
                
                return "[" + partial.join(",") + "]";
            default:
                partial = [];
                for (i in value) {
                    if (Object.prototype.hasOwnProperty.call(value, i)) {
                        v = str(i, value);
                        if (v) {
                            partial.push(quote(i) + ":" + v);
                        }
                    }
                }
                
                return "{" + partial.join(",") + "}";
            }
        }
    }
    
    function stringifyJSON(value) {
        /*if (window.JSON && window.JSON.stringify) {
            return window.JSON.stringify(value);
        }*/
        
        return str("", {"": value});
    }
    
    module.exports = stringifyJSON;
})();


},{}],11:[function(require,module,exports){
/*!art-template - Template Engine | http://aui.github.com/artTemplate/*/
!function(){function a(a){return a.replace(t,"").replace(u,",").replace(v,"").replace(w,"").replace(x,"").split(y)}function b(a){return"'"+a.replace(/('|\\)/g,"\\$1").replace(/\r/g,"\\r").replace(/\n/g,"\\n")+"'"}function c(c,d){function e(a){return m+=a.split(/\n/).length-1,k&&(a=a.replace(/\s+/g," ").replace(/<!--[\w\W]*?-->/g,"")),a&&(a=s[1]+b(a)+s[2]+"\n"),a}function f(b){var c=m;if(j?b=j(b,d):g&&(b=b.replace(/\n/g,function(){return m++,"$line="+m+";"})),0===b.indexOf("=")){var e=l&&!/^=[=#]/.test(b);if(b=b.replace(/^=[=#]?|[\s;]*$/g,""),e){var f=b.replace(/\s*\([^\)]+\)/,"");n[f]||/^(include|print)$/.test(f)||(b="$escape("+b+")")}else b="$string("+b+")";b=s[1]+b+s[2]}return g&&(b="$line="+c+";"+b),r(a(b),function(a){if(a&&!p[a]){var b;b="print"===a?u:"include"===a?v:n[a]?"$utils."+a:o[a]?"$helpers."+a:"$data."+a,w+=a+"="+b+",",p[a]=!0}}),b+"\n"}var g=d.debug,h=d.openTag,i=d.closeTag,j=d.parser,k=d.compress,l=d.escape,m=1,p={$data:1,$filename:1,$utils:1,$helpers:1,$out:1,$line:1},q="".trim,s=q?["$out='';","$out+=",";","$out"]:["$out=[];","$out.push(",");","$out.join('')"],t=q?"$out+=text;return $out;":"$out.push(text);",u="function(){var text=''.concat.apply('',arguments);"+t+"}",v="function(filename,data){data=data||$data;var text=$utils.$include(filename,data,$filename);"+t+"}",w="'use strict';var $utils=this,$helpers=$utils.$helpers,"+(g?"$line=0,":""),x=s[0],y="return new String("+s[3]+");";r(c.split(h),function(a){a=a.split(i);var b=a[0],c=a[1];1===a.length?x+=e(b):(x+=f(b),c&&(x+=e(c)))});var z=w+x+y;g&&(z="try{"+z+"}catch(e){throw {filename:$filename,name:'Render Error',message:e.message,line:$line,source:"+b(c)+".split(/\\n/)[$line-1].replace(/^\\s+/,'')};}");try{var A=new Function("$data","$filename",z);return A.prototype=n,A}catch(B){throw B.temp="function anonymous($data,$filename) {"+z+"}",B}}var d=function(a,b){return"string"==typeof b?q(b,{filename:a}):g(a,b)};d.version="3.0.0",d.config=function(a,b){e[a]=b};var e=d.defaults={openTag:"<%",closeTag:"%>",escape:!0,cache:!0,compress:!1,parser:null},f=d.cache={};d.render=function(a,b){return q(a,b)};var g=d.renderFile=function(a,b){var c=d.get(a)||p({filename:a,name:"Render Error",message:"Template not found"});return b?c(b):c};d.get=function(a){var b;if(f[a])b=f[a];else if("object"==typeof document){var c=document.getElementById(a);if(c){var d=(c.value||c.innerHTML).replace(/^\s*|\s*$/g,"");b=q(d,{filename:a})}}return b};var h=function(a,b){return"string"!=typeof a&&(b=typeof a,"number"===b?a+="":a="function"===b?h(a.call(a)):""),a},i={"<":"&#60;",">":"&#62;",'"':"&#34;","'":"&#39;","&":"&#38;"},j=function(a){return i[a]},k=function(a){return h(a).replace(/&(?![\w#]+;)|[<>"']/g,j)},l=Array.isArray||function(a){return"[object Array]"==={}.toString.call(a)},m=function(a,b){var c,d;if(l(a))for(c=0,d=a.length;d>c;c++)b.call(a,a[c],c,a);else for(c in a)b.call(a,a[c],c)},n=d.utils={$helpers:{},$include:g,$string:h,$escape:k,$each:m};d.helper=function(a,b){o[a]=b};var o=d.helpers=n.$helpers;d.onerror=function(a){var b="Template Error\n\n";for(var c in a)b+="<"+c+">\n"+a[c]+"\n\n";"object"==typeof console&&console['error'](b)};var p=function(a){return d.onerror(a),function(){return"{Template Error}"}},q=d.compile=function(a,b){function d(c){try{return new i(c,h)+""}catch(d){return b.debug?p(d)():(b.debug=!0,q(a,b)(c))}}b=b||{};for(var g in e)void 0===b[g]&&(b[g]=e[g]);var h=b.filename;try{var i=c(a,b)}catch(j){return j.filename=h||"anonymous",j.name="Syntax Error",p(j)}return d.prototype=i.prototype,d.toString=function(){return i.toString()},h&&b.cache&&(f[h]=d),d},r=n.$each,s="break,case,catch,continue,debugger,default,delete,do,else,false,finally,for,function,if,in,instanceof,new,null,return,switch,this,throw,true,try,typeof,var,void,while,with,abstract,boolean,byte,char,class,const,double,enum,export,extends,final,float,goto,implements,import,int,interface,long,native,package,private,protected,public,short,static,super,synchronized,throws,transient,volatile,arguments,let,yield,undefined",t=/\/\*[\w\W]*?\*\/|\/\/[^\n]*\n|\/\/[^\n]*$|"(?:[^"\\]|\\[\w\W])*"|'(?:[^'\\]|\\[\w\W])*'|\s*\.\s*[$\w\.]+/g,u=/[^\w$]+/g,v=new RegExp(["\\b"+s.replace(/,/g,"\\b|\\b")+"\\b"].join("|"),"g"),w=/^\d[^,]*|,\d[^,]*/g,x=/^,+|,+$/g,y=/^$|,+/;e.openTag="{{",e.closeTag="}}";var z=function(a,b){var c=b.split(":"),d=c.shift(),e=c.join(":")||"";return e&&(e=", "+e),"$helpers."+d+"("+a+e+")"};e.parser=function(a){a=a.replace(/^\s/,"");var b=a.split(" "),c=b.shift(),e=b.join(" ");switch(c){case"if":a="if("+e+"){";break;case"else":b="if"===b.shift()?" if("+b.join(" ")+")":"",a="}else"+b+"{";break;case"/if":a="}";break;case"each":var f=b[0]||"$data",g=b[1]||"as",h=b[2]||"$value",i=b[3]||"$index",j=h+","+i;"as"!==g&&(f="[]"),a="$each("+f+",function("+j+"){";break;case"/each":a="});";break;case"echo":a="print("+e+");";break;case"print":case"include":a=c+"("+b.join(",")+");";break;default:if(/^\s*\|\s*[\w\$]/.test(e)){var k=!0;0===a.indexOf("#")&&(a=a.substr(1),k=!1);for(var l=0,m=a.split("|"),n=m.length,o=m[l++];n>l;l++)o=z(o,m[l]);a=(k?"=":"=#")+o}else a=d.helpers[c]?"=#"+c+"("+b.join(",")+");":"="+a}return a},"function"==typeof define?define(function(){return d}):"undefined"!=typeof exports?module.exports=d:this.template=d}();
},{}],12:[function(require,module,exports){
module.exports=require(9)
},{}],13:[function(require,module,exports){
/**
 * Button<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module UI
 * @class Button
 */
var Widget = require('./Widget');

var Button = Widget('V.Button', null, {
    options : {
        type : 'loading',
        loadingBeforeText : '<span class="ui-btn-loading-before">{$text}</span>',
        loadingAfterIcon : '<span class="ui-btn-loading-after"><i class="ii-loading-gray-16x16"></i></span>'
    },
    _init : function (option) {
        options = this.setOptions(option);
        this.node = $(this.options.node);
    },
    /**
     * 控制按钮是否loading
     * @param  {Boolean} isShow true 表示loading状态，反之取消loading状态
     * @return {[type]}         [description]
     */
    loading : function (isShow) {
        if (isShow) {
            this.loadingText(true); //插入loading的icon
            this.loadingClass(true); //添加loading的类名
        }
        else {
            this.loadingClass(false); //停止loading的icon
        }
    },
    /**
     * 添加loading html
     */
    loadingText : function () {
        var loadingBeforeNode = this.node.find('.ui-btn-loading-before');
        var loadingAfterNode = this.node.find('.ui-btn-loading-after');
        var loadingInnerHTML = [];
        var nodeHtml;
        
        //包裹文案
        if (!loadingBeforeNode.length) {
            nodeHtml = options.loadingBeforeText.replace('{$text}', this.node.html());
            loadingInnerHTML.push(nodeHtml);
        }

        //添加loading图标
        if (!loadingAfterNode.length) {
            loadingInnerHTML.push(options.loadingAfterIcon);
        }

        if (loadingInnerHTML.length) {
            this.node.html(loadingInnerHTML.join(''));
        }
    },
    /**
     * 添加loading 类名
     * @param  {Boolean} isShow true表示添加loading类名，反之取消loading类名
     */
    loadingClass : function (isShow) {
        if (isShow) {
            this.node.addClass('ui-btn-loading z-ui-btn-loading');
        }
        else {
            this.node.removeClass('ui-btn-loading z-ui-btn-loading');
        }
    }
});

module.exports = Button;

},{"./Widget":24}],14:[function(require,module,exports){
/**
 * Datepicker<br>
 * version 1.0.1.20150805<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module UI
 * @class Datepicker
 */
(function () {
    'use strict';

    var Widget = require('./Widget');
    var tmplCache = {};
    var tmpl = function tmpl(str, data){
        // Figure out if we're getting a template, or if we need to
        // load the template - and be sure to tmplCache the result.
        var fn = !/\W/.test(str) ?
        tmplCache[str] = tmplCache[str] ||
        tmpl(document.getElementById(str).innerHTML) :

        // Generate a reusable function that will serve as a template
        // generator (and which will be cached).
        new Function("obj",
        "var p=[],print=function(){p.push.apply(p,arguments);};" +

        // Introduce the data as local variables using with(){}
        "with(obj){p.push('" +

        // Convert the template into pure JavaScript
        str
        .replace(/[\r\t\n]/g, " ")
        .split("<%").join("\t")
        .replace(/((^|%>)[^\t]*)'/g, "$1\r")
        .replace(/\t=(.*?)%>/g, "',$1,'")
        .split("\t").join("');")
        .split("%>").join("p.push('")
        .split("\r").join("\\'")
        + "');}return p.join('');");

        // Provide some basic currying to the user
        return data ? fn( data ) : fn;
    };

    var Datepicker = Widget('V.DatePicker', null, {
        views : {
            years: 'ui-datepicker-view-years',
            moths: 'ui-datepicker-view-months',
            days:  'ui-datepicker-view-days'
        },
        tpl : {
            wrapper: '<div class="ui-datepicker"></div>',
            head: [
                '<table cellspacing="0" cellpadding="0">',
                    '<thead>',
                        '<tr class="ui-datepicker-year-month">',
                            '<th colspan="7" class="ui-datepicker-month-wrap"><a class="ui-datepicker-prev" href="javascript:;"><span>&lt;</span></a>',
                            '<a class="ui-datepicker-month" href="javascript:;"><span></span></a>',
                            '<a class="ui-datepicker-next" href="javascript:;"><span>&gt;</span></a></th>',
                        '</tr>',
                        '<tr class="ui-datepicker-dow">',
                            '<th><span><%=day1%></span></th>',
                            '<th><span><%=day2%></span></th>',
                            '<th><span><%=day3%></span></th>',
                            '<th><span><%=day4%></span></th>',
                            '<th><span><%=day5%></span></th>',
                            '<th><span><%=day6%></span></th>',
                            '<th><span><%=day7%></span></th>',
                        '</tr>',
                    '</thead>',
                '</table>'
            ],
            space : '<td class="datepickerSpace"><div></div></td>',
            days : '<tbody class="ui-datepicker-days"></tbody>',
            months : '<tbody class="<%=className%>"></tbody>'
        },
        options : {
            /**
             * 当前要选中的日期,当mode为range或者multiple时，可以传入一个数组
             * @property date 
             * @type Date|int|String|Array
             * @default null
             */
            date : null,
            /**
             * 指定当前日期
             * @property current
             * @type Date|int|String
             * @default null
             */
            current : null,
            /**
             * 显示方式：true时日历会直接渲染并显示，false时，要点击绑定元素才会出现
             * @property inline
             * @type Boolean
             * @default false
             */
            inline : false,
            /**
             * 选择日期的模式：single表示单日，range表示连续的几天，multiple表示可选择多天但可以不连续
             * @property mode
             * @type String
             * @default single
             */
            mode : 'single',
            /**
             * 显示日历的个数
             * @property calendars
             * @type Number
             * @default 1
             */
            calendars : 1,
            /**
             * 日历从星期几开始，0: 星期日, 1:星期一, 2..., 6: 星期六
             * @property starts
             * @type Number
             * @default 0
             */
            starts : 0,
            /**
             * 左箭头图标
             * @property prev
             * @type String
             * @default &#9664;
             */
            prev : '&#9664;',
            /**
             * 右箭头图标
             * @property next
             * @type String
             * @default &#9664;
             */
            next : '&#9654;',
            /**
             * 初始日历显示内容，可选值：'days', 'months', 'years'
             * @property view
             * @type String
             * @default 'days'
             */
            view : 'days',
            /**
             * 显示在绑定元素的相对位置，可选值： 'top', 'left', 'right', 'bottom'
             * @property position
             * @type String
             * @default 'bottom'
             */
            position : 'bottom',
            /**
             * 显示在绑定元素的相对位置，可选值： 'top', 'left', 'right', 'bottom'
             * @property triggerType
             * @type String
             * @default 'focus'
             */
            triggerType : 'focus',
            /**
             * 要在日历外层增加样式类
             * @property elStyle
             * @type String
             * @default ''
             */
            className : '',
            /**
             * 是否自动选择当天
             * @property isAutoSelect
             * @type Boolean
             * @default true
             */
            isAutoSelect : true,
            /**
             * 是否允许选择年份月份
             * @property enableYearMonth
             * @type {Boolean}
             * @default true
             */
            enableYearMonth : true,
            /**
             * 选择日期前的回调函数
             * @param  {[type]} date 选择的日期
             * @return {[type]}      [description]
             */
            preChange : function (date) {},
            /**
             * 选择日期时要触发的回调
             * @property onChange
             * @type Function
             * @default function (date) {};
             */
            onChange : function (date) {},
            /**
             * 当渲染日期时要对特殊的日期做针对性处理,可返回一个对象，属性可包含 selected , disabled, className <br>
             * selected 表示当前日期是否被选择
             * disabled 表示当前日期是否被禁止选择
             * className 表示当前日期的Dom要增加的类名
             * @property onRenderCell
             * @type Function
             * @default function (dom, date) {return {}};
             * @returns {Object} 可返回一个对象，属性可包含 selected , disabled, className <br>
             */
            onRenderCell : function (dom, date) {
                return {};
            },
            /**
             * 在显示日历之前要执行的回调，如果回调函数返回true，则会隐藏，反之亦然。
             * @property onBeforeShow
             * @type Function
             * @default function () {return true;}
             */
            onBeforeShow : function () {
                return true;
            },
            /**
             * 日历在显示之后要执行的回调
             * @property onAfterShow
             * @type Function
             * @default $.noop
             */
            onAfterShow : $.noop,
            /**
             * 在隐藏日历之前要执行的回调，如果回调函数返回true，则会隐藏，反之亦然。
             * @property onAfterShow
             * @type Function
             * @default $.noop
             */
            onBeforeHide : function () {
                return true;
            },
            /**
             * 日历在隐藏之后要执行的回调
             * @property onAfterShow
             * @type Function
             * @default $.noop
             */
            onAfterHide : $.noop,
            /**
             * 日历渲染完毕之后执行回调
             * @property onFillDone
             * @type Function
             * @default $.noop
             */
            onFillDone : function (calendar) {},
            /**
             * 本地的月份简写
             * @property locale
             * @type Object
             * @default daysMin: ["日", "一", "二", "三", "四", "五", "六"],
             *   months: ["1月", "2月", "3月", "4月", "5月", "6月",
             *            "7月", "8月", "9月", "10月", "11月", "12月"],
             *   monthsShort: ["1月", "2月", "3月", "4月", "5月", "6月",
             *            "7月", "8月", "9月", "10月", "11月", "12月"]
             */
            locale: {
                daysMin: ["日", "一", "二", "三", "四", "五", "六"],
                months: ["1月", "2月", "3月", "4月", "5月", "6月",
                         "7月", "8月", "9月", "10月", "11月", "12月"],
                monthsShort: ["1月", "2月", "3月", "4月", "5月", "6月",
                         "7月", "8月", "9月", "10月", "11月", "12月"]
            },
            /**
             * 日历dom内要添加的html，可以传入{'2015-1-1': '<div>222</div>'}
             * @property appendTxt
             * @type Object
             * @default {}
             */
            appendTxt : {},
            extraHeight: false,
            extraWidth: false,
            lastSel: false
        },
        /**
         * 初始化
         */
        _init: function(option) {
            //合并配置选项,并注册到options
            var options = this.setOptions(option);
            var tpl = this.tpl;

            this.extendDate(options.locale);
            options.calendars = Math.max(1, parseInt(options.calendars,10)||1);
            options.mode = /single|multiple|range/.test(options.mode) ? options.mode : 'single';
            options.el = options.node;
            options.date = this.normalizeDate(options.mode, options.date);
            this._processDayTpl(); //处理日期模板
            this._processMonthTpl(); //处理月份模板

            if (!options.current) {
                options.current = new Date();
            }
            else {
                options.current = new Date(options.current);
            } 
            options.current.setDate(1);
            options.current.setHours(0,0,0,0);

            var id = 'datepicker_' + parseInt(Math.random() * 1000), cnt;
            options.id = id;
            $(options.el).data('datepickerId', options.id);

            var cal = $(tpl.wrapper)
            .attr('id', id)
            .on('click', this, this.click)
            .data('datepicker', options);

            if (options.className) {
                cal.addClass(options.className);
            }
            var html = '';
            for (var i = 0; i < options.calendars; i++) {
                cnt = options.starts;
                if (i > 0) {
                    html += tpl.space;
                }
                // calendar header template
                html += tmpl(tpl.head.join(''), {
                    prev: options.prev,
                    next: options.next,
                    day1: options.locale.daysMin[(cnt++)%7],
                    day2: options.locale.daysMin[(cnt++)%7],
                    day3: options.locale.daysMin[(cnt++)%7],
                    day4: options.locale.daysMin[(cnt++)%7],
                    day5: options.locale.daysMin[(cnt++)%7],
                    day6: options.locale.daysMin[(cnt++)%7],
                    day7: options.locale.daysMin[(cnt++)%7]
                });
            }

            cal.append(html)
            .find('table').addClass(this.views[options.view]);
            this.fill(cal.get(0));

            if (options.inline) {
                cal.appendTo(options.el).show().css('position', 'relative');
            }
            else {
                cal.appendTo(document.body);
                $(options.el).on(options.triggerType, this, this.show);
            }
        },
        //处理日期模板
        _processDayTpl : function () {
            //日期模板
            var dayTplArr = ['<tbody class="ui-datepicker-days">'];

            for (var i = 0, iLen = 6; i < iLen; i++) {
                dayTplArr.push('<tr>');
                for (var j = 0, jLen = 7; j < jLen; j++) {
                    dayTplArr.push('<td class="<%=weeks['+i+'].days['+j+'].classname%>" ');
                    dayTplArr.push('data-date="<%=weeks['+i+'].days['+j+']["data-date"]%>">');
                    dayTplArr.push('<a class="ui-datepicker-day" href="javascript:;">');
                    dayTplArr.push('<span class="dayNum"><%=weeks['+i+'].days['+j+'].text%></span>');
                    dayTplArr.push('<%=weeks['+i+'].days['+j+'].appendTxt%>');
                    dayTplArr.push('</a>');
                    dayTplArr.push('</td>');
                }
                dayTplArr.push('</tr>');
            }
            dayTplArr.push('</tbody>');
            this.tpl.days = dayTplArr.join('');
        },
        //处理月份模板
        _processMonthTpl : function () {
            //月份模板
            var monthTplArr = ['<tbody class="<%=className%>">'];
            var k = 0;

            for (var i = 0, iLen = 3; i < iLen; i++) {
                monthTplArr.push('<tr>');
                for (var j = 0, jLen = 4; j < jLen; j++) {
                    if (j === 3) {
                        monthTplArr.push('<td colspan="1">');
                    }
                    else {
                        monthTplArr.push('<td colspan="2">');
                    }
                    
                    monthTplArr.push('<a href="javascript:;">');
                    monthTplArr.push('<span><%=data['+k+']%></span>');
                    monthTplArr.push('</a>');
                    monthTplArr.push('</td>');
                    k++;
                }
                monthTplArr.push('</tr>');
            }
            monthTplArr.push('</tbody>');

            this.tpl.months = monthTplArr;
        },
        //填充日历内容
        fill : function (el, isSelect) {
            var options = this.options;
            var cal = $(el);
            var currentCal = Math.floor(options.calendars / 2);
            var date, data, dow, fullYear, month, cnt = 0, days, indic, indic2, html, tblCal;
            var tpl = this.tpl;

            cal.find('table tbody').remove();
            
            for(var i = 0; i < options.calendars; i++) {
                date = new Date(options.current);
                date.addMonths(-currentCal + i);
                tblCal = cal.find('table').eq(i);
                fullYear = date.getFullYear();

                //第一个日历
                if(i == 0) tblCal.addClass('ui-datepicker-first-view');
                //最后一个日历 
                if(i == options.calendars - 1) tblCal.addClass('ui-datepicker-last-view');

                //选择日期
                if(tblCal.hasClass('ui-datepicker-view-days')) {
                    dow = fullYear + '年' + date.getMonthName(true);
                }
                //选择月份
                else if(tblCal.hasClass('ui-datepicker-view-months')) {
                    dow = fullYear;
                } 
                //选择年份
                else if(tblCal.hasClass('ui-datepicker-view-years')) {
                    dow = (fullYear - 6) + ' - ' + (fullYear + 5);
                } 

                //在头部显示年月
                tblCal.find('.ui-datepicker-month span').text(dow);

                //当前年份算起前后6年
                dow = date.getFullYear() - 6;
                data = {
                    data: [],
                    className: 'ui-datepicker-years'
                }

                for( var j = 0; j < 12; j++) {
                    data.data.push(dow + j);
                }

                //渲染年份
                html = tmpl(tpl.months.join(''), data);
                date.setDate(1);
                data = {weeks:[], test: 10};
                month = date.getMonth();

                var dow = (date.getDay() - options.starts) % 7;
                date.addDays(-(dow + (dow < 0 ? 7 : 0)));
                cnt = 0;

                while (cnt < 42) {
                    var _fullYear = date.getFullYear();
                    var _month = date.getMonth() + 1;
                    var _date = date.getDate();
                    var _fixMonth = _month < 10 ? '0' + _month : _month;
                    var _fixDate = _date < 10 ? '0' + _date : _date;
                    var ymd = [_fullYear, _month, _date].join('-');
                    var fixYMD = [_fullYear, _fixMonth, _fixDate].join('-');
                    
                    indic = parseInt(cnt / 7, 10);
                    indic2 = cnt % 7;

                    if (!data.weeks[indic]) {
                        data.weeks[indic] = {
                            days: []
                        };
                    }

                    data.weeks[indic].days[indic2] = {
                        text: _date,
                        classname: ['J-' + fixYMD],
                        appendTxt : options.appendTxt[ymd],
                        'data-date' : _date
                    };

                    var today = new Date();

                    //‘今天’增加 ui-datepicker-today 类
                    if (today.getDate() === _date 
                        && today.getMonth() + 1 === _month
                        && today.getFullYear() === _fullYear) {
                        data.weeks[indic].days[indic2].classname.push('ui-datepicker-today');
                    }

                    //'未来'增加 ui-datepicker-future 类
                    if (date > today) {
                        // current month, date in future
                        data.weeks[indic].days[indic2].classname.push('ui-datepicker-future');
                    }

                    //不是当前月份的日期加上 ui-datepicker-not-in-month 类
                    if (month + 1 != _month) {
                        data.weeks[indic].days[indic2].classname.push('ui-datepicker-not-in-month');
                        data.weeks[indic].days[indic2].classname.push('ui-datepicker-disabled');
                    }

                    //'周日' 增加 ui-datepicker-sunday 类
                    if (date.getDay() == 0) {
                        data.weeks[indic].days[indic2].classname.push('ui-datepicker-sunday');
                    }

                    //'周六' 增加 ui-datepicker-saturday 类
                    if (date.getDay() == 6) {
                        data.weeks[indic].days[indic2].classname.push('ui-datepicker-saturday');
                    }

                    var fromUser = options.onRenderCell(el, date);
                    var val = date.valueOf();
                    var flag1 = typeof isSelect === 'undefined' ? options.isAutoSelect : isSelect;
                    var flag2 = !$.isArray(options.date) || options.date.length > 0;
                    var flag3 = options.date;

                    if(flag1 && flag2 && flag3) {
                        if (fromUser.selected
                            || options.date == val 
                            || $.inArray(val, options.date) > -1 
                            || (options.mode == 'range' && val >= options.date[0] && val <= options.date[1])) {
                            data.weeks[indic].days[indic2].classname.push('ui-datepicker-selected');
                        }
                    }

                    if (fromUser.disabled) {
                        data.weeks[indic].days[indic2].classname.push('ui-datepicker-disabled');
                    }

                    if (fromUser.className) {
                        data.weeks[indic].days[indic2].classname.push(fromUser.className);
                    }

                    data.weeks[indic].days[indic2].classname = data.weeks[indic].days[indic2].classname.join(' ');
                    cnt++;
                    date.addDays(1);
                }
                
                // Fill the datepickerDays template with data
                html = tmpl(tpl.days, data) + html;

                data = {
                    data: options.locale.monthsShort,
                    className: 'ui-datepicker-months'
                };

                // datepickerMonths template
                html = tmpl(tpl.months.join(''), data) + html;
                tblCal.append(html);
            }

            options.onFillDone.call(this, tblCal);
        },
        //扩展日期类
        extendDate : function(locale) {
            if (Date.prototype.tempDate) {
                return;
            }
            Date.prototype.tempDate = null;
            Date.prototype.months = locale.months;
            Date.prototype.monthsShort = locale.monthsShort;
            Date.prototype.getMonthName = function(fullName) {
                return this[fullName ? 'months' : 'monthsShort'][this.getMonth()];
            };
            Date.prototype.addDays = function (n) {
                this.setDate(this.getDate() + n);
                this.tempDate = this.getDate();
            };
            Date.prototype.addMonths = function (n) {
                if (this.tempDate == null) {
                    this.tempDate = this.getDate();
                }

                this.setDate(1);
                this.setMonth(this.getMonth() + n);
                this.setDate(Math.min(this.tempDate, this.getMaxDays()));
            };
            Date.prototype.addYears = function (n) {
                if (this.tempDate == null) {
                    this.tempDate = this.getDate();
                }
                this.setDate(1);
                this.setFullYear(this.getFullYear() + n);
                this.setDate(Math.min(this.tempDate, this.getMaxDays()));
            };
            Date.prototype.getMaxDays = function() {
                var tmpDate = new Date(Date.parse(this)),
                d = 28, m;
                m = tmpDate.getMonth();
                d = 28;
                while (tmpDate.getMonth() == m) {
                    d ++;
                    tmpDate.setDate(d);
                }
                return d - 1;
            };
        },
        click : function (ev) {
            var self = ev.data;
            if ($(ev.target).is('span')) {
                ev.target = ev.target.parentNode;
            }
            var el = $(ev.target).closest('a');
            var isSelect = false, beforeSelDate, prChangeArgs;

            if (el.is('a')) {
                ev.target.blur();
                if (el.hasClass('ui-datepicker-disabled')) {
                    return false;
                }

                var options = $(this).data('datepicker');
                var parentEl = el.parent();
                var tblEl = parentEl.closest('table');
                var tblIndex = $('table', this).index(tblEl.get(0));
                var tmp = new Date(options.current);
                var changed = false;
                var fillIt = false;
                var currentCal = Math.floor(options.calendars/2);

                if (parentEl.is('th')) {
                    //点击日历的标题
                    if (el.hasClass('ui-datepicker-month')) {
                        if (!options.enableYearMonth) {return;}
                        // clicking on the title of a Month Datepicker
                        tmp.addMonths(tblIndex - currentCal);

                        if(options.mode == 'range') {
                            // range, select the whole month
                            options.date[0] = (tmp.setHours(0,0,0,0)).valueOf();
                            tmp.addDays(tmp.getMaxDays()-1);
                            tmp.setHours(23,59,59,0);
                            options.date[1] = tmp.valueOf();
                            fillIt = true;
                            changed = true;
                            options.lastSel = false;
                        }
                        else if(options.calendars == 1) {
                            if(tblEl.eq(0).hasClass('ui-datepicker-view-days')) {
                                tblEl.eq(0).toggleClass('ui-datepicker-view-days ui-datepicker-view-months');
                                el.find('span').text(tmp.getFullYear());
                            }
                            else if(tblEl.eq(0).hasClass('ui-datepicker-view-months')) {
                                tblEl.eq(0).toggleClass('ui-datepicker-view-months ui-datepicker-view-years');
                                el.find('span').text((tmp.getFullYear()-6) + ' - ' + (tmp.getFullYear()+5));
                            }
                            else if(tblEl.eq(0).hasClass('ui-datepicker-view-years')) {
                                tblEl.eq(0).toggleClass('ui-datepicker-view-years ui-datepicker-view-days');
                                el.find('span').text(tmp.getMonthName(true)+", "+tmp.getFullYear());
                            }
                        }
                    }
                    else if (parentEl.parent().parent().is('thead')) {
                        //点击左右箭头
                        if(tblEl.eq(0).hasClass('ui-datepicker-view-days')) {
                            options.current.addMonths(el.hasClass('ui-datepicker-prev') ? -1 : 1);
                        }
                        else if(tblEl.eq(0).hasClass('ui-datepicker-view-months')) {
                            options.current.addYears(el.hasClass('ui-datepicker-prev') ? -1 : 1);
                        }
                        else if(tblEl.eq(0).hasClass('ui-datepicker-view-years')) {
                            options.current.addYears(el.hasClass('ui-datepicker-prev') ? -12 : 12);
                        }
                        options.date = options.current.valueOf();
                    }
                    fillIt = true;
                }
                else if (parentEl.is('td') && !parentEl.hasClass('ui-datepicker-disabled')) {
                    if (tblEl.eq(0).hasClass('ui-datepicker-view-months')) {
                        //点击月份
                        options.current.setMonth(tblEl.find('tbody.ui-datepicker-months td').index(parentEl));
                        options.current.setFullYear(parseInt(tblEl.find('.ui-datepicker-month span').text(), 10));
                        options.current.addMonths(currentCal - tblIndex);
                        tblEl.eq(0).toggleClass('ui-datepicker-view-months ui-datepicker-view-days');
                    	fillIt = true;
                    }
                    else if (tblEl.eq(0).hasClass('ui-datepicker-view-years')) {
                        //点击年份
                        options.current.setFullYear(parseInt(el.text(), 10));
                        tblEl.eq(0).toggleClass('ui-datepicker-view-years ui-datepicker-view-months');
                        fillIt = true;
                    }
                    else {
                        //点击日期
                        var val = parseInt(parentEl.data('date'), 10);
                        tmp.addMonths(tblIndex - currentCal);

                        if (parentEl.hasClass('ui-datepicker-not-in-month')) {
                            tmp.addMonths(val > 15 ? -1 : 1);
                        }
                        tmp.setDate(val);
                        switch (options.mode) {
                            case 'multiple':
                                val = (tmp.setHours(0,0,0,0)).valueOf();
                                if ($.inArray(val, options.date) > -1) {
                                    $.each(options.date, function(nr, dat) {
                                        if (dat == val) {
                                            options.date.splice(nr,1);
                                            return false;
                                        }
                                    });
                                }
                                else {
                                    options.date.push(val);
                                }
                            break;
                            case 'range':
                                if (!options.lastSel) {
                                    // first click: set to the start of the day
                                    options.date[0] = (tmp.setHours(0,0,0,0)).valueOf();
                                }
                                // get the very end of the day clicked
                                val = (tmp.setHours(23,59,59,0)).valueOf();

                                if (val < options.date[0]) {
                                    // second range click < first
                                    options.date[1] = options.date[0] + 86399000;  // starting date + 1 day
                                    options.date[0] = val - 86399000;  // minus 1 day
                                }
                                else {
                                    // initial range click, or final range click >= first
                                    options.date[1] = val;
                                }
                                options.lastSel = !options.lastSel;
                            break;
                            default:
                                beforeSelDate = self.getDate()[0].valueOf();
                                options.date = tmp.valueOf();
                                prChangeArgs = self.prepareDate(options);
                                prChangeArgs.push(parentEl);

                                isSelect = options.preChange.apply(this, prChangeArgs);
                                isSelect = isSelect === false ? isSelect : true;

                                if (!isSelect) {
                                    //还原上一次选择的日期
                                    options.date = beforeSelDate;
                                    return false;
                                }
                            break;
                        }

                        self._selectDate(options.date, tblEl, options);
                        //fillIt = true;

                        changed = true;
                    }
                }

                if (fillIt) {
                    self.fill(this, isSelect);
                }

                if (changed) {
                    options.onChange.apply(this, self.prepareDate(options));
                }
            }
            return false;
        },
        _selectDate : function (date, tblEl, options) {
            var jqPicker = tblEl.closest('.ui-datepicker');
        	jqPicker.find('.ui-datepicker-selected')
        		.removeClass('ui-datepicker-selected');

        	if (typeof date === 'number') {
        		//选择单天
        		jqPicker.find('.J-' + this._toYMD(date))
        			  .addClass('ui-datepicker-selected');
        	}
        	else {
        		if (options.mode === 'multiple') {
        			for (var i = 0, len = date.length; i < len; i++) {
        				jqPicker.find('.J-' + this._toYMD(date[i]))
        					.addClass('ui-datepicker-selected');
        			}
        		}
        		else if (options.mode === 'range') {
        			var T = new Date(date[0]);
        			var addClassDate = [];

        			while (T.valueOf() < date[1]) {
        				addClassDate.push(this._toYMD(T.valueOf()));
        				T.addDays(1);
        			}
        			
        			$('.J-' + addClassDate.join(',.J-'))
        				.addClass('ui-datepicker-selected');
        		}
        	}
        },
        _toYMD : function (date) {
        	var T = new Date(date);
        	var Y = T.getFullYear();
        	var M = T.getMonth() + 1;
        	var D = T.getDate();
        	M = M < 10 ? '0' + M : M;
        	D = D < 10 ? '0' + D : D;
        	return [Y, M, D].join('-');
        },
        prepareDate : function (options) {
            var dates = null;
            if (options.mode == 'single') {
                if (options.date) dates = new Date(options.date);
            }
            else {
                dates = new Array();
                $(options.date).each(function(i, val){
                    dates.push(new Date(val));
                });
            }
            return [dates, options.el];
        },
        getViewport : function () {
            var m = document.compatMode == 'CSS1Compat';
            return {
                l : window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
                t : window.pageYOffset || (m ? document.documentElement.scrollTop : document.body.scrollTop),
                w : window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth),
                h : window.innerHeight || (m ? document.documentElement.clientHeight : document.body.clientHeight)
            };
        },
        isChildOf : function(parentEl, el, container) {
            if(parentEl == el) {
                return true;
            }
            if(parentEl.contains) {
                return parentEl.contains(el);
            }
            if(parentEl.compareDocumentPosition) {
                return !!(parentEl.compareDocumentPosition(el) & 16);
            }

            var prEl = el.parentNode;

            while(prEl && prEl != container) {
                if(prEl == parentEl) {
                    return true;
                }
                prEl = prEl.parentNode;
            }
            return false;
        },
        show : function (ev) {
            var self = ev.data;
            var jqSelf = $(this);
            var cal = $('#' + jqSelf.data('datepickerId'));

            if (!cal.is(':visible')) {
                var calEl = cal.get(0);
                var options = cal.data('datepicker');

                var test = options.onBeforeShow.apply(this, [calEl]);
                if(options.onBeforeShow.apply(this, [calEl]) == false) {
                    return;
                }

                self.fill(calEl);

                var pos = jqSelf.offset();
                var viewPort = self.getViewport();
                var top = pos.top;
                var left = pos.left;
                var oldDisplay = $(calEl).css('display');

                cal.css({
                    visibility: 'hidden',
                    display: 'block',
                    position: 'absolute'
                });

                switch (options.position){
                    case 'top':
                        top -= calEl.offsetHeight;
                        break;
                    case 'left':
                        left -= calEl.offsetWidth;
                        break;
                    case 'right':
                        left += jqSelf.outerWidth();
                        break;
                    case 'bottom':
                        top += jqSelf.outerHeight();
                        break;
                }

                if(top + calEl.offsetHeight > viewPort.t + viewPort.h) {
                    top = pos.top  - calEl.offsetHeight;
                }
                if(top < viewPort.t) {
                    top = pos.top + this.offsetHeight + calEl.offsetHeight;
                }
                if(left + calEl.offsetWidth > viewPort.l + viewPort.w) {
                    left = pos.left - calEl.offsetWidth;
                }
                if(left < viewPort.l) {
                    left = pos.left + this.offsetWidth
                }

                cal.css({
                    visibility: 'visible',
                    display: 'block',
                    top: top + 'px',
                    left: left + 'px'
                });

                options.onAfterShow.apply(this, [cal.get(0)]);
                $(document).on('mousedown', {
                    cal: cal,
                    trigger: this,
                    context : self
                }, self.hide);
            }
            return false;
        },
        hide : function (ev) {
            var self = ev.data.context;
            if (ev.target != ev.data.trigger 
                && !self.isChildOf(ev.data.cal.get(0), ev.target, ev.data.cal.get(0))) {
                if (ev.data.cal.data('datepicker').onBeforeHide.apply(this, [ev.data.cal.get(0)]) != false) {
                    ev.data.cal.hide();
                    ev.data.cal.data('datepicker').onAfterHide.apply(this, [ev.data.cal.get(0)]);
                    // remove the global listener
                    $(document).off('mousedown', self.hide);
                }
            }
        },
        normalizeDate : function (mode, date) {
            // 如果是非单日模式，确保date是一个空数组
            if(mode != 'single' && !date) date = [];

            // if we have a selected date and not a null or empty array
            if(date && (!$.isArray(date) || date.length > 0)) {
                if (mode != 'single') {
                    if (!$.isArray(date)) {
                        date = [((new Date(date)).setHours(0,0,0,0)).valueOf()];
                        if (mode == 'range') {
                            // create a range of one day
                            date.push(((new Date(date[0])).setHours(23,59,59,0)).valueOf());
                        }
                    }
                    else {
                        for (var i = 0; i < date.length; i++) {
                            date[i] = ((new Date(date[i])).setHours(0,0,0,0)).valueOf();
                        }
                        if (mode == 'range') {
                            //选择一个范围的日期
                            if(date.length == 1) date.push(new Date(date[0]));
                            date[1] = ((new Date(date[1])).setHours(23,59,59,0)).valueOf();
                        }
                    }
                }
                else {
                    date = typeof date === 'string' ? date.replace(/-/g, '/') : date;
                    //选择单日期模式
                    date = ((new Date(date)).setHours(0,0,0,0)).valueOf();
                }
            }
            return date;
        },
        /**
         * 显示日历
         * @method showPicker
         * @chainable
         */
        showPicker: function () {
            var node = this.options.node;
            var datepickerId = node.data('datepickerId');
 
            if (datepickerId) {
                var cal = $('#' + datepickerId);
                var options = cal.data('datepicker');
                if(!options.inline) {
                    this.show.apply(node[0], [{data: this}]);
                }
            }
            return this;
        },
        /**
         * 隐藏日历
         * @method hidePicker
         * @chainable
         */
        hidePicker: function () {
            var node = this.options.node;
            var datepickerId = node.data('datepickerId');

            if (datepickerId) {
                var cal = $('#' + datepickerId);
                var options = cal.data('datepicker');
                if(!options.inline) {
                    $('#' + datepickerId).hide();
                }
            }
            return this;
        },
        /**
         * 设置要选择的日期
         * @method setDate
         * @param {Date|int|String} date 要选择的日期
         * @param {Boolean} date 是否要连续选择
         * @chainable
         */
        setDate: function (date, shiftTo, isSelect) {
            var node = this.options.node;
            var datepickerId = node.data('datepickerId');
           
            if (datepickerId) {
                var cal = $('#' + datepickerId);
                var options = cal.data('datepicker');
                options.date = this.normalizeDate(options.mode, date);

                if (shiftTo) {
                    options.current = new Date(options.mode != 'single' ? options.date[0] : options.date);
                }
                this.fill(cal.get(0), isSelect);
            }
            return this;
        },
        /**
         * 获取选择到的日期
         * @method getDate
         * @returns String
         */
        getDate: function() {
            var node = this.options.node;
            var datepickerId = node.data('datepickerId');

            if (node.size() > 0) {
                return this.prepareDate($('#' + datepickerId).data('datepicker'));
            }
        },
        /**
         * 清除当前选择的日期
         * @method clear
         * @chainable
         */
        clear: function(){
            var node = this.options.node;
            var datepickerId = node.data('datepickerId');

            if (datepickerId) {
                var cal = $('#' + datepickerId);
                var options = cal.data('datepicker');

                if (options.mode == 'single') {
                    options.date = null;
                } else {
                    options.date = [];
                }
                fill(cal.get(0));
            }
            return this;
        }
    });

    module.exports = Datepicker;
})();


},{"./Widget":24}],15:[function(require,module,exports){
/**
 * 对话框<br>
 * version 1.0.1.20150325<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module UI
 * @class Dialog
 */
(function () {
    'use strict';

    var Widget = require('./Widget');
    var Log = require('../Util/Log');
    var Detect = require('../Util/Detect');
    var Guid = require('../Util/Guid');
    var dialogColletion = {
        count : 0, //显示状态的弹窗计数
        maskZIndex : [],
        openStatusDialog : []
    };
    var zIndex = 1000; //弹窗的层级

    function zIndexManager () {
        return ++zIndex;
    }

    var Dialog = Widget('V.Dialog', null, {
        options : {
            /**
             * 弹窗宽高 
             * @property size 
             * @type Array 
             * @default "[500, 300]"
             */
            size : 'small', //弹窗宽高
            /**
             * 弹窗显示的位置，
             * 第一个值为top，第二个值为left，
             * 如果为空数组则为居中。
             * @property position 
             * @type Array 
             * @default "[]"
             */
            position : [],
            /**
             * 弹窗内容
             * @property content 
             * @type String 
             * @default null
             */
            content : null, //弹窗内容
            /**
             * 弹窗标题
             * @property title 
             * @type String 
             * @default null
             */
            title : null,
            /**
             * 过渡效果
             * @property effect 
             * @type Object
             * @default {
                effect : 'slide', //过渡效果
                duration : 500 //过渡时间
            }
             */
            effect : {
                effect : 'slide', //过渡效果
                duration : 500 //过渡时间
            },
            /**
             * 是否为模态弹窗，如果是则会出现遮罩层
             * @property model 
             * @type Boolean
             * @default false
             */
            model : false,
            /**
             * 弹窗外层类名
             * @property elStyle 
             * @type String
             * @default ''
             */
            elStyle : '',
            /**
             * 弹窗按钮，每个按钮格式为['type', 'text', fn]
             * @property botton [{type : '按钮类型',text : '按钮显示的文字',size : '按钮的尺寸，可选[small medium large super]',event : '点击按钮时要执行的函数'}] 
             * @default []
             */
            botton : [],
            /**
             * 是否依赖对象触发
             * @property trigger
             * @type jQuery Object
             * @default null
             */
            trigger : null,
            /**
             * 触发的事件类型
             * @property triggerType
             * @type String
             * @default 'click'
             */
            triggerType : 'click',
            /**
             * 展示后回调函数
             * @property showEvent
             * @type Function
             * @default $.noop
             */
            showEvent : $.noop,
            /**
             * 关闭弹窗后回调函数
             * @property closeEvent
             * @type {[type]}
             * @default $.noop
             */
            closeEvent : $.noop,
            /**
             * 弹窗层级数
             * @property zIndex
             * @type Number
             * @default null
             */
            zIndex : null,
            /**
             * 遮罩层的透明度
             * @property opacity
             * @type Float
             * @default 0.1
             */
            opacity : 0.1, 
            /**
             * 遮罩层的颜色
             * @property maskColor
             * @type String
             * @default #000000
             */
            maskColor : '#000000',
            /**
             * 是否悬浮弹窗
             * @property isFixed
             * @type Boolean
             * @default true
             */
            isFixed : true,
            /**
             * 添加埋点
             * @property mars_pop
             * @type String
             * @default ''
             */
            mars_pop : '',
            /**
             * 是否缓存弹窗内容
             * @property isCache
             * @type Boolean
             * @default false
             */
            isCache : false,
            /**
             * 是否自适应宽高
             * @property autoResize
             * @type Boolean
             * @default false
             */
            autoResize : false, //是否自适应宽高
            /**
             * 是否点击蒙层关闭弹层
             * @property clickMaskClose
             * @type Boolean
             * @default false
             */
            clickMaskClose : false,
            /**
             * 是否为自定义弹窗模板
             * @property custom
             * @type {Boolean}
             * @default false
             */
            custom : false,
            /**
             * 是否使用自定义样式
             * @property customStyle
             * @type {Boolean}
             * @default false
             */
            customStyle : false,
            /**
             * 右上角关闭按钮配置属性
             * @property closeBtnAttr
             * @type {Object}
             * @default {}
             */
            closeBtnAttr : {},
            /**
             * 是否显示弹窗右上角的关闭按钮
             * @property isShowCloseBtn
             * @type {Boolean}
             * @default true
             */
            isShowCloseBtn : true
        },
        selects : [], //页面上所有select控件的集合
        buffObj : null, //模态弹窗内容缓存
        isOpenFlag : false, //记录弹窗是否打开的状态
        dialogTemplates : '<div class="ui-dialog">\
            <h2 class="ui-dialog-title">标题区</h2>\
            <div class="ui-dialog-inner">\
                <a href="javascript:;" role="button" class="ui-dialog-close vipFont"></a>\
                <div class="ui-dialog-content">\
                    <h3 class="ui-dialog-tips f-text-center"><span class="text"><i class="vipFont if-sigh"></i>标题标题标题标题标题标题</span></h3>\
                    <p>正文一般用于标题的补充说明，可有可无依照具体场景而使用。</p>\
                </div>\
                <div class="ui-dialog-command"></div>\
            </div>\
        </div>',
        buttonTemplates : '<a href="javascript:;" role="button" class="ui-btn-{$btnSize} ui-btn-{$btnType}">{$btnText}</a>',
        customTemplates : '<div class="ui-dialog">\
                    <div class="_diaTitle"></div>\
                    <div class="_diaContent"></div>\
                    <div class="_diaButton"></div>\
                </div>',
        /**
         * 初始化
         */
        _init: function(option) {
            var self = this;
            var contentStyle = {};
            var posType;
            var options;
            var dialogTemplates;
            var buffObj;

            this.id = Guid();

            //初始化还原
            this.selects = [];
            this.buffObj = null;
            this.tag = 0;

            //合并配置选项,并注册到options
            options = this.setOptions(option);

            if (!options.custom) {
                self.dialogTemplates = dialogTemplates = $(self.dialogTemplates);
            }
            else {
                self.dialogTemplates = dialogTemplates = $(self.customTemplates);
            }

            //缓存窗口对象
            if (!options.custom) {
                buffObj = self.buffObj = {
                    dialog : dialogTemplates,
                    diaTitle : dialogTemplates.find('.ui-dialog-title'),
                    diaContent : dialogTemplates.find('.ui-dialog-content'),
                    diaButton : dialogTemplates.find('.ui-dialog-command'),
                    diaCloseBtn : dialogTemplates.find('.ui-dialog-close')
                };
            }
            else {
                buffObj = self.buffObj = {
                    dialog : dialogTemplates,
                    diaTitle : dialogTemplates.find('._diaTitle'),
                    diaContent : dialogTemplates.find('._diaContent'),
                    diaButton : dialogTemplates.find('.ui-dialog-command')
                };
            }

            //设置定位类型
            if (options.isFixed) {
                posType = 'fixed';
            }
            else {
                posType = 'absolute';
            }
            dialogTemplates.css({'position' : posType});

            //自定义样式
            if (options.elStyle) {
                buffObj.dialog.addClass(options.elStyle);
            }

            self.title(options.title); //初始化标题
            self.button(); //初始化按钮
            self.size(); //弹窗尺寸设置

            //是否使用默认样式
            if (options.customStyle) {
                buffObj.dialog.css({
                    background: 'none',
                    padding: 0,
                    'box-shadow': 'none',
                    '-webkit-box-shadow': 'none',
                    'filter': 'none'
                });
            }

            //是否显示弹窗右上角的关闭按钮
            if (options.isShowCloseBtn) {
                //弹窗右上角关闭按钮增加属性
                this.closeBtnAttr();
            }
            else {
                buffObj.diaCloseBtn.hide();
            }

            options.trigger = options.trigger || options.node;

            //触发目标事件绑定
            if (options.trigger) {
                $(options.trigger)
                .on(options.triggerType + '.dialog', function () {
                    self.open();
                });
            }
            return this;
        },
        //绑定弹窗内部元素的事件
        _bindEvent : function () {
            var self = this;

            //标准弹窗右上角事件绑定
            if (this.buffObj.diaCloseBtn) {
                this.buffObj.diaCloseBtn
                    .off('click.dialog')
                    .on('click.dialog', function () {
                        self.close();
                    });
            }

            //弹窗内部其他按钮的事件绑定
            this.buffObj.diaButton.find('[role=button]')
            .each(function (i, n) {
                var btnOptions = self.options.button[i];
                $(this)
                .off('click.dialog')
                .on('click.dialog', (function (btnOptions) {
                    return function () {
                        btnOptions.event && btnOptions.event.call(self);
                    }
                })(btnOptions));
            });
        },
        /*
         * 创建遮罩层
         * @return {Object} Dialog Object
         */
        _createMask: function() {
            var self = this;
            var options = self.options;
            var jqBackground = $('#_diaBackground');
            var selects = self.selects = $("select:not(#_diaWrap select):visible");
            var maskZIndex = options.zIndex ? options.zIndex : zIndexManager();
            options.model && dialogColletion.maskZIndex.push(maskZIndex);

            if (jqBackground.length == 0) { //新建蒙层
                var maskDiv = self.maskDiv = $('<div id="_diaBackground" class="ui-window-mask"></div>');
                var sizeCss = 'background:' + options.maskColor + ';'
                + 'opacity:' + options.opacity + ';'
                + 'filter:alpha(opacity=' + Number(options.opacity) * 100 + ')' + ';'
                + 'z-index:' + maskZIndex + ';'
                + 'display:none;';

                var ie6Css = Detect.isIE6 ? 'position:absolute; width:100%; height:' + $(document).height() + 'px;': '';
                maskDiv[0].style.cssText = sizeCss + ie6Css;

                $('body').append(maskDiv);
                
                //修复IE6屏幕闪动bug
                maskDiv.show();
            } 
            else { //使用已有蒙层
                self.maskDiv = jqBackground
                                .css({
                                    display : 'block',
                                    zIndex : maskZIndex
                                });
            }

            

            //点击蒙层关闭弹窗
            if (options.clickMaskClose) {
                $('#_diaBackground')
                .off('click.dialogMask')
                .on('click.dialogMask', function () {
                    var len = dialogColletion.openStatusDialog.length;
                    var dialog = dialogColletion.openStatusDialog[len - 1];
                    dialog && dialog.close();
                });
            }

            //修复IE6下,select控件穿透层问题
            Detect.isIE6 && selects.css({visibility: 'hidden'});
            return this;
        },
        /**
         * 移除遮罩层
         * @method removeMask
         * @chainable
         */
        removeMask: function() {
            var self = this;
            self.maskDiv.animate({opacity: 0}, 300, function(){
                $(this).remove();
            });
            //恢复IE6下的,select按件
            Detect.isIE6 && self.selects.css({visibility: 'hidden'});
            return this;
        },
        //填写右上角关闭按钮配置属性
        closeBtnAttr : function (attr) {
            var _attr = attr || this.options.closeBtnAttr;
            var buffObj = this.buffObj;

            if (buffObj.diaCloseBtn) {
                buffObj.diaCloseBtn.attr(_attr);
            }
            return this;
        },
        /**
         * 设置对话框的标题
         * @method title
         * @param {String, Boolean} text 标题内容. 为false则隐藏标题栏
         * @chainable
         */
        title: function(text) {
            var titleWrap = this.buffObj.diaTitle;
            var text = text || this.options.title;
            if (!text) {
                titleWrap.remove();
            } 
            else {
                titleWrap.html(text).show();
            }
            return this;
        },
        /**
        * 设置对话框的内容
        * @method content
        * @param {HTML, jQuery Object} msg 标题内容或jQuery Object
        * @chainable
        */
        content: function(msg) {
            var options = this.options;
            var contentWrap = this.buffObj.diaContent;

            if (typeof msg == 'undefined'
                || msg === null) {
                return this;
            }
            else {
                //如果传入的是jQuery对象,则提取里面的元素作为内容
                if($.type(msg) === 'object'){
                    msg = $(msg).html();
                }
                contentWrap.html(msg).show();

                this.size();
                this.position();
            }
            return this;
        },
        /**
        * 设置对话框的按钮
        * @method button
        * @param {Array} arr [{
        *                        type : '按钮类型',
        *                        text : '按钮显示的文字',
        *                        size : '按钮的尺寸，可选[small medium large super]',
        *                        event : '点击按钮时要执行的函数',
        *                        attr : '按钮上面的属性'
        *                    }]
        * @chainable
        * @demo Dialog.html
        * @show true
        */
        button: function(arr) {
            var self = this;
            var options = self.options;
            var buffObj = self.buffObj;
            var btnHtmlArr = $();

            if ($.isArray(arr)) {
                options.button = arr;
            }

            //是否显示按钮
            if (options.button && $.isArray(options.button) && options.button.length > 0) {
                buffObj.diaButton.show();

                for (var i = 0, len = options.button.length; i < len; i++ ) {
                    var btn = options.button[i];
                    var btnType = !btn.type ? 'default' : btn.type; //按钮类型
                    var btnText = !btn.text ? '按钮' : btn.text; //按钮显示的文字
                    var btnSize = !btn.size ? 'medium' : btn.size; //按钮的大小
                    var btnListener = self.btnListener = self.btnListener || {}; //按钮监听事件空间
                    var btnHtml = self.buttonTemplates; //按钮的模板
                    var btnHtmlProc = btnHtml.replace(/{\$btnSize}/g, btnSize)
                                        .replace(/{\$btnType}/g, btnType)
                                        .replace(/{\$btnText}/g, btnText);
                    var jqBtn = $(btnHtmlProc);
                    btn.attr && jqBtn.attr(btn.attr);
                    btnHtmlArr = btnHtmlArr.add(jqBtn);
                }
                
                buffObj.diaButton.html(btnHtmlArr);
                self._bindEvent();
            }
            else {
                buffObj.diaButton.hide();
            }

            return this;
        },
        /**
         * 设置对话框的宽高
         * @method size
         * @param {Number | String} width Number类型时表示宽度, 
         *                                String尺寸时表示尺寸名称
         * @param {Number} height 高度
         * @chainable
         */
        size: function(width, height) {
            var self = this;
            var options = self.options;
            var buffObj = self.buffObj;
            
            if (options.autoResize) {
                return this;
            }

            if ((!width && $.type(options.size) === 'string')
                || $.type(arguments[0]) === 'string') {
                var sizeName = arguments[0] || options.size;
                var sizeType = 'small medium large super';
                var rmClass = sizeType.split(' ').join(' ui-dialog-');

                if (sizeType.indexOf(sizeName) != -1) {
                    buffObj.dialog
                    .removeClass('ui-dialog-' + rmClass)
                    .addClass('ui-dialog-' + sizeName);
                }
                self.position();
            }
            else if ($.type(options.size) === 'array'
                || $.type(arguments[0]) === 'number') {
                //self.size(options.size[0], options.size[1]); //初始化宽高
                var w = width || options.size[0];
                var h = height || options.size[1];
                buffObj.dialog.width(w).height(h);
            }

            return this;
        },
        /*
         * 获取水平居中位置
         * @method size
         * @return {String} 返回水平居中位置
         */
        getMid : function () {
            var scrollLeft = $(document).scrollLeft(),
                dW = $(document).width(),
                buffObj = this.buffObj,
                mid = (dW - buffObj.dialog.outerWidth(true)) / 2 - scrollLeft + "px";

            return mid;
        },
        /*
         * 获取垂直居中位置
         * @return {String} 返回水平居中位置
         */
        getVertical : function () {
            var scrollTop = $(document).scrollTop(),
                cH = $(window).height(),
                buffObj = this.buffObj,
                vertical = (cH - buffObj.dialog.outerHeight(true)) / 2 + "px";
            return vertical;
        },
        /**
        * 设置对话框的显示位置
        * @method position
        * @param {Number} left  距页面左边距离
        * @param {Number} top  距页面顶部距离
        * @chainable
        */
        position: function(left, top) {
            var self = this,
                options = self.options,
                contentStyle = {},
                pos,
                buffObj = self.buffObj;

            //公共方法权重优先
            if (options.position.length) {
                switch (options.position.length) {
                case 3:
                    pos = $(options.position[0]).position();
                    contentStyle = {
                        top : pos.top + options.position[1],
                        left : pos.left + options.position[2]
                    };
                    break;
                case 2:
                    contentStyle['left'] = options.position[1];
                    contentStyle['top'] = options.position[0];
                case 1:
                    contentStyle['top'] = options.position[0];
                    contentStyle['left'] = self.getMid();
                    break;
                }
            } 
            else {
                //position为缺省值时,则dialog自动居中
                contentStyle['left'] = self.getMid();
                contentStyle['top'] = self.getVertical();
            }

            if (!options.isFixed) {
                contentStyle['top'] = $(window).scrollTop() + parseInt(contentStyle['top']);
            }

            self.contentStyle = contentStyle;
            buffObj.dialog.css({
                left: contentStyle['left'],
                top: contentStyle['top']
            });

            //IE6下用absolute来定位
            if (Detect.isIE6) {
                buffObj.dialog.css({position: 'absolute'});
                if (options.isFixed) {
                    $(window).scroll(function(){
                        buffObj.dialog[0]
                        .style.top = Number((contentStyle['top']+'')
                        .replace(/px/,'')) + $(document).scrollTop() + 'px'
                    }).trigger('scroll');
                }
            }

            return this;
        },
        /**
         * 打开对话框
         * @method open
         * @chainable
         */
        open: function () {
            var self = this;
            var dialogTop;
            var options = self.options;
            var buffObj = self.buffObj;
            var jqBody = $('body');

            if (!self.isOpenFlag) {
                dialogColletion.count++;
                dialogColletion.openStatusDialog.push(self);
                self.isOpenFlag = true;
            }
            else {
                return this;
            }

            //创建遮罩层
            options.model && self._createMask();

            if (jqBody.find(buffObj.dialog).length == 0) {
                jqBody.append(self.dialogTemplates);
                //初始化内容
                self.content(options.content);
                //绑定事件
                self._bindEvent();
            }
            else {
                //如果弹窗缓存内容则直接显示，否则则重新设置内容
                if (!options.isCache) {
                    self.content(options.content);
                }
            }

            //设置层级
            buffObj.dialog.css({
                zIndex : options.zIndex ? options.zIndex + 1 : zIndexManager()
            });

            //初始化dialog位置
            self.position();
            
             //窗体显示效果
            buffObj.dialog.addClass('z-ui-dialog-in');

            //埋点
            if (options.mars_pop != '') {
                $.Listeners.pub('mars.pop').success({'mars_pop': options.mars_pop});
            }

            //窗口切换调整遮罩
            $(window)
                .off('resize.' + self.id)
                .on('resize.' + self.id, function () {
                    self.resize();
                });
            self.resize();

            options.showEvent.call(self);
            return this;
        },
        /**
         * 重置对话框位置
         * @method resize
         * @chainable
         */
        resize: function(left, top){
            this.position(left, top);
            return this;
        },
        /**
         * 移除对话框
         * @method remove
         */
        remove: function(){
            var that = this;
            this.close({
                forbiddenCloseEvent : true
            });
            setTimeout(function () {
                that.buffObj.dialog.remove();
            }, 350);
        },
        /**
         * 销毁对话框事件，并解除触发对象的对应事件
         * @method destroy
         */
        destroy: function(){
            var self = this,
                options = self.options;
            $(options.trigger).off(options.triggerType + '.dialog');
            self.remove();
        },
        /**
         * 关闭对话框
         * @param {Boolean} forbiddenCloseEvent 是否执行配置中的关闭回调
         * @method close
         * @chainable
         */
        close: function (forbiddenCloseEvent) {
            var self = this,
                options = self.options,
                buffObj = self.buffObj,
                contentStyle = self.contentStyle,
                dialogTop;

            if (!forbiddenCloseEvent) {
                var rt = options.closeEvent.call(this, null); //执行关闭弹窗回调
                if (rt === false) {return;}
            }

            if (Detect.isIE6 && self.selects.length) {
                self.selects.css({visibility: 'visible'});
            }

            if (self.isOpenFlag === true && dialogColletion.count > 0) {
                dialogColletion.count--;
                dialogColletion.openStatusDialog.pop();
                self.isOpenFlag = false;

                //降低遮罩层级
                var mzList = dialogColletion.maskZIndex;
                var lastMZ;
                mzList.pop();
                lastMZ = mzList[mzList.length - 1];

                if (lastMZ) {
                    $('#_diaBackground').css('zIndex', lastMZ);
                }
            }

            //窗体显示效果
            buffObj.dialog.addClass('z-ui-dialog-out');
            setTimeout(function () {
                buffObj.dialog.removeClass('z-ui-dialog-in z-ui-dialog-out');
            }, 350);

            //隐藏遮罩
            if (self.maskDiv
                && dialogColletion.count <= 0) {
                self.maskDiv.hide();
            }

            //解除遮罩事件
            $(window).off('resize.' + self.id);

            return this;
        },
        /**
         * 获取对话框内部元素
         * @method getElem
         * @param {String} str 选择符
         * @return {jQuery Object}
         */ 
        getElem : function (str) {
            return this.dialogTemplates.find(str);
        }
    });

    module.exports = Dialog;
})();
},{"../Util/Detect":29,"../Util/Guid":30,"../Util/Log":35,"./Widget":24}],16:[function(require,module,exports){
/**
 * 表单组件<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module UI
 * @class Form
 */
(function () {
    'use strict';

   	var Widget = require('./Widget');

   	var Form = Widget('V.Form', null, {
        options : {
            /**
             * 表单对象 
             * @property trigger 
             * @type String | jQuery Object 
             * @default ''
             */
            trigger : '',
            /**
             * 表单提交超时(毫秒)
             * @property timeout 
             * @type Number
             * @default 6000
             */
            timeout : 6000,
            /**
             * 表单提交后的错误回调
             * @property errorF 
             * @type Function
             * @default function () {}
             */
            errorF : function () {},
            /**
             * 表单提交前要执行的回调
             * @property submitBefor 
             * @type Function
             * @default function () {}
             */
            submitBefor : function () { return true; },
            /**
             * 表单提交后的成功回调
             * @property callbackAfter 
             * @type Function
             * @default function () {}
             */
            callbackAfter : function () {}
        },
        
        /**
         * 初始化
         * @param {Object} option 自定义配置
         * @chainable
         */
        _init: function(option) {
            var that = this;
            var options;

            //合并配置选项,并注册到options
            options = this.setOptions(option);

            if (typeof options.trigger == 'string' 
                && options.trigger.length) {
                options.trigger = $(options.trigger);
            }

            if (options.trigger) {
                this._set(options);
            }

            return that;
        },
        /*
         * 绑定表单提交逻辑
         * @param {Object} parms 表单组件配置
         */
        _set : function(parms) {
            //捆绑事件
            parms.trigger.on('submit', function () {
                var objF = $(this);

                //提交前外调校验函数
                if (parms.submitBefor.call(objF)) {
                    //禁用按钮
                    objF.find('button[type=submit]').prop('disabled', true);

                    //jsonp提交
                    $.ajax ({
                        url : objF.attr('action'),
                        data : objF.serialize(),
                        timeout : parms.timeout,
                        dataType : 'jsonp',
                        error : function () {
                            //恢复按钮
                            if (objF.find('button[type=submit]').length) {
                                objF.find('button[type=submit]')
                                    .html(objF.find('button[type=submit]').val())
                                    .prop('disabled', false);
                            }

                            parms.errorF();
                        },
                        success : function (re) {
                            //恢复按钮
                            if (objF.find('button[type=submit]').length) {
                                objF.find('button[type=submit]')
                                    .html(objF.find('button[type=submit]').val())
                                    .prop('disabled', false);
                            }

                            parms.callbackAfter.call(objF, re);

                            objF[0].reset();
                        }
                    });
                }

                return false;
            });
        }
    });
    module.exports = Form;
})();


},{"./Widget":24}],17:[function(require,module,exports){
/**
 * 滚动生成DOM<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module UI
 * @class Lazydom
 */
(function () {
    'use strict';

    var Widget = require('./Widget');
    var Template = require('./Template');

    var lazyDom = Widget('V.lazyDom', null, {
        options : {
            /**
             * 目标滚动容器
             * @property target
             * @type Obejct
             * @default window
             */
            target : window,
            /**
             * 计算模式
             * @property method
             * @type String
             * @default fromToBottom
             */
            method : 'fromToBottom',
            /**
             * 目标高度，通常为屏幕的高度
             * @property targetH
             * @type Number
             * @default 0
             */
            targetH : 0,
            /**
             * 距底部的提前渲染高度，
             * 在method为fromToBottom时，
             * 该属性生效
             * @property preHeight
             * @type Number
             * @default 200
             */
            preHeight : 200,  //距底部的提前渲染高度
            /**
             * 公共回调方法
             * @property renderCb
             * @type Function
             * @default $.noop
             */
            renderCb : $.noop,
            /**
             * 是否在生成dom之后自动绑定lazyolad
             * @property isLazyLoad
             * @type Boolean
             * @default true
             */
            isLazyLoad : true,  //是否执行img lazyload
            /**
             * 所有的数据块<br>
             * [{
             *     node //插入到目标容器<br>
             *     template //模板<br>
             *     height //每一行的高度<br>
             *     numsPerRow //每行个数<br>
             *     type //执行类型，配置'callback'则只执行函数, 不配置则为数据模板渲染
             *     renderCb //每个数据块生成后执行回调<br>
             * }]
             * @property allData
             * @type Array
             * @default []
             */
            allData : [],
            /**
             * 全部加载完成后执行的回调
             * @type Function
             */
            finishEvent : $.noop,
            /**
             * 强制初始渲染多少屏内容
             * @type {Number}
             */
            preRender : 0,
            doc : $(document),
            oldTop : 0,   //记录当前滚动过的高度
            recTop : 0,   //记录生成DOM后的高度
            dataIndex : 0 //数据块坐标
        },
        /**
         * 初始化
         * @param {Object} option 自定义配置
         * @chainable
         */
        _init: function(option) {
            var that = this;
            var options;

            //合并配置选项,并注册到options
            options = this.setOptions(option);
            options.target = $(options.target);
            that.getTargetH();
            that.process();
            that.bindEvent();
            that.scroll();
            that.chkBegin();
            return this;
        },
        /**
         * 处理数据
         * @return {[type]} [description]
         */
        process : function () {
            var options = this.options;
            var allData = this.options.allData;

            //for (var i = 0, len = allData.length; i < len; i++) {
                var n = allData[options.dataIndex];
                if (n) {
                    n.data = n.data ? n.data : [];
                    //滚动一屏需要
                    n._perNums = Math.ceil(options.targetH / n.height);
                    //模板层
                    n._template = $(n.template).html();
                    //数据长度
                    n.dataLen = n.data.length;
                    //数据块渲染后执行的回调
                    n.renderCb = n.renderCb ? n.renderCb : $.noop;
                    n.node = $(n.node);
                }
            //}
        },
        /**
         * 检查首页是否满足滚动距离的需求
         * @method chkBegin
         */
        chkBegin : function () {
            var that = this;
            var options = that.options;
            var winH = options.target.height();
            var docH = options.doc.height();

            //强制提前渲染多少屏
            if (options.preRender && !that.preRenderDone) {
                var sData = that.extract(options.preRender);
                if (sData) {
                    that.createDom(sData);
                    that.preRenderDone = true;
                }
            }

            if (options.method == 'fromToTop') {
                if (docH < winH * 2) { //不足两屏时
                    var sData = that.extract(1);
                    if (sData) {
                        setTimeout(function () {
                            that.createDom(sData);
                            that.chkBegin();
                        }, 1);
                    }
                }
            }
        },
        /**
         * 绑定事件
         */
        bindEvent : function () {
            var that = this;
            var options = this.options;

            options.target.on('scroll.lazyDom', function () {
                that.scroll();
            });

            options.target.on('resize.lazyDom', function () {
                that.getTargetH();
                that.process();
                that.scroll();
            });
        },
        /**
         * 获取滚动主体的高度
         * @method getTargetH
         * @return {Number} 主体的高度
         */
        getTargetH : function () {
            var options = this.options;

            options.targetH = options.target.height();
            return options.targetH;
        },
        /**
         * 滚动时执行的方法
         */
        scroll : function () {
            var that = this;
            var options = this.options;
            var newTop = options.target.scrollTop();
            var docH = options.doc.height();

            //离顶部距离开始计算
            if (options.method == 'fromToTop') {
                if (newTop > options.oldTop) {
                    var scrollHeight = newTop - options.recTop;
                    //滚动过的高度大于目标窗口的高度
                    if (scrollHeight > options.targetH) {
                        var len = Math.floor(scrollHeight/options.targetH);
                        if (docH - newTop < options.targetH) {
                            len = len + 1;
                        }
                        
                        var sliceData = that.extract(len);
                        
                        if (sliceData) {
                            that.createDom(sliceData);
                        }
                        options.recTop = newTop;
                    }
                    options.oldTop = newTop;
                }
            }

            //离底部距离开始计算
            if (options.method == 'fromToBottom') {
                if (docH - newTop - options.targetH <= options.preHeight) {
                    var sliceData = that.extract(1);
                    if (sliceData) {
                        that.createDom(sliceData);
                    }
                }
            }
        },
        /**
         * 抽取一屏的数据
         * @return {[type]} [description]
         */
        extract : function (screenNums) {
            var that = this;
            var options = that.options;
            var curData = options.allData[options.dataIndex];

            if (curData && curData.type !== 'callback') {
                var startCur = curData._startCur ? curData._startCur : 0;
                var endCur = startCur + curData._perNums * curData.numsPerRow * screenNums;
                var sliceData = curData.data.slice(startCur, endCur);

                var retData = {
                    node : curData.node,
                    height : curData.height,
                    numsPerRow : curData.numsPerRow,
                    template : curData._template,
                    renderCb : curData.renderCb,
                    sliceData : sliceData,
                    perNums : curData._perNums
                }

                //标记下一次开始位置
                curData._startCur = endCur;

                //如果超出当前标记
                if (curData._startCur >= curData.data.length) {
                    if (options.dataIndex < options.allData.length) {
                        options.dataIndex++;
                        that.process();
                        that.scroll();
                    }
                    
                }
                
                return retData;
            }
            else if (curData && curData.type === 'callback') {
                curData.renderCb && curData.renderCb(curData.node);
                if (options.dataIndex < options.allData.length) {
                    options.dataIndex++;
                    that.process();
                    that.scroll();
                }
                
                return null;
            }
            else {
                options.finishEvent();
                options.target.off('scroll.lazyDom');
                options.target.off('resize.lazyDom');
                return null;
            }
        },
        lazyImg : false,
        /**
         * 创建容器
         * @param  {Object} createObj [description]
         */
        createDom : function (createArr) {
            var that = this;
            var options = this.options;

            var obj = createArr;
            var node = obj.node;
            var htmlArr = [];
            var tempInstance = Template({
                templateElement : obj.template,
                replace : null 
            });
            
            for (var j = 0, jLen = obj.sliceData.length; j < jLen; j++) {
                var html = tempInstance.process(obj.sliceData[j]);
                htmlArr.push(html);
            }

            var fragment = $(htmlArr.join(''));
            node.append(fragment);
            options.renderCb(node, fragment); //公共渲染后回调方法
            obj.renderCb(node, fragment); //数据块渲染后回调方法

            //图片lazyload
            if (options.isLazyLoad
                && typeof $.fn.lazyload == 'function') {
                fragment.find('img.lazy')
                        .lazyload({
                            threshold : 200,
                            failure_limit : 10
                        });
            }

            createArr = null;
        }
    });
    module.exports = lazyDom;
})();

},{"./Template":22,"./Widget":24}],18:[function(require,module,exports){
/**
 * 占位符(本组件会给不支持placeholder的浏览器做兼容处理)<br>
 * version 1.0.1.20141102<br>
 * author zakk.ye <zakk.ye@vipshop.com><br>
 * @module UI
 * @class Placeholder
 */
(function () {
    'use strict';

   	var Widget = require('./Widget');
    var Detect = require('../Util/Detect');

   	var Placeholder = Widget('V.Placeholder', null, {
        /**
         * 初始化，添加监听事件
         */
        _init : function () {
            this.addEvent();
            this.addStyle();
        },
        /**
         * 销毁当前处理
         */
        destroy : function () {
            this.removeEvent();
            this.removeStyle();
        },
        /**
         * 文本框选择器
         * @type {String}
         */
        selecter : '[placeholder]',
        /**
         * 伪placeholder文本元素选择器
         * @type {String}
         */
        tipsSelecter : '.J_placeholder',
        /**
         * 监听事件Id，用于监听事件命名空间
         * @type {String}
         */
        eventId : '.placeholder',
        /**
         * 初始化的时候会修改.vipPlaceholder类样式，页面将添加一个style，此为style元素id
         * @type {String}
         */
        styleId : 'vipStyle_' + new Date().getTime(),
        /**
         * 修改.J_placeholder 类display:block，即.J_placeholder类显示
         */
        addStyle : function () {
            var div = document.createElement('div');
            div.innerHTML = "+<style id='"+ this.styleId +"'>"+ this.tipsSelecter +"{display:block;}</style>";
            $('head:first').append(div.childNodes[1]);
            div = null;
        },
        /**
         * 删除.J_placeholder 类的修改，即.J_placeholder 类元素不显示
         */
        removeStyle : function () {
            var $style = $('#'+ this.styleId );
            if (!$style[0]) return this;
            try {
                $style[0].styleSheet.cssText = '';
            } catch(e) {

            }
            $style.remove();
        },
        /**
         * 获取当前文本框伪placeholder提示元素
         * @param  {jQuery Object} $target 当前目标元素
         * @return {jQuery Object}         伪placeholder提示元素
         */
        getTips : function ($target) {
            return $target.parent().find( this.tipsSelecter );
        },
        /**
         * keyup事件处理
         * @param  {jQuery Object} $target [当前目标元素]
         */
        keyup : function ($target) {
            var val = $.trim( $target.val() ),
                $tips = this.getTips( $target );
            if (!$tips[0]) return;
            if (!val.length) {
                $tips.show();
            } else {
                $tips.hide();
            }
        },
        /**
         * keypress事件处理
         * @param  {jQuery Object} $target 当前目标元素
         */
        keypress : function ($target) {
            var val = $.trim( $target.val() ),
                $tips = this.getTips( $target );
            if (!$tips[0]) return;
            $tips.hide();
        },
        /**
         * 添加监听事件
         */
        addEvent : function () {
            var self = this,
                selecter = self.selecter,
                eventId = self.eventId,
                tipsSelecter = self.tipsSelecter,
                $body = $('body');
            $body.delegate( selecter, 'keyup' + eventId, function(e){
                self.keyup( $( e.target ) );
            });
            $body.delegate( selecter, 'keypress' + eventId, function(e){
                self.keypress( $( e.target ) );
            });
            //点击提示文本，触发input focus事件
            $body.delegate( tipsSelecter, 'click' + eventId, function(e){
                var $target = $( e.target ),
                    $input = $target.parent().find( self.selecter );
                $input[0] && $input.focus();
            });
        },
        /**
         * 删除监听方法
         */
        removeEvent : function () {
            $("body").undelegate( this.eventId );
            $body.undelegate( this.selecter, 'placeholder' );
        }
    });
    
    $(function () {
        if (!Detect.placeholder) {
            Placeholder();
        }
    });
    module.exports = Placeholder;
})();


},{"../Util/Detect":29,"./Widget":24}],19:[function(require,module,exports){
/**
 * 滚动侦测组件<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module UI
 * @class Scrollspy
 */
(function () {
    'use strict';

    var Widget = require('./Widget');
    var Log = require('../Util/Log');

    var Scrollspy = Widget('V.scrollspy', null, {
        options : {
            /**
             * 源html控件，触发按钮 
             * @property trigger 
             * @type String | jQuery object 
             * @default ''
             */
            trigger : '',
            /**
             * 源html控件，目标内容容器
             * @property panel 
             * @type String | jQuery object 
             * @default ''
             */
            panel : '',
            /**
             * 设置滚动高度差
             * @property diffHeight 
             * @type Number
             * @default 0
             */
            diffHeight : 0,
            /**
             * 触发事件类型
             * @property triggerType 
             * @type String
             * @default 'click'
             */
            triggerType : 'click',
            /**
             * 滚动到目标点时，给触发按钮添加的样式。
             * @property activeCls 
             * @type String
             * @default 'cur'
             */
            activeCls : 'cur',
            /**
             * 是否在滚动时一直执行触发事件。（false 为只在变换不同对象时才会执行触发事件）
             * @property isAlwaysCall 
             * @type Boolean
             * @default true
             */
            isAlwaysCall : true,
            /**
             * 为支持反向触发，即点击按钮可以滚动到对应位置，反之亦然。
             * @property reverse 
             * @type Boolean
             * @default true
             */
            reverse : true,
            /**
             * 页面滚动时间，默认值600
             * @property speed 
             * @type Number
             * @default 600
             */
            speed : 600,
            /**
             * 当滚动点没落在任何区间时，所执行的事件，指针为spyObject。
             * @property noSpyEvent 
             * @type Function
             * @default $.noop
             */
            noSpyEvent : $.noop,
            /**
             * 当滚动点落在任一区间时，所执行的事件，指针为spyObject。
             * @property spyEvent 
             * @type Function
             * @default $.noop
             */
            spyEvent : $.noop,
            /**
             * 当点击按钮时触发的事件，指针为spyObject。
             * @property clickEvent 
             * @type Function
             * @default $.noop
             */
            clickEvent : $.noop,
            _curObject : null // 保存实例私有变量(私有属性)
        },
        /**
         * 初始化
         * @method _init
         * @param {Object} option 自定义配置
         * @private
         * @chainable
         */
        _init : function (option) {
            var that = this,
                options,
                triggerDom,
                panelDom;

            //合并配置选项,并注册到options
            options = this.setOptions(option);
            if (options.target) {
                options.node = $(options.target);
            }
            //初始化侦测队列
            that._spyArray = that.triggerDomArray = that.panelDomArray = null;
            that.timeStamp = +new Date();

            //窗口改变尺寸时，重新计算各项值
            $(window).resize(function () {
                that._expands();
            });

            that._expands();
            that._bindScroll();

            return that;
        },
        /*
         * 扩展全局设置到每个侦测对象
         * @method
         * @access private
         * @param {string | jQuery Object} 要监听的按钮对象
         * @param {string | jQuery Object} 要监听的内容对象
         * @returns {Object} ScrollSpy Object
         */
        _expands : function (trigger, panel) {
            var tempObj,
                that = this,
                options = that.options,
                trigger = trigger || options.trigger,
                panel = panel || options.panel,
                triggerDomArray = that.triggerDomArray = $(trigger),
                panelDomArray = that.panelDomArray = $(panel),
                spyArray = that._spyArray;

            //refresh
            if (arguments.length == 0) {
                spyArray = [];
            }

            for(var i = 0, len = triggerDomArray.length; i < len; i++) {
                tempObj = {};
                tempObj.triggerDom = triggerDomArray.eq(i);
                tempObj.panelDom = panelDomArray.eq(i);
                if (tempObj.panelDom.length > 0
                    && tempObj.panelDom.offset().top > 50000) {return;}
                tempObj.selfStartDiffHeight = tempObj.panelDom.data('startDiffHeight') || 0;
                tempObj.selfEndDiffHeight = tempObj.panelDom.data('endDiffHeight') || 0;
                if (options.addUp) {
                    if (i == 0) {
                        tempObj.panelDom.length > 0 && (tempObj.startPoint = tempObj.panelDom.offset().top);
                        
                    }
                    else {
                        tempObj.startPoint = spyArray[i-1].endPoint;
                    }
                }
                else {
                    tempObj.panelDom.length > 0 && (tempObj.startPoint = tempObj.panelDom.offset().top);
                }
                tempObj.endPoint = tempObj.startPoint + (tempObj.panelDom.data('preHeight') || tempObj.panelDom.height());
                spyArray.push(tempObj);

                //反向事件绑定
                that._bindClickScroll(tempObj);
            }

            that._spyArray = spyArray;
            
            return this;
        },
        /**
         * 动态增加侦测对象
         * @method push
         * @param {string | jQuery Object} trigger 要监听的按钮对象
         * @param {string | jQuery Object} panel 要监听的内容对象
         * @chainable
         */
        push : function (trigger, panel) {
            var that = this,
                options = that.options;
            that._expands(trigger, panel);
            return this;
        },
        /**
         * 重新计算各对象的各项属性
         * @method refresh
         * @chainable
         */
        refresh : function () {
            this._expands();
            return this;
        },
        /**
         * 动态设置diffHeight
         * @method setDiffHeight
         * @chainable
         */
        setDiffHeight : function (value) {
            this.options.diffHeight = value;
            return this;
        },
        /*
         * 抽象方法
         * @method
         * @access private
         * @returns {Object} ScrollSpy Object
         */
        _runFunction : function (spyObject) {
            var that = this,
                options = that.options,
                activeCls = options.activeCls;

            that.triggerDomArray.removeClass(activeCls);
            spyObject.triggerDom.addClass(activeCls);

            if (options.spyEvent) {
                options.spyEvent.call(spyObject);
            }
        },
        /*
         * 滚动时要执行的事件
         * @method
         * @access private
         * @returns {Object} ScrollSpy Object
         */
        _scrollEvent : function () {
            var i,
                len,
                spyObject,
                _scrollTop,
                that = this,
                options = that.options,
                node = options.node,
                _spyArray = that._spyArray,
                scrollTop = node.scrollTop(),
                isInFlag = false;

                _scrollTop = scrollTop + options.diffHeight;

            if (!_spyArray) {return;}

            for (i = 0, len = _spyArray.length; i < len; i++) {
                spyObject = _spyArray[i];
                //滚动高度在开始值和结束值之间时
                if (_scrollTop >= spyObject.startPoint - spyObject.selfStartDiffHeight &&
                    _scrollTop < spyObject.endPoint + spyObject.selfEndDiffHeight) {
                    if (options.isAlwaysCall) {
                        that._runFunction(spyObject);
                    }
                    else {
                        if (options._curObject != spyObject) {
                            that._runFunction(spyObject);
                            options._curObject = spyObject;
                        }
                    }

                    isInFlag = true;
                }
            }

            if (!isInFlag) {
                if (options.noSpyEvent &&
                $.isFunction(options.noSpyEvent)) {
                    options._curObject = null;
                    options.noSpyEvent();
                }
            }
            return this;
        },
        /*
         * 绑定节点的滚动事件
         * @method
         * @access private
         * @returns {Object} ScrollSpy Object
         */
        _bindScroll : function () {
            var that = this,
                options = that.options,
                node = options.node,
                t,
                t_cur,
                t_start = +new Date();

            //给目标对象绑定滚动事件
            node.on('scroll.spy_' + that.timeStamp, function () {
                //用于减少函数执行次数，提高性能
                t_cur = +new Date();
                clearTimeout(t);

                if (t_cur - t_start > 120) {
                    that._scrollEvent();
                    t_start = t_cur;
                }
                else {
                    t = setTimeout(function () {
                        that._scrollEvent();
                    }, 100);
                }
            });
            that._scrollEvent();
            return this;
        },
        /*
         * 绑定点击滚动事件(反向)
         * @method
         * @access public
         * @returns {Object} ScrollSpy Object
         */
        _bindClickScroll : function (spyObject) {
            var that = this,
                options = that.options,
                triggerDomArray = that.triggerDomArray,
                triggerType = this.triggerType =  options.triggerType + '.spy_' + that.timeStamp,
                speed = options.speed,
                scrollToPoint,
                func,
                i,
                len;

            if (!options.reverse) {
                return this;
            }

            spyObject.triggerDom.off(triggerType);
            spyObject.triggerDom.on(triggerType, function () {
                var clickEvent = options.clickEvent;

                if (!spyObject.panelDom.length > 0) {
                    Log('没找到对应的内容区');
                    return this;
                }
                $("html, body").stop(true, true).animate({
                    scrollTop: spyObject.startPoint - options.diffHeight - spyObject.selfStartDiffHeight
                }, speed);

                if (clickEvent) {
                    clickEvent.call(spyObject);
                }
            });

            return this;
        },
        /**
         * 销毁组件绑定
         * @method destory
         */
        destory : function () {
            //一个页面有可能存在多个Scrollspy实例，故window可以被重复绑定
            /*var that = this;
            var options = that.options;
            var triggerType = this.triggerType;

            options.node
                .off('scroll.spy_' + that.timeStamp)
                .removeData('widget_scrollspy') 
                .removeData('widget_ScrollSpy');

            that.triggerDomArray
                .off(triggerType); 
            return ;*/
        }
    });
    module.exports = Scrollspy;
})();

},{"../Util/Log":35,"./Widget":24}],20:[function(require,module,exports){
/**
 * 下拉组件<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module UI
 * @class Selector
 */
(function () {
    'use strict';

    var Widget = require('./Widget');
    var Log = require('../Util/Log');
    var Detect = require('../Util/Detect');

    var Selector = Widget('V.Selector', null, {
        options : {
            /**
             * 是否重新加载 
             * @property everyLoad 
             * @type Boolean
             * @default false
             */
            everyLoad : false,
            /**
             * 是否多选 
             * @property multiple
             * @type Boolean
             * @default false
             */
            multiple : false,
            /**
             * 触发事件类型 
             * @property triggerType
             * @type String
             * @default 'click'
             */
            triggerType : 'click',
            /**
             * 自定义类名前缀
             * @property classPre
             * @type String
             * @default 'click'
             */
            classPre : '',
            loaded : false,
            /**
             * 缺省显示值
             * @property defTxt
             * @type String
             * @default ''
             */
            defTxt : '',
            /**
             * 点击控件时触发的事件
             * @property onClickCb
             * @type Function
             * @default ''
             */
            onClickCb : $.noop,
            /**
             * 点击下拉选项时触发的事件
             * @property evtChoose
             * @type Function | String
             * @default ''
             */
            evtChoose : null,
            /**
             * 是否开启自适应宽度
             * @property autoWidth
             * @type Boolean
             * @default false
             */
            autoWidth : true,
            /**
             * 可视个数
             * @property maxVisiNum
             * @type {Number}
             * @default null
             */
            maxVisiNum : null,
            /**
             * 下拉框的宽度
             * @property width
             * @type {Number}
             * @default null
             */
            width : null,
            selectorTpl : '<div id="{$selectorWrapId}" class="ui-form-item-group">\
                                <div class="ui-dropdown">\
                                    <div class="ui-dropdown-hd">\
                                        <a href="javascript:;" role="button" title="{$defTxt}" class="ui-dropdown-current">{$defTxt}</a>\
                                        <i class="vipFont i-arrow-up">&#xe615;</i>\
                                        <i class="vipFont i-arrow-down">&#xe616;</i>\
                                    </div>\
                                    <div class="ui-dropdown-bd"></div>\
                                </div>\
                            </div>',
            itemTpl : '<li class="{$classPre}">\
                            <a href="javascript:;" title="{$text}" data-val="{$val}" role="button">{$text}</a>\
                        </li>'
        },
        /**
         * 初始化
         * @method _init
         * @param {Object} option 自定义配置
         * @private
         * @chainable
         */
        _init: function(option) {
            var that = this,
                hoverTime,
                selectorWrapId,
                options;

            //合并配置选项,并注册到options
            options = this.setOptions(option);

            if (typeof options.clone == 'string') {
                selectorWrapId = this.selectorWrapId = options.clone.replace('#', '');
                options.clone = $(options.clone);
                
                //如果页面不存在容器,则自动创建容器
                if ($(options.clone).length == 0) {
                    var selectorTpl = options.selectorTpl
                                             .replace(/{\$selectorWrapId}/, selectorWrapId)
                                             .replace(/{\$defTxt}/g, options.defTxt);
                    options.selector = $(selectorTpl);
                    options.node.after(options.selector);
                }
                else {
                    options.selector = $(options.clone);
                }
            }
            this._getDom();

            //初始化隐藏
            options.node.hide();

            if (Detect.isIE6) {
                //修复IE6下不能隐藏select的BUG
                setTimeout(function(){
                    options.node.css({'visibility': 'hidden'});
                },0);

                //IE6设置固定高度
                this.selectorOpt.css('height', 346);
            }

             //自动适应宽度
            if (options.autoWidth) {
                that.autoWidth();
            }

            //绑定显示层事件
            that._bindSelectorTxt();
            return this;
        },
        //宽度自适应
        autoWidth : function () {
            var that = this;
            var options = this.options;
            this.render();

            //固定宽度
            var bd = this.selectorOpt;
            var wrap = this.selectorWrap;
            var maxWidth;

            maxWidth = Math.max(wrap.outerWidth(true), bd.outerWidth()) - 2;

            //清除上一次设置的宽度，避免重复
            bd.css({width: ''});
            wrap.css({width: ''});

            bd.css('width', maxWidth);
            wrap.css('width', maxWidth + 2);

            if (Detect.isIE6) {
                that.selectorCurr.css('width', that.selectorTxt.outerWidth() - 32);
            }


            //自适应宽度
            /*this.selectorOpt.show();
            this.selectorOpt.css({
                'visibility' : 'hidden',
                'position' : 'absolute',
                'minHeight' : '999px'
            });
            var opts = this.selectorOpt.find('.' + options.classPre + '_opt');
            opts.css({
                'width' : 'auto'
            });

            //取最大值
            var widthArr = [];
            opts.each(function (i, n) {
                widthArr.push($(n).width());
            });
            var maxWidth = Math.max.apply(null, widthArr) + 4;
            var txtPaddingR = parseInt(this.selectorTxt.css('paddingRight'));
            var paddingR = 20;
            paddingR = txtPaddingR - 4 > paddingR ? txtPaddingR : paddingR;
            paddingR = Detect.browser == 'MSIE' ? 13 : paddingR;

            this.selectorTxt.css('width', maxWidth);
            opts.css({
                'width': maxWidth + 8,
                'paddingRight': paddingR - 8
            });

            this.selectorOpt.css({
                'visibility' : '',
                'position' : '',
                'minHeight' : '',
                'display' : ''
            });*/
        },
        /**
         * 重置
         * @method reset
         * @chainable
         */
        reset: function () {
            var that = this,
                options = that.options;

            that.selectorWrap
            .find('.'+ options.classPre +'_optCur')
            .removeClass(options.classPre +'_optCur');

            that.selectorTxt.html(options.defTxt);
            options.node.val('');
            return this;
        },
        /**
         * DEBUG
         * @method debug
         * @chainable
         */
        debug: function () {
            VIPSHOP.log(this.options);
            return this;
        },
        /**
         * 点击选项时触发的事件
         * @method click
         * @param {Number} * 序号, 值
         * @chainable
         * @demo Selector.html
         * @show true
         */
        click: function () {
            var that = this,
                options = that.options;

            if (arguments.length == 1) {
                options.selector.find('.'+ options.classPre +'_opt:eq('+ arguments[0] +') a').trigger('click');
            }
            else {
                options.selector.find('.'+ options.classPre +'_opt a[data-val='+ arguments[1] + ']').trigger('click');
            }

            return this;
        },
        /**
         * 重新渲染
         * @method render
         * @chainable
         */
        render: function () {
            this._render();
            return this;
        },
        /**
         * 显示下拉
         * @method show
         * @chainable
         */
        show: function() {
            this._show();
            return this;
        },
        /**
         * 隐藏下拉
         * @method hide
         * @chainable
         */
        hide: function() {
            this._hide();
            return this;
        },
        /**
         * 冻结selector控件
         * @method disable
         * @chainable
         */
        disable : function () {
            var that = this,
                options = this.options;
            //添加冻结样式和解除绑定事件
            that.selectorWrap.addClass('z-ui-dropdown-disable');
            that._unbindSelectorTxt();
            return this;
        },
        /**
         * 解冻selector控件
         * @method enable
         * @chainable
         */
        enable : function () {
            var that = this,
                options = this.options;
            //解除冻结样式和绑定事件
            that.selectorWrap.removeClass('z-ui-dropdown-disable');
            that._bindSelectorTxt();
            return this;
        },
        /**
         * 获取下拉组件中的各部件
         */
        _getDom : function () {
            var options = this.options;
            this.selectorWrap = options.selector.find('.ui-dropdown');
            this.selectorTxt = options.selector.find('.ui-dropdown-hd');
            this.selectorOpt = options.selector.find('.ui-dropdown-bd');
            this.selectorCurr = options.selector.find('.ui-dropdown-current');
        },
        /*
         * 绑定点击显示层事件
         */
        _bindSelectorTxt : function () {
            var that = this;
            var options = that.options;

            switch (options.triggerType) {
                case 'click':
                    //给文档绑定事件
                    $(document).on('click.selector_' + that.selectorWrapId, function(e){
                        var target = e.target;
                        var hoverFlag = false;

                        $(target).parents().each(function(i,n){
                            if($(n).attr('id') == that.selectorWrapId){
                                hoverFlag = true;
                            }
                        });

                        if (!hoverFlag) {
                            that.hide();
                        }
                    });

                    that.selectorTxt.on('click', function(e) {
                        if (!that.isShowed) {
                            that.show();
                        }
                        else {
                            that.hide();
                        }
                        options.onClickCb(that.isShowed);
                    });
                    break;
                case 'mouse':
                    that.selectorWrap.on({
                        'mouseenter' : function() {
                            that.show();
                        }, 
                        'mouseleave' : function() {
                            that.hoverTime = setTimeout(function() {
                                that.hide(); 
                            },200);
                        }
                    });
                    break;
            }
            return this;
        },
        /*
         * 解除绑定显示层事件
         * @returns {Object} selector Object
         */
        _unbindSelectorTxt : function () {
            var that = this,
                options = that.options;

            switch (options.triggerType){
            case 'click':
                $(document).on('click.selector_' + that.selectorWrapId);
                that.selectorTxt.off('click');
                break;
            case 'mouse':
                that.selectorTxt.off('mouseenter mouseleave');
                break;
            }
            return this;
        },
        /*
         * 显示下拉
         */
        _show: function() {
            var that = this;
            var options = that.options;

            //把选项层添加到外围容器
            //that.selectorWrap.append(that.selectorOpt);
            if (!that.selectorOpt.is(':visible')) {
                if (!options.loaded) {that._render(options);}
                that.selectorWrap.addClass('z-ui-dropdown-open');
            }

            that.isShowed = true;
            return false;
        },
        /*
         * 隐藏下拉
         */
        _hide: function(e) {
            this.selectorWrap.removeClass('z-ui-dropdown-open');
            this.isShowed = false;
        },
        /*
         * 填充选项内容
         */
        _render: function() {
            var that = this;
            var options = that.options;
            var items = $(options.node).find('option');
            var itemsTxt = '<ul class="ui-dropdown-menu">';

            //使用固定标签
            for (var i = 0, len = items.length; i < len; i++ ) {
                var text = $(items[i]).text();
                var val = $(items[i]).val();
                var cls = options.classPre + '_opt';
                itemsTxt += options.itemTpl.replace(/{\$classPre}/g, cls)
                                          .replace(/{\$val}/g, val)
                                          .replace(/{\$text}/g, text);
            }

            itemsTxt = itemsTxt + '</ul>';

            //把选项添加到选项层
            that.selectorOpt.html(itemsTxt);
            //最大可视个数
            if (options.maxVisiNum) {
                this.selectorOpt.height(options.maxVisiNum * 28 - 8);
            }
            //设置宽度
            if (options.width) {
                this.selectorWrap.width(options.width);
            }

            options.loaded = true;
            
            //绑定点击事件
            that.selectorOpt.find('a').on('click', function(e){
                that._fill($(this), e);
            });
        },
        /*
         * 选中菜单
         * @param {jQuery Object} clickOpt 为点击选中的下拉选项
         */
        _fill: function(clickOpt, e) {
            var that = this;
            var options = that.options;
            var selectorTxt = $.trim(clickOpt.text());

            //选中样式
            that
            .selectorOpt
            .find('.selected')
            .removeClass('selected');

            //父级样式
            options.selector.addClass('z-ui-dropdown-selected');

            //添加样式
            clickOpt.parents('li').addClass('selected');

            //填充内容
            that.selectorCurr
                .html(selectorTxt)
                .attr('title', selectorTxt);

            //数据联动
            options.node.val(clickOpt.data('val'));

            if (!options.multiple) {
                that.hide();
            }

            //选中回调函数
            switch (typeof options.evtChoose) {
                case 'function':
                    options.evtChoose.call(clickOpt, e);
                    break;
                case 'string':
                    eval(options.evtChoose);
                    break;
            }

            return false;
        }
    });
    module.exports = Selector;
})();
},{"../Util/Detect":29,"../Util/Log":35,"./Widget":24}],21:[function(require,module,exports){
/**
 * 轮播组件<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module UI
 * @class Switchable
 */
(function () {
    'use strict';

    var Widget = require('./Widget');
    var Detect = require('../Util/Detect');
    var Swipe = require('../Event/Event');
    var Guid = require('../Util/Guid');

    var Switchable = Widget('V.Switchable', null, {
        options : {
            _triggers : [],
            _panels : [],
            _prev : null,
            _next : null,
            nowOn : '',
            /**
             * 滚动个数
             * @property visiNum 
             * @type Number
             * @default 1
             */
            visiNum : 1,
            /**
             * 可视个数
             * @property viewNum 
             * @type Number
             * @default 1
             */
            viewNum : 1,
            /**
             * 切换效果，可选值有slideX，slideY, slideXLoop, slideYLoop
             * @property effect
             * @type String
             * @default ''
             */
            effect : 'default',
            /**
             * 触发器选中时要添加的类名样式
             * @property activeCls
             * @type String
             * @default 'active'
             */
            activeCls : 'active',
            /**
             * 触发器选中时内容层要添加的类名样式
             * @property activeCls
             * @type String
             * @default 'active'
             */
            activePannelCls : 'active-pannel',
            /**
             * 自动播放
             * @property autoPlay
             * @type Boolean
             * @default false
             */
            autoPlay : false,
            /**
             * 自动播放时间间隔（毫秒）
             * @property interval
             * @type Number
             * @default 1000
             */
            interval : 1000,
            /**
             * 开始步点
             * @property activeIndex
             * @type Number
             * @default 0
             */
            activeIndex : 0,
            /**
             * 触发延迟时间
             * @property delay
             * @type Number
             * @default 500
             */
            delay : 500,
            /**
             * 上一步按钮DOM元素
             * @property pervCls
             * @type String | jQuery Object
             * @default null
             */
            pervCls : null,
            /**
             * 下一步按钮DOM元素
             * @property nextCls
             * @type String | jQuery Object
             * @default null
             */
            nextCls : null,
            /**
             * 触发事件类型
             * @property trigger
             * @type String
             * @default 'click'
             */
            trigger : 'click',
            /**
             * 触发事件类型
             * @property switchEvent
             * @type Function
             * @default $.noop
             */
            switchEvent : $.noop,
            /**
             * 滚动层DOM
             * @property panelCls
             * @type String | jQuery Object
             * @default '.bd'
             */
            panelCls : '.bd',
            /**
             * 触发器DOM
             * @property triggerCls
             * @type String | jQuery Object
             * @default ''
             */
            triggerCls : '',
            /**
             * 每张幻灯片的宽度，如果不配置，则会自动获取子元素宽度
             * @property childWidth
             * @type Number | Function
             * @default null
             */
            setChildWidth : null,
            /**
             * 每张幻灯片的高度，如果不配置，则会自动获取子元素高度
             * @property childHeight
             * @type Number | Function
             * @default null
             */
            setChildHeight : null
        },
        /**
         * 初始化
         * @method _init
         * @param {Object} option 自定义配置
         * @private
         * @chainable
         */
        _init: function(option) {
            var that = this,
                options,
                node,
                jqWindow = $(window);

            that.guid = Guid();

            //合并配置选项,并注册到options
            options = this.setOptions(option);
            node = that.node = $(options.node);
            options.pannelDom = $(options.panelCls);
            options.triggerDom = $(options.triggerCls);
            options.prevDom = $(options.pervCls);
            options.nextDom = $(options.nextCls);
            
            options.windowBindNS = 'resize.switchable_';
            options.windowBindNS += that.guid;
            options.windowBindNS += ' orientationchange.switchable';
            options.windowBindNS += that.guid;

            jqWindow
            .on(options.windowBindNS, function () {
                if (jqWindow.width() != that.windowWidth) {
                    that._runInit();
                }
            });
            that._runInit();

            return this;
        },
        //执行各方法
        _runInit : function () {
            var that = this;
            var jqWindow = $(window);

            that._destory(); 
            that.getChildInfo(); //获取幻灯片宽高和个数
            that.setStyle(); //预设罢样式
            that.setWrapWidth(); //设置滚动层的宽度
            that.bindTriggerEvent(); //绑定按钮事件
            that.bindSwipeEvent(); //绑定移动手势事件
            that.autoPlay(); //自动播放
            that.windowWidth = jqWindow.width();
        },
        /**
         * 自动轮播
         */
        autoPlay : function () {
            var options = this.options;
            //是否自动播放
            if (options.autoPlay) {
                var proxyEvt = $.proxy(this.next, this);
                options._interval && clearInterval(options._interval);
                options._interval = setInterval(proxyEvt, options.interval);
                this.node
                .off('mouseenter.switchable mouseleave.switchable')
                .on({
                    'mouseenter.switchable' : function () {
                        clearInterval(options._interval);
                    },
                    'mouseleave.switchable' : function () {
                        clearInterval(options._interval);
                        options._interval = setInterval(proxyEvt, options.interval);
                    }
                });
            }
        },
        /**
         * 获取幻灯片宽高和个数
         */
        getChildInfo : function () {
            var options = this.options;
            var childWidth = 0;
            var childHeight = 0;
            options.childs = options.pannelDom.children();
            options.firstChild = options.childs.eq(0);
            var childML = options.firstChild.css('marginLeft');
            var childMR = options.firstChild.css('marginRight');
            var childMT = options.firstChild.css('marginTop');
            var childMB = options.firstChild.css('marginBottom');
            var childMLR = parseInt(childML != 'auto' ? childML : 0)
                            + parseInt(childMR != 'auto' ? childMR : 0);
            var childMTB = parseInt(childMT != 'auto' ? childMT : 0)
                            + parseInt(childMB != 'auto' ? childMB : 0);
            
            //宽度
            if ($.isFunction(options.setChildWidth)) {
                childWidth = options.setChildWidth() + childMLR;
            }
            else if ($.isNumeric(options.setChildWidth)){
                childWidth = options.setChildWidth + childMLR;
            }
            else {
                if (options.effect === 'slideX'
                    || options.effect === 'slideXLoop') {
                    childWidth = this.node.width() / options.visiNum;
                }
                else {
                    childWidth = options.firstChild.width();
                }
            }

            //高度
            if ($.isFunction(options.setChildHeight)) {
                childHeight = options.setChildHeight() + childMTB;
            }
            else if ($.isNumeric(options.setChildHeight)){
                childHeight = options.setChildHeight + childMTB;
            }
            else {
                if (options.effect === 'slideY'
                    || options.effect === 'slideYLoop') {
                    childHeight = this.node.height() / options.visiNum;
                }
                else {
                    childHeight = options.firstChild.height();
                }
            }

            if (options.effect !== 'default') {
                options.pannelDom.children().css('width', childWidth);
                options.pannelDom.children().css('height', childHeight);
            }

            options.childWidth = options.firstChild.outerWidth(true);
            options.childHeight = childHeight;
            options.childLen = options.childs.length;
        },
        /**
         * 预设必要样式
         * @chainable
         */
        setStyle : function () {
            var that = this;
            var options = that.options;

            switch(options.effect) {
                case 'slideXLoop':
                case 'slideYLoop':
                case 'slideX':
                case 'slideY':
                    var pannelDomParent = options.pannelDom.parent();
                    //给滚动层的父元素设置相对定位
                    if (pannelDomParent.css('position') != 'relative') {
                        pannelDomParent.css('position', 'relative');
                    }
                    //给滚动层的设置绝对定位
                    if (options.pannelDom.css('position') != 'absolute') {
                        options.pannelDom.css('position', 'absolute');
                    }
                    //给子元素设置左浮动
                    options.pannelDom.children().css('float', 'left');
                    break;
                default:
                    break;
            }
        },
        /**
         * 设置滚动层的宽度
         * @chainable
         */
        setWrapWidth : function () {
            var that = this;
            var options = that.options;
            
            switch(options.effect) {
                case 'slideXLoop':
                case 'slideYLoop':
                    //克隆第一个放到最后面
                    options.childs.slice(0, options.visiNum)
                    .clone()
                    .addClass('loop_clone_next')
                    .appendTo(options.pannelDom);

                    //克隆最后一个放到最前面
                    options.childs.slice(options.childLen - options.visiNum)
                    .clone()
                    .addClass('loop_clone_prev')
                    .prependTo(options.pannelDom);

                    //给滚动设置大宽度
                    if (options.effect == 'slideXLoop') {
                        options.pannelDom.css({
                            position : 'absolute',
                            width : options.childWidth * (options.childLen + options.visiNum * 2),
                            height : options.childHeight,
                            left : -options.childWidth * options.visiNum,
                            top : 0
                        });
                    }
                    else if (options.effect == 'slideYLoop') {
                        options.pannelDom.css({
                            position : 'absolute',
                            width : options.childWidth,
                            height : options.childHeight * (options.childLen + options.visiNum * 2),
                            top : -options.childHeight * options.visiNum,
                            left : 0
                        });
                    }
                    break;
                case 'slideX':
                    options.pannelDom.css({
                        width : options.childWidth * options.childLen,
                        left : 0
                    });
                default:
                    break;
            }

            return this;
        },
        /**
         * 绑定按钮事件
         * @chainable
         */
        bindTriggerEvent : function () {
            var that = this;
            var options = that.options;
            var trigger = options.trigger === 'over' ? 'mouseenter' : options.trigger;
            var t;
            options.nextDom.on('click.switchable', $.proxy(that.next, that));
            options.prevDom.on('click.switchable', $.proxy(that.prev, that));

            //绑定事件
            options.triggerDom.children()
            .on(trigger + '.switchable', function () {
                var index = $(this).index();

                if (trigger === 'mouseenter') {
                    t && clearTimeout(t);
                    t = setTimeout(function () {
                        that._triggerAddName(index);
                        that.switchTo(index);
                    }, options.delay);
                }
                else {
                    that._triggerAddName(index);
                    that.switchTo(index);
                }
            });

            that._triggerAddName(options.nowOn || options.activeIndex);
            that.switchTo(options.nowOn || options.activeIndex, true);

            if (trigger === 'mouseenter') {
                options.triggerDom
                .on('mouseleave' + '.switchable', function () {
                    t && clearTimeout(t);
                });
            }

            that.lazyload(options.firstChild);

            return this;
        },
        /**
         * 选择按钮要添加的样式
         * @param  {Number} index 播放第几张
         */
        _triggerAddName : function (index) {
            this.options.triggerDom.children()
            .eq(index)
            .addClass(this.options.activeCls)
            .siblings()
            .removeClass(this.options.activeCls);
        },
        /**
         * 绑定移动端事件
         */
        bindSwipeEvent : function () {
            if (Detect.mobile) {
                var startX, startY;
                var self = this;
                var options = this.options;
                var pannelDom = options.pannelDom;
                var amount;
                var direction;
                var diffX, diffY;
                var _scrolling;
                
                pannelDom.on('tapstart.switchable', function (e) {
                    if (!self.scrolling) {
                        amount = 0;
                        startX = parseInt($(this).css('left')) || 0;
                        startY = parseInt($(this).css('top')) || 0;
                        _scrolling = false;
                    }
                    else {
                        _scrolling = true;
                    }

                    if (options.autoPlay) {
                        options._interval && clearInterval(options._interval);
                    }
                })
                .on('swipe.switchable', function (e, data) {
                    var noFirstLoop;
                    var noLastLoop;
                    var leftFlag, rightFlag, topFlag, bottomFlag;

                    switch (options.effect) {
                        case 'slideXLoop':
                        case 'slideYLoop':
                            leftFlag = data.direction == 'left';
                            rightFlag = data.direction == 'right';
                            topFlag = data.direction == 'up';
                            bottomFlag = data.direction == 'down';
                            break;
                        case 'slideX':
                        case 'slideY':
                            if (options.nowOn == 0) {
                                noFirstLoop = true;
                            }
                            if (options.nowOn == Math.ceil(options.childLen / options.visiNum) - 1) {
                                noLastLoop = true;
                            }
                            leftFlag = data.direction == 'left' && !noLastLoop;
                            rightFlag = data.direction == 'right' && !noFirstLoop;
                            break;
                    }

                    if (!_scrolling) {
                        //X
                        if (options.effect == 'slideXLoop'
                            || options.effect == 'slideX') {
                            if (leftFlag) {
                                diffX = startX - data.xAmount;
                            }
                            else if (rightFlag) {
                                diffX = startX + data.xAmount;
                            }

                            if (leftFlag || rightFlag) {
                                $(this).css('left', diffX);
                                amount = data.xAmount;
                                direction = data.direction;
                                data.e.preventDefault();
                            }
                        }
                        //Y
                        else if (options.effect == 'slideYLoop'
                            || options.effect == 'slideY') {
                            if (topFlag) {
                                diffY = startY - data.yAmount;
                            }
                            else if (bottomFlag) {
                                diffY = startY + data.yAmount;
                            }
                            if (topFlag || bottomFlag) {
                                $(this).css('top', diffY);
                                amount = data.yAmount;
                                direction = data.direction;
                            }
                        }
                    }
                })
                .on('tapend.switchable', function (e, data) {
                    if (!_scrolling) {
                        if (Math.abs(amount) > 80) {
                            if (direction == 'left'
                                || direction == 'up') {
                                self.next();
                            }
                            else if (direction == 'right'
                                || direction == 'down') {
                                self.prev();
                            }
                        }
                        else {
                            self.switchTo(options.nowOn);
                        }
                    }
                    self.autoPlay();
                });

            }
        },
        /**
         * 直接跳到某一帧
         * @method switchTo
         * @param {Number} i 对象, 序号
         * @chainable
         */
        switchTo: function(i, isAnimate) {
            if (this.scrolling) {return;}
            var that = this;
            var options = that.options;
            var target = i % options.childLen;
            var pageNums = Math.round(options.childLen / options.visiNum);
            var animteTime = isAnimate ? 0 : 300;

            if (i === pageNums) {
                target = 0;
            }

            //执行效果 
            switch(options.effect) {
                case 'slideXLoop':
                case 'slideYLoop':
                    var transitTo;
                    var orienTo;
                    //前进
                    if (i > options.nowOn) {
                        if (options.effect == 'slideXLoop') {
                            transitTo = {'left' : -(i + 1) * options.childWidth * options.visiNum}
                            orienTo = {'left' : -(target + 1) * options.childWidth * options.visiNum}
                        }
                        else {
                            transitTo = {'top' : -(i + 1) * options.childHeight * options.visiNum}
                            orienTo = {'top' : -(target + 1) * options.childHeight * options.visiNum}
                        }

                        that.scrolling = true;
                        options.pannelDom.animate(transitTo, animteTime, function () {
                            $(this).css(orienTo);
                            //给触发按钮加上class
                            that.triggerAddCls(Math.abs(target));
                            options.nowOn = target;
                            that.scrolling = false;
                        });
                    }
                    //后退
                    else if (i < options.nowOn) {
                        var orient = i == -1 ? pageNums : (i + 1);
                        if (options.effect == 'slideXLoop') {
                            transitTo = {'left' : -(i + 1) * options.childWidth * options.visiNum}
                            orienTo = {'left' : -orient * options.childWidth * options.visiNum}
                        }
                        else {
                            transitTo = {'top' : -(i + 1) * options.childHeight * options.visiNum}
                            orienTo = {'top' : -orient * options.childHeight * options.visiNum}
                        }

                        that.scrolling = true;
                        options.pannelDom.animate(transitTo, animteTime, function () {
                            $(this).css(orienTo);
                            //给触发按钮加上class
                            that.triggerAddCls(i);
                            options.nowOn = i == -1 ? pageNums - 1 : i;
                            that.scrolling = false;
                        });
                    }
                    else {
                        that.scrolling = true;
                        if (options.effect == 'slideXLoop') {
                            options.pannelDom.stop(true, false).animate({
                                'left' : -(i + 1) * options.childWidth * options.visiNum
                            }, animteTime, function () {
                                that.scrolling = false;
                            });
                        }
                        else if (options.effect == 'slideYLoop') {
                            options.pannelDom.stop(true, false).animate({
                                'top' : -(i + 1) * options.childHeight * options.visiNum
                            }, animteTime, function () {
                                that.scrolling = false;
                            });
                        }
                    }

                    that.pannelAddCls(target + 1);
                    break;
                case 'slideX':
                case 'slideY':
                    var proxyEvt = $.proxy(that.next, that);
                    var animateOption;
                    options._interval && clearInterval(options._interval);
                    if (i < 0) {return;} //第一页
                    if (i == Math.ceil(options.childLen / options.visiNum)) {return;} //最后一页
                    if (i + options.viewNum > options.childLen) {return;}

                    if (i <= 0) {
                        options.prevDom.addClass('switchable-first');
                    }
                    else {
                        options.prevDom.removeClass('switchable-first');
                    }

                    if (i >= Math.ceil(options.childLen / options.visiNum) - 1) {
                        options.nextDom.addClass('switchable-last');
                    }
                    else {
                        options.nextDom.removeClass('switchable-last');
                    }

                    that.scrolling = true;
                    if (options.effect === 'slideX') {
                        animateOption = {
                            'left' : -i * options.childWidth * options.visiNum
                        }
                    }
                    else {
                        animateOption = {
                            'top' : -i * options.childHeight * options.visiNum
                        }
                    }
                    
                    options.pannelDom.stop(true, false).animate(animateOption,
                     animteTime, function () {
                        that.scrolling = false;
                        that.triggerAddCls(target);
                        options.nowOn = i;
                    });

                    if (options.autoPlay && options.interval) {
                        options._interval = setInterval(proxyEvt, options.interval);
                    }

                    that.pannelAddCls(target);
                    break;
                default:
                    that.triggerAddCls(target);
                    options.nowOn = target;
                    
                    options.pannelDom.children().eq(target).show().siblings().hide();
                    that.pannelAddCls(target);
                    break;
            }

            // ----- switchEvent -----
            var I = i % options.childLen;

            if (I < 0) {
                I = options.childLen - 1;
            }

            // ----- lazyload -----
            var curTrigger = options.triggerDom.children().eq(I);
            var curPannel;

            if (options.effect.indexOf('Loop') > 0) {
                curPannel = options.pannelDom.children().eq(i + 1);
            }
            else {
                curPannel = options.pannelDom.children().eq(I);
            }
            
            that.lazyload(curPannel);
            options.switchEvent(I, curTrigger, curPannel);

            // ----- autoplay 重新计时 -----
            that.autoPlay();

            return this;
        },
        start : function () {
            this.autoPlay();
        },
        stop : function () {
            clearInterval(this.options._interval);
        },
        /**
         * 图片延迟加载
         * @param  {jQuery Object} target 目标窗口
         * @chainable
         */
        lazyload : function (target) {
            $(target).find('img.switchable-lazy, img.lazy').each(function (i, n) {
                var jqN = $(n);
                jqN.attr('src', jqN.data('original'));
                jqN.removeClass('switchable-lazy lazy');
            });

            return this;
        },
        /**
         * 播放上一个
         * @method prev
         * @chainable
         */
        prev: function() {
            var that = this;
            var options = that.options;
            var i = options.nowOn;            

            i--;
            switch (options.effect) {
                case 'slideXLoop':
                case 'slideYLoop':
                case 'slideX':
                case 'slideY':
                    that.switchTo(i);
                    break;
                default:
                    that.switchTo(i);
                    options.nowOn = i;
                    break;
            }

            return this;
        },
        /**
         * 播放下一个
         * @method next
         * @chainable
         * @demo Switchable.html
         * @show true
         */
        next: function() {
            var that = this;
            var options = that.options;
            var i = options.nowOn;

            i++;
            switch (options.effect) {
                case 'slideXLoop':
                case 'slideYLoop':
                case 'slideX':
                case 'slideY':
                    that.switchTo(i);
                    break;
                default:
                    that.switchTo(i);
                    options.nowOn = i;
                    break;
            }

            return this;
        },
        /**
         * 给触发按钮加上class
         * @method triggerAddCls
         * @private
         * @chainable
         */
        triggerAddCls : function (i) {
            var that = this;
            var options = that.options;
            options.triggerDom
                .children()
                .eq(i)
                .addClass(options.activeCls)
                .siblings()
                .removeClass(options.activeCls);
        },
        /**
         * 给触发内容层加上class
         * @method pannelAddCls
         * @private
         * @chainable
         */
        pannelAddCls : function (i) {
            var options = this.options;
            var pannelChilds = options.pannelDom.children();
            
            pannelChilds.removeClass(options.activePannelCls)
                        .eq(i)
                        .addClass(options.activePannelCls);
        },
        /**
         * 销毁事件
         * @return {[type]} [description]
         */
        _destory : function () {
            var options = this.options;
            var trigger = options.trigger === 'over' ? 'mouseenter' : options.trigger;
            options.pannelDom
            .off('tapstart.switchable')
            .off('swipe.switchable')
            .off('tapend.switchable')
            .children('.loop_clone_prev, .loop_clone_next')
            .remove();

            options.nextDom.off('click.switchable');
            options.prevDom.off('click.switchable');
            options.triggerDom.children().off(trigger + '.switchable');

            if (trigger === 'mouseenter') {
                options.triggerDom.off('mouseleave' + '.switchable');
            }

            this.node.off('mouseenter.switchable');
            this.node.off('mouseleave.switchable');
        },
        destory : function () {
            $(window).off(this.options.windowBindNS);
            this._destory();
        }
    });
    module.exports = Switchable;
})();
},{"../Event/Event":8,"../Util/Detect":29,"../Util/Guid":30,"./Widget":24}],22:[function(require,module,exports){
/**
 * 模板引擎<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zakk.ye@vipshop.com><br>
 * @module UI
 * @class Template
 */
(function () {
    'use strict';

    var Widget = require('./Widget');
    var Log = require('../Util/Log');

    var Template = Widget('V.Template', null, {
        options : {
            /**
             * 模板
             * @property template
             * @type String | jQuery Object
             * @default '' 
             */
            template : '',
            /**
             * 是否为把结果直接替换到目标容器<br>
             * 为 true 时则会自动使用 html 方法，
             * 为 false 时则会自动使用 append 方法，
             * 为 null 时则会直接返回结果到变量
             * @property replace
             * @type Boolean
             * @default true
             */
            replace : true,
            tagMark : [],
            arr : []
        },
        /**
         * 初始化
         * @private
         */
        _init : function (option) {
            //合并配置选项,并注册到options
            var options = this.setOptions(option);
            var tplElem = options.templateElement;

            //获取模板内容到option.
            if ($.type(tplElem) == 'object') {
                if (tplElem.length) {
                    options.tpl = tplElem.html();
                }
                else {
                    Log('缺少目标template', options);
                    return false;
                }
            }
            else {
                options.tpl = tplElem;
            }
            
            return this;
        },
        _parser : function(s, n, obj) {
            var i = obj.i;
            var result = obj.result;
            var st = obj.st;
            var pf;

            st[ obj.i++ ] = n;
            if (n.charAt(0) === '/') {
                if ( i && '/' + st[i - 1] === st[i] ) {
                    result[result.length] = 'return "' + s + '";})})(data.' + n.slice(1) +')';
                }
                else {
                    result[result.length] =  '+ "'+ s +'"})})(data.'+ n.slice(1) +')';
                }
            }
            else {
                pf = i && st[i - 1].charAt(0) === '/' ? '+' : 'return ';
                result[result.length] = pf + '"'+ s +'" + (function(data) { return self._objHandle(data,function(data) {' ;
            }
        },
        _toFunction : function(tpl) {
            //暂存对象
            var obj = {
                //模板结构
                st : [],
                //function string暂存
                result : [],
                //结构
                i : 0
            };
            //obj、array字段
            var re_field = /\{#(\/?\w+?)\}/g;
            //变量字段
            var re_var = /\{\$(\w+)}/g;
            //两则空格
            var re_trim = /^\s+|\s+$/g;
            var i = 0;
            var match;
            var result = obj.result;

            tpl = tpl.replace(/[\n\r]/g,'');
            tpl = tpl.replace(/(["'])/g,'\\$1');

            while (match = re_field.exec(tpl)) {
                this._parser(tpl.slice(i, match.index).replace(re_trim, ''), match[1], obj);
                i = match.index + match[0].length;
            }

            if (result.length) {
                result[result.length] = '+ "' + tpl.slice(i) + '"';
                result.unshift('var self = this;');
                result.unshift('var undef = undefined;');
                result = result.join('');
            }
            else {
                result = 'var self = this;var undef = undefined;return ' + '"' + tpl +'";';
            }
            
            return new Function('data', result.replace( re_var ,'" + (data.$1 != undef ? data.$1 : "") + "'));
            
        },
        _objHandle : function(data, callback) {
            var type = {}.toString.call(data);
            var i;
            var len;
            var result = '';
            //低版本IE {}.toString.call( undefined ) 会返回[object Object]
            if ( typeof data === 'undefined' ) return result;
            switch (type) {
                case '[object Array]':
                    i = 0,
                    len = data.length;
                    for (; i < len; i++) {
                        result += callback(data[i]);
                    }
                    break;
                case '[object Object]':
                    result = callback(data);
                    break;
            }
            return result;
        },
        /**
         * 整合数据
         * @method process
         * @param  {Object} data 数据
         * @return {String}      生成的html
         */
        process : function (data) {
            var options = this.options;
            if ( !this.handle ) {
                this.handle = this._toFunction(options.tpl);
                
            }
            var result =  this.handle(data);

            if (options.replace === true) {
                options.node.html(result);
            }
            else if (options.replace === false) {
                options.node.append(result);
            }
            else {
                return result;
            }
        }
    });
    module.exports = Template;
})();
},{"../Util/Log":35,"./Widget":24}],23:[function(require,module,exports){
/**
 * 表单验证<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module UI
 * @class Validation
 */
(function () {

    var Widget = require('./Widget');
    var Validation = Widget('V.Validation', null, {
        options : {
            errStyle : '',
            susStyle : '',
            msgType : 'after'   //inner/after/alert/all(inner+after)
        },
        /**
         * 规则
         * @property rules
         * @type {Object}
         * @example {
         *  required : 必填 <br />
         *  email : e-mail <br />
         *  url : url <br />
         *  phone : 电话号码 <br />
         *  mobile : 手机号码 <br />
         *  chinese : 中文 <br />
         *  english : 英文 <br />
         *  currency :  <br />
         *  birthday : 12位日期 <br />
         *  birthday8 : 8位日期 <br />
         *  qq : qq号码 <br />
         *  number : 数字
         * }
         */
        rules: {
            required : /.+/,
            email : /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
            url : /^((http)|(https)|(ftp)):\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/,
            phone : /^((\(\d{2,3}\))|(\d{3}\-))?(\(0\d{2,3}\)|0\d{2,3}-)?[1-9]\d{6,7}(\-\d{1,4})?$/,
            mobile : /^1\d{10}$/,
            chinese : /^[\u4e00-\u9fa5]+$/,
            english : /^[A-Za-z]+$/,
            currency : /^\d+(\.\d+)?$/,
            birthday : /^((19)|(20))(\d{2})\-((0[1-9])|1[0-2])\-((0[1-9])|([1-2][0-9])|(3[0-1]))$/,
            birthday8 : /^((19)|(20))(\d{2})((0[1-9])|1[0-2])((0[1-9])|([1-2][0-9])|(3[0-1]))$/,
            qq : /^[1-9]\d{4,13}$/,
            number : /^\d+$/
        },
        fields: [],
        /**
         * 初始化
         * @method _init
         * @param {Object} option 自定义配置
         * @chainable
         * @private
         */
        _init: function(option) {
            var that = this,
                target;
            //合并配置选项,并注册到options
            var options = this.setOptions(option);

            //整合指定的form对象
            if (!options.target && !options.node) {
                VIPSHOP.log('缺少目标form');
                return false;
            }
            else {
                target = options.node = options.target ? $(options.target) : options.node;
            }

            target = target[0];
            var elemCount = target.elements.length;

            //每一次初始化都清空表单对象数组
            that.fields = [];
            //遍历表单内对象
            for ( var i = 0; i < elemCount; i++ ) {
                that.addField($(target.elements[i]));
            }
            return that;
        },
        /**
         * 添加验证字段
         * @method addField
         * @param {jQuery Object} elem 增加要验证的控件
         * @chainable
         * @private
         */
        addField: function (elem) {
            var that = this;
            var options = that.options;
            var fields = that.fields;
            var op;

            if (typeof elem == 'string') { elem = $(elem); }

            if (arguments.length == 1) {
                //将标签内的字符串设定转换为object变量
                eval('var op = ' + elem.data('valid'));
            } 
            else {
                op = arguments[1];
            }

            //判断是否设定校验规则
            if (typeof op != 'undefined') {
                fields.push({
                    target : elem,
                    option : op
                });
                elem
                    .data({
                        index : fields.length - 1
                    })
                    .on('blur', function () {
                        var jqLabel = $('label[for='+ $(this).attr('id') +']');
                        if ($(this).val() != '') {
                            jqLabel.hide();
                        } 
                        else {
                            jqLabel.show().animate({opacity: 0.5}, 200);
                        }
                        
                        that.valid($(this).data('index'));
                    })
                    .on('focus', function () { 
                        var jqLabel = $('label[for='+ $(this).attr('id') +']');
                        if ($(this).val() == '') {
                            jqLabel.show().animate({opacity: 0.25}, 200);
                        } 
                        else {
                            jqLabel.hide();
                        }
                    })
                    .on('keypress change', function () {
                        var jqLabel = $('label[for='+ $(this).attr('id') +']');
                        jqLabel.hide();
                    });
            }

            return that;
        },
        /**
         * 单独验证
         * @method valid
         * @param {Number} i 第i个表单元素
         * @return {Boolean}
         * @private
         */
        valid: function (i) {
            var that = this,
                options = that.options,
                field = that.fields[i],
                isErr = false,
                errMsg = '';

            for (x in field.option) {
                var val = field.target.val();

                switch (x) {
                case 'func':
                    isErr = !field.option[x][0].apply( field.target, [val] );
                    if (isErr) {
                        errMsg = field.option[x][1];
                    }
                    break;
                case 'regex':
                    //自定义正则
                    if(!field.option[x][0].test(val)) {
                        isErr = true;
                        errMsg = field.option[x][1];
                    }
                    break;
                case 'equalTo':
                    //重复
                    if (val != $(field.option[x][0]).val()) {
                        isErr = true;
                        errMsg = field.option[x][1];
                    }
                    break;
                case 'length':
                    //长度
                    if (val.length < field.option[x][0] || 
                        val.length > field.option[x][1]) {
                        isErr = true;
                        errMsg = field.option[x][2];
                    }
                    break;
                case 'maxLength':
                    if (val.length > field.option[x][0]) {
                        isErr = true;
                        errMsg = field.option[x][1];
                    }
                    break;
                case 'minLength':
                    if (val.length < field.option[x][0]) {
                        isErr = true;
                        errMsg = field.option[x][1];
                    }
                    break;
                case 'rang':
                    if (val < field.option[x][0] || 
                        val > field.option[x][1]) {
                        isErr = true;
                        errMsg = field.option[x][2];
                    }
                    break;
                case 'group':
                    //分组选中
                    var group = $("input[name='" + field.target.attr('name') + "']:checked");
                    if (group.length < field.option[x][0] || 
                        group.length > field.option[x][1]) {
                        isErr = true;
                        errMsg = field.option[x][2];
                    }
                    break;
                case 'required':
                    if(val == '' || val == '0') {
                        isErr = true;
                        errMsg = field.option[x];
                    }
                    break;
                case 'email':
                case 'url':
                case 'phone':
                case 'mobile':
                case 'english':
                case 'chinese':
                case 'currency':
                case 'birthday':
                case 'birthday8':
                case 'number':
                    if(val != '' && !this.rules[x].test(val)) {
                        isErr = true;
                        errMsg = field.option[x];
                    }
                    break;
                }
            };
            
            //外部回调
            if ( !isErr && field.option['cb'] ) {
                isErr = field.option['cb'].call(that, field.target, field.option);
            };

            //提示处理
            if (isErr) {
                switch (options.msgType) {
                case 'alert':
                    alert(errMsg);
                    break;
                case 'all':
                case 'inner':
                    field.target
                        .addClass(options.errStyle)
                        .removeClass(options.susStyle);

                    if (options.msgType == 'inner') { break; }
                case 'after':
                    var id = field.target.attr('id');
                    var name = field.target.attr('name');
                    id = id || name;

                    if ( $('#' + id + '_tip').length == 0 ) {
                        field.target.after('<span id="' + id + '_tip"></span>');
                    }
                    
                    $('#' + id + '_tip')
                        .addClass(options.errStyle)
                        .removeClass(options.susStyle)
                        .html(errMsg);
                    break;
                }
            }
            else {
                switch (options.msgType) {
                case 'all':
                case 'inner':
                    field.target
                        .removeClass(options.errStyle)
                        .addClass(options.susStyle);

                    if (options.msgType == 'inner') { break; }
                case 'after':
                    var id = field.target.attr('id');
                    var name = field.target.attr('name');
                    id = id || name;

                    if ( $('#' + id + '_tip').length == 0 ) {
                        field.target.after('<span id="' + id + '_tip"></span>');
                    }
                    
                    $('#' + id + '_tip')
                        .removeClass(options.errStyle)
                        .addClass(options.susStyle)
                        .html('');
                    break;
                }
            }

            return isErr;
        },
        /**
         * 校验
         * @method run
         * @return {Boolean}
         */
        run: function () {
            var fields = this.fields;
            var fieldCount = fields.length;
            var err = false;

            for (var i = 0;i < fieldCount;i++) {
                if (this.valid(i) || err) { err = true; }
            }

            return err;
        },
        /**
         * 重置表单
         * @method reset
         */
        reset: function () {
            var that = this,
                options = that.options,
                fields = that.fields,
                fieldCount = fields.length;

            for (var i = 0;i < fieldCount;i++) {
                var field = fields[i];

                switch (options.msgType) {
                case 'all':
                case 'inner':
                    field.target.removeClass(options.errStyle + ' ' + options.susStyle);
                    if (options.msgType == 'inner') { break; }
                case 'after':
                    var id = field.target.attr('id');
                    var name = field.target.attr('name');
                    id = id || name;

                    if ( $('#' + id + '_tip').length != 0 ) {
                        $('#' + id + '_tip')
                            .removeClass(options.errStyle + ' ' + options.susStyle)
                            .html('');
                    }
                    
                    break;
                }
            }
        }
    });
    module.exports = Validation;
})();

},{"./Widget":24}],24:[function(require,module,exports){
/**
 * Widget<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module UI
 * @class Widget
 */
(function () {
    'use strict';

    var namespace = require('../Util/NameSpace')(VIPSHOP);
    var Class = require('../Class/Class');
    var AP = Array.prototype;

    /**
     * 创建Widget
     * @class Widget
     * @Constructor
     * @param {String} name Widget 名称
     * @param {Object | Function} base 基类
     * @param {Object | Function} prop 子类
     */
    var Widget = function (name, base, prop) {
        var widgetName = name.split('.')[1];
        var baseClass = Class(base);
        var widgetClass = baseClass.extend(prop);
        var ret = namespace(name, function (options) {
            return new widgetClass(options);
        });
        bridgeTojQuery(widgetName, widgetClass);
        return ret;
    };

    /**
     * 把组件添加到jQuery的fn上
     * @param  {String} name   用于定义组件的名字
     * @param  {Object | Function} Widget 对应的类
     */
    var bridgeTojQuery = function (name, widget) {
        jQuery.fn[name] = function (options) {
            var args = AP.slice.call(arguments, 1);
            var ret = $(this);

            this.each(function () {
                var jqSelf = $(this);
                //把node添加到配置
                var config = $.extend({}, options, {
                    node : jqSelf
                });
                var dataWidget = 'widget_' + name;
                var _instance = jqSelf.data(dataWidget);

                if (typeof options == 'string' && _instance) {
                    var method = _instance[options];
                    ret = '';

                    if (method) {
                        ret = method.apply(_instance, args);
                        if (ret === _instance
                            || typeof ret === 'undefined') {
                            ret = $(this);
                        }
                    }
                }
                else {
                    //删除原有的同名组件，防止重复绑定
                    if (typeof _instance !== 'undefined') {
                        _instance.destory && _instance.destory();
                        jqSelf.removeData(dataWidget);
                    }
                    var instance = new widget(config);
                    jqSelf.data(dataWidget, instance);
                    ret = $(this);
                }
            });
            return ret;
        };

        jQuery[name] = function (options) {
            var instance = new widget(options);
            return instance;
        };
    };

    module.exports = Widget;
})();


},{"../Class/Class":1,"../Util/NameSpace":37}],25:[function(require,module,exports){
/**
 * 对话框<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Cookie
 */
(function () {
    'use strict';

    var Class = require('../Class/Class');
    var Cookie = Class({
    	options : {
    		path : '/',    // 路径
    		domain: ''    // 域名
    	},
    	/**
    	 * 初始化
    	 * @param  {Object} options 传入初始化Cookie对象
    	 */
    	init : function (options) {
    		this.setOptions(options);
    	},
    	/**
    	 * 设置 Cookie
         * @method set
    	 * @param {String} name   cookie 的键名
    	 * @param {String} value  cookie 的值
    	 * @param {String} domain cookie 的域
    	 * @param {String} path   cookie 的路径
    	 * @param {Number} hour   cookie 的时效(小时)
    	 */
    	set : function(name, value, domain, path, hour) {
    	    if (hour) {
    	        var today = new Date();
    	        var expire = new Date();
    	        expire.setTime(today.getTime() + 3600000 * hour);
    	    }

    	    var cookieArr = [];
    	    var _path = path || this.options.path;
    	    var _domain = domain || this.options.domain;

    	    cookieArr.push(name + '=' + escape(value) + '; ');
    	    cookieArr.push(hour ? ('expires=' + expire.toGMTString() + '; ') : '');
    	    cookieArr.push('path=' + _path + '; ');
    	    cookieArr.push('domain=' + _domain + ';');
    	    document.cookie = cookieArr.join('');
    	    return true;
    	},
    	/**
    	 * 获取 Cookie
         * @method get
    	 * @param  {String} name cookie 的键名
    	 * @return {String}      cookie 的值
    	 */
    	get : function(name) {
    	    var r = new RegExp("(?:^|;+|\\s+)" + name + "=([^;]*)");
    	    var m = document.cookie.match(r);
    	    return unescape(decodeURIComponent(!m ? "" : m[1]));
    	},
    	/**
    	 * 删除Cookie
         * @method del
    	 * @param  {String} name   cookie 的键名
    	 * @param  {String} domain cookie 的域
    	 * @param  {String} path   cookie 的路径
    	 */
    	del : function(name, domain, path) {
    		var cookieArr = [];
    		var _path = path || this.options.path;
    		var _domain = domain || this.options.domain;

    		cookieArr.push(name + '=; ');
    		cookieArr.push('expires=Mon, 26 Jul 1997 05:00:00 GMT; ');
    		cookieArr.push('path=' + _path + '; ');
    	    cookieArr.push('domain=' + _domain + ';');
    		document.cookie = cookieArr.join('');
    	}
    });

    module.exports = Cookie;
})();


},{"../Class/Class":1}],26:[function(require,module,exports){
/**
 * 跨域本地存储<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class CrossStorage
 */
(function () {
    'use strict';

    var Messenger = require('../Lib/Messenger');
    var crossStorage = {
        status : 'unload',
        iframe : 'http://s2.vipstatic.com/html/public/helper/crossStorage.html',
        data : null,
        hasSub : false, //标记是否已订阅过
        cbList : {}, //回调列表，用于子页面加载完成后执行的回调
        cbs : { //回调列表，用于接收子页面的messenger后执行的回调
            set : {},
            get : {}
        },
        id : 0, //递增ID
        /**
         * 加裁iframe资源
         * @param  {Object} cbObj 回调队列
         */
        loadRes : function (cbObj) {
            var self = this;
            if (this.status == 'unload') {
                this.status = 'loading';
                // 加载iframe
                var ifrObj = document.createElement('iframe');
                ifrObj.src = this.iframe;
                ifrObj.setAttribute('width', 0);
                ifrObj.setAttribute('height', 0);
                ifrObj.setAttribute('style', 'display: none');
                
                if (ifrObj.attachEvent) { //fix IE8以下浏览器onload问题
                    ifrObj.attachEvent('onload', function () {
                        self._loadMessenger(ifrObj);
                    });
                }
                else {
                    ifrObj.onload = function () {
                        self._loadMessenger(ifrObj);
                    }
                }

                $('body')[0].appendChild(ifrObj);
            }

            if (this.status != 'loaded') {
                var cbType = cbObj.type;
                this.cbList[cbType] = cbObj.func;
                if (!self.hasSub) {
                    self.hasSub = true;
                    $.Listeners.sub('csHelper')
                    .onsuccess(function (data) {
                        var ifrWindow = data.ifrObj.contentWindow;
                        data.messenger = new Messenger('parent', 'CS');
                        data.messenger.addTarget(ifrWindow, 'csHelper');
                        data.messenger.listen(self.listeners);
                        self.status = 'loaded';
                        self.data = data;
                        for (var i in self.cbList) {
                            self.cbList[i](data);
                        }
                    });
                }
            }
            else {
                cbObj.func(this.data);
            }
        },
        /**
         * 加载 messenger.js
         * @private
         * @param  {DOM} ifrObj iframe对象
         */
        _loadMessenger : function (ifrObj) {
            $.Listeners.pub('csHelper').success({
                ifrObj : ifrObj
            });
        },
        /**
         * 创建一个递增ID
         * @return {Number} 递增的ID
         */
        createId : function () {
            return ++this.id;
        },
        /**
         * 监听子页面messenger消息
         * @param  {String} msg 子页面返回来的数据
         */
        listeners : function (msg) {
            var self = crossStorage;
            var msgObj = $.parseJSON(msg);
            var method = msgObj.method;
            var key = msgObj.key;
            var val = msgObj.val;
            var cbFunc = self.cbs[method][key];
            var id =  msgObj.id;

            cbFunc[id].cb && cbFunc[id].cb(val);
            delete cbFunc[id];
        },
        /**
         * 设置一个storage值
         * @method set
         * @param {String}   key 键名
         * @param {String|Number|Object}   val 值
         * @param {Number}   expires 本地存储有效时间
         * @param {Function} cb      设置完成后执行的回调
         */
        set : function (key, val, expires, cb) {
            var self = this;
            if (!cb) {
                cb = expires;
                expires = undefined;
            }
            var id = this.createId();
            var setObj = {
                method : 'set',
                id : id,
                key : key,
                val : val,
                expires : expires,
                cb : cb
            }
            var setCbs = self.cbs.set;

            if (!setCbs[key]) {
                setCbs[key] = {}
            }
            setCbs[key][id] = setObj;

            this.loadRes({
                type : 'set',
                func : function (data) {
                    var messenger = data.messenger;
                    for (var cbKey in setCbs) {
                        for (var id in setCbs[cbKey]) {
                            var o = setCbs[cbKey][id];
                            if (!o.hasSend) {
                                o.hasSend = true;
                                var s = $.stringifyJSON(o);
                                messenger.targets.csHelper.send(s);
                            }
                        }
                    }
                }
            });
        },
        /**
         * 获取一个storage的值
         * @method get
         * @param  {String}   key storage的键名
         * @param  {Function} cb  获取完毕后执行的回调，参数val为值
         */
        get : function (key, cb) {
            var self = this;
            var id = this.createId();
            var getObj = {
                method : 'get',
                id : id,
                key : key,
                cb : cb
            }
            var getCbs = self.cbs.get;

            if (!getCbs[key]) {
                getCbs[key] = {};
            }
            getCbs[key][id] = getObj;

            this.loadRes({
                type : 'get',
                func : function (data) {
                    var messenger = data.messenger;
                    for (var cbKey in getCbs) {
                        for (var id in getCbs[cbKey]) {
                            var o = getCbs[cbKey][id];
                            if (!o.hasSend) {
                                o.hasSend = true;
                                var s = $.stringifyJSON(o);
                                messenger.targets.csHelper.send(s);
                            }
                        }
                    }
                }
            });
        },
        _queueGet : {},
        /**
         * 并发队列get方法
         * @method qGet
         * @param  {String}   key storage的键名
         * @param  {Function} cb  回调函数，回调函数中会返回val和next，
         *                        执行next会等于执行队列中下一个请求。
         */
        qGet : function (key, cb) {
            var self = this;
            var _queueGet = this._queueGet[key] || [0];
            this._queueGet[key] = _queueGet;
            
            _queueGet.push((function (key, cb) {
                return function () {
                    self.get(key, function (val) {
                        cb(val, function () {
                            if (_queueGet.length === 0) {
                                delete self._queueGet[key];
                            }
                            else {
                                _queueGet.shift()();
                            }
                        });
                    });
                }
            })(key, cb));

            if (_queueGet[0] === 0) {
                _queueGet.shift();
                _queueGet.shift()();
            }
        }
    }

    module.exports = crossStorage;
})();


},{"../Lib/Messenger":9}],27:[function(require,module,exports){
/**
 * 对话框<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class CutString
 */
(function () {
    'use strict';

    /**
     * 字符串截取
     * @method fn_cutString
     * @param {String} str 被截取字符串
     * @param {Number} len 需保留长度
     * @return {String} 截取后的字符串
     **/
    function fn_cutString (str, len) {
        if (!str) { return ''; }

        var strlen = 0;
        var s = "";

        for(var i = 0, j = str.length;i < j;i++) {
            if(str.charCodeAt(i) > 128) {
                strlen += 2;
            }
            else {
                strlen ++;
            }

            s += str.charAt(i);
            if (strlen >= len) {
                return s ;
            }
        }

        return s;
    }

    module.exports = fn_cutString;
})();


},{}],28:[function(require,module,exports){
/**
 * 防反跳<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Debounce
 */
(function () {
    'use strict';

    var _now = Date.now || function() {
        return new Date().getTime();
    };

    /**
     * 返回一个包装后的函数，可以在距上一次执行后wait毫秒后再执行一次,
     * 对于一些频繁行为操作，但不需要立即执行函数有帮助，例如在滚动页面
     * 停止时wait毫秒后再执行函数。
     * @method Debounce
     * @param  {Function} func      要包装的函数
     * @param  {Number} wait      时间间隔（毫秒）
     * @param  {Boolean} [immediate] 如果为true，wait毫秒后执行函数，
     *                               并且在wait时间内不会再次调用
     * @return {Function}           包装后的函数
     */
    function Debounce (func, wait, immediate) {
        var timeout, args, context, timestamp, result;

        var later = function() {
            var last = _now() - timestamp;

            if (last < wait && last >= 0) {
                timeout = setTimeout(later, wait - last);
            }
            else {
                timeout = null;
                if (!immediate) {
                    result = func.apply(context, args);
                    if (!timeout) context = args = null;
                }
            }
        };

        return function() {
            context = this;
            args = arguments;
            timestamp = _now();
            var callNow = immediate && !timeout;
            if (!timeout) timeout = setTimeout(later, wait);
            if (callNow) {
                result = func.apply(context, args);
                context = args = null;
            }

            return result;
        };
    }

    module.exports = Debounce;
})();


},{}],29:[function(require,module,exports){
/**
 * 特征检测<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Detect
 */
(function () {
    'use strict';

    var browser, version, mobile, os, bit, isIE6, placeholder;
    var ua = window.navigator.userAgent;
    var platform = window.navigator.platform;
    var elem = document.body || document.documentElement;
    var webpCache = {};
    var mobile = false;

    // 判断是否为 IE 浏览器
    if (/MSIE/.test(ua)) {
        browser = 'MSIE';
        //判断是否为移动端IE
        if (/IEMobile/.test(ua)) {
            mobile = true;
        }
        version = /MSIE \d+[.]\d+/.exec(ua)[0].split(' ')[1];

        
    }
    //IE11判断
    else if (navigator.userAgent.match(/Trident.*rv[ :]*11\./)) {
        browser = 'MSIE';
        version = 11;
    }
    // 判断是否为 Chrome 浏览器
    else if (/Chrome/.test(ua)) {
        // Platform override for Chromebooks
        if (/CrOS/.test(ua)) {
            platform = 'CrOS';
        }
        browser = 'Chrome';
        version = /Chrome\/[\d\.]+/.exec(ua)[0].split('/')[1];
        
    }
    // 判断是否为 Opera 浏览器
    else if (/Opera/.test(ua)) {
        browser = 'Opera';
        if (/mini/.test(ua) || /Mobile/.test(ua)) {
            mobile = true;
        }
    }
    // 判断是否为 Android 设备
    else if (/Android/.test(ua)) {
        browser = 'Android Webkit Browser';
        mobile = true;
        os = /Android\s[\.\d]+/.exec(ua)[0];
    }
    // 判断是否为 Firefox 浏览器
    else if (/Firefox/.test(ua)) {
        browser = 'Firefox';
        if (/Fennec/.test(ua)) {
            mobile = true;
        }
        version = /Firefox\/[\.\d]+/.exec(ua)[0].split('/')[1];
    }
    // 判断是否为 Safari 浏览器
    else if (/Safari/.test(ua)) {
        browser = 'Safari';
        if ((/iPhone/.test(ua)) 
            || (/iPad/.test(ua)) 
            || (/iPod/.test(ua))) {
            os = 'iOS';
            mobile = true;
        }
    }

    // 未知设备
    if (!version) {
        version = /Version\/[\.\d]+/.exec(ua);
        if (version) {
            version = version[0].split('/')[1];
        }
        else {
            version = undefined;
        }
    }
    
    if (platform === 'MacIntel' 
        || platform === 'MacPPC') {
        os = 'Mac OS X';
    }
    else if (platform === 'CrOS') {
        os = 'ChromeOS';
    }
    else if (platform === 'Win32'
        || platform == 'Win64') {
        os = 'Windows';
        bit = platform.replace(/[^0-9]+/,'');
    }
    else if (!os && /Android/.test(ua)) {
        os = 'Android';
    }
    else if (!os && /Linux/.test(platform)) {
        os = 'Linux';
    }
    else if (!os && /Windows/.test(ua)) {
        os = 'Windows';
    }

    // 特征检测判断是否是移动端
    if (!mobile
        && 'createTouch' in document) {
        mobile = true;
    }

    // 判断是否为IE6
    isIE6 = browser == 'MSIE' && version == '6.0';
    
    function supportWebP() {
        var elem = document.createElement('canvas');

        if (!!(elem.getContext && elem.getContext('2d'))) {
            return elem.toDataURL('image/webp').indexOf('data:image/webp') == 0;
        }
        else {
            return false;
        }
    }

    placeholder = 'placeholder' in document.createElement("input");

    //检测浏览器是否支持 transition
    var elemStyle = elem.style;
    var transitionProperties = ['webkitTransition',
                                'mozTransition',
                                'oTransition',
                                'msTransition',
                                'transition'];
    var browserPreList = ['-webkit-', '-moz-', '-o-', '-ms-', ''];
    var transition = false;
    var transitionEnd = '';
    var browserPre = '';

    for (var i = 0; i < transitionProperties.length; i++) {
        if (transitionProperties[i] in elemStyle) {
            transition = true;
            transitionEnd = transitionProperties[i] + (i != 4 ? 'End' : 'end');
            browserPre = browserPreList[i];
            break;
        }
    }


    var Detect = {
        /**
         * 获取ua
         * @property ua 
         * @type String 
         */
        ua : ua,
        /**
         * 获取浏览器类型
         * @property browser 
         * @type String
         * @example 会返回MSIE, Chrome, Opera, Firefox等
         */
        browser : browser,
        /**
         * 获取浏览器版本号
         * @property version 
         * @type String
         */
        version : version,
        /**
         * 判断是否为移动端
         * @property mobile
         * @type Boolean
         */
        mobile : mobile,
        /**
         * 获取用户操作系统
         * @property os
         * @type String
         */
        os : os,
        /**
         * 获取用户操作系统位数类型
         * @property osbit
         * @type String
         */
        osbit: bit,
        /**
         * 检测浏览是否支持webp格式的图片，
         * @method webp
         * @returns {Boolean} true为支持webp图片，反之亦然
         */
        webp : supportWebP,
        /**
         * 判断浏览器是否为IE6
         * @property isIE6
         * @type Boolean
         */
        isIE6 : isIE6,
        /**
         * 判断浏览器是否支持placeholder
         * @property placeholder
         * @type Boolean
         */
        placeholder : placeholder,
        /**
         * 判断浏览器是否支持 transition
         * @property transition
         * @type {Boolean}
         */
        transition : transition,
        /**
         * 浏览器支持的transition结束属性
         * @property transitionEnd
         * @type {Boolean}
         */
        transitionEnd : transitionEnd,
        /**
         * 浏览器的CSS3前缀
         * @property browserPre
         * @type {Boolean}
         */
        browserPre : browserPre
    }

    /* ------------------------------------------------------
     * @desc 兼容jQuery1.9.1的浏览器类型判断
     * ------------------------------------------------------
     */
    if (window.jQuery && !jQuery.browser) {
        var uaMatch = function(ua) {
                var ua = ua.toLowerCase();

                var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
                    /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
                    /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
                    /(msie) ([\w.]+)/.exec( ua ) ||
                    ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
                    [];

                return {
                    browser: match[ 1 ] || "",
                    version: match[ 2 ] || "0"
                };
            },
            matched = uaMatch( navigator.userAgent ),
            browser = {};

        if (matched.browser) {
            browser[ matched.browser ] = true;
            browser.version = matched.version;
        }

        // Chrome is Webkit, but Webkit is also Safari.
        if (browser.chrome) {
            browser.webkit = true;
        }
        else if (browser.webkit) {
            browser.safari = true;
        }

        jQuery.browser = browser;
    }

    module.exports = Detect;
})();


},{}],30:[function(require,module,exports){
/**
 * 生成GUID<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Guid
 */
(function () {
    'use strict';

    /**
     * 生成GUID
     * @method Guid
     * @param  {Number} len   长度
     * @param  {Number} radix 基数
     * @return {String}       生成的uuid串
     */
    //thx: http://www.cnblogs.com/snandy/p/3261754.html
    function uuid(len, radix) {
        var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
        var uuid = [], i;
        radix = radix || chars.length;
     
        if (len) {
            // Compact form
            for (i = 0; i < len; i++) {
                uuid[i] = chars[0 | Math.random()*radix];
            }
        }
        else {
            // rfc4122, version 4 form
            var r;

            // rfc4122 requires these characters
            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
            uuid[14] = '4';

            // Fill in random data.  At i==19 set the high bits of clock sequence as
            // per rfc4122, sec. 4.1.5
            for (i = 0; i < 36; i++) {
                if (!uuid[i]) {
                    r = 0 | Math.random() * 16;
                    uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
                }
            }
        }
     
        return uuid.join('');
    }

    module.exports = uuid;
})();


},{}],31:[function(require,module,exports){
/**
 * 操作url的hash方法集 <br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Hash
 */
(function () {
    'use strict';

    //存储hash的对象
    var hashTable = {};
    /**
     * 获取hash，并写到hashTable对象
     * 检测hash是否带有buynum，如果有则自动加入购物车
     * http://www.test.com/index.html#buynum=2 -> ajaxAdd(2)
     * 因此FF会对url进行encodeURI，故不使用location.hash
     */
    function _getHash () {
        var href = decodeURIComponent(location.href);
        var match = href.match(/#(.*)$/);
        if (!match) {
            hashTable = {};
            return;
        }
        var splits = match[1].split('&');
        var s;
        while(splits.length > 0) {
            s = splits.shift().split('=');
            hashTable[s[0]] = s[1];
        }
    }
    /**
     * 合并hashTable为字符串，并且添加到url上
     */
    function _joinHash () {
        var hashStr = [];
        for (var i in hashTable) {
            var s= i + '=' + hashTable[i];
            hashStr.push(s);
        }
        window.location.hash = hashStr.join('&');
    }
    /**
     * 增加一个hash
     * @method addHash
     * @param {type} hashName  [要增加的key]
     * @param {type} hashValue [要增加的值]
     * @return {Object}        [hash]
     */
    function addHash (hashName, hashValue) {
        _getHash();
        hashTable[hashName] = hashValue;
        _joinHash();
        return this;
    }
    /**
     * 获取hash值
     * @method getHash
     * @param  {String} hashName [要获取hash值对应的key]
     * @return {String}          [返回对应key的值]
     */
    function getHash (hashName) {
        _getHash();
        return hashTable[hashName];
    }
    /**
     * 删除hash值
     * @method removeHash
     * @param  {String} hashName [要删除的hash的key]
     * @return {Object}          [hash]
     */
    function removeHash (hashName) {
        if (hashTable[hashName]) {
            delete hashTable[hashName];
            _joinHash();
        }
        return this;
    }

    //返回方法集
    module.exports = {
        add : addHash,
        get : getHash,
        remove : removeHash,
        /**
         * 读取hash表
         * @property getTable
         * @type {Object}
         */
        getTable : hashTable
    };
})();


},{}],32:[function(require,module,exports){
/**
 * 判断一个对象的目标属性是否存在<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class isset
 */
(function () {
    'use strict';

    /**
     * 判断一个对象的目标属性是否存在
     * @method isset
     * @param  {Object} obj      目标对象
     * @param  {String} propName 属性名
     * @param  {String | Boolean | Number} expect 期望值
     * @return {Boolean}         符合期望值返回true，反则返回false
     */
    function isset (obj, propName, expect) {
        if (!obj) return false;
        var pairs = propName.split('.');
        var i = 0;
        var len = pairs.length;

        for (; i < len; i++) {
            var key = pairs[i];
            if (typeof obj[key] === 'undefined') {
                return false;
            }
        }
    }

    module.exports = isset;
})();


},{}],33:[function(require,module,exports){
/**
 * 事件监听<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Listeners
 */
(function () {
    'use strict';

    /*
     * 主题类
     * @type {Class}
     * @param {String} 归属的主题名
     * @param {Object} 主题对象集合
     * @return {Object} Subject Object
     */
    function Subject (subName, subNameSpace, data) {
        this.subName = subName;
        this.subNameSpace = subNameSpace;

        this.allowSuccessFlag = true;
        this.allowErrorFlag = true;

        this.hasSuccess =  subNameSpace[subName]['hasSuccess'] || false;
        this.hasError = subNameSpace[subName]['hasError'] || false;
        this.callbacks = {
            'onsuccess' : new Callbacks(),
            'onerrors' : new Callbacks()
        };

        this.data = data || {};
    }

    Subject.prototype = {
        /*
         * 成功时执行的事件
         * @method
         * @access public
         * @param {Function} 订阅成功时执行的事件
         * @return {Object} Subject Object
         */
        onsuccess : function(callbackFunc) {
            this._when('onsuccess', callbackFunc);
            return this;
        },
        /*
         * 错误时执行的事件
         * @method
         * @access public
         * @param {Function} 订阅错误时执行的事件
         * @return {Object} Subject Object
         */
        onerror : function(callbackFunc) {
            this._when('onerrors', callbackFunc);
            return this;
        },
        ononce : function (callbackFunc) {
            this._when('ononce', callbackFunc);
            return this;
        },
        /*
         * 触发事件
         * @method
         * @access public
         * @param {String} 要触发的事件类型
         */
        trigger : function (type, data) {
            var callbacks = this.callbacks,
                that = this,
                status;

            switch(type) {
            case 'onsuccess':
                status = 'hasSuccess';
                break;
            case 'onerrors':
                status = 'hasError';
                break;
            default:
                break;
            }

            that[status] = true;
            if (that[status] && this.allowSuccessFlag) {
                callbacks[type].fire(data);
            }
        },
        /*
         * 取消触发事件
         * @method
         * @access public
         * @param {String} 要触发的事件类型('success'或'error')
         */
        unsub : function (type) {
            switch (type) {
            case 'success':
                this.allowSuccessFlag = false;
                break;
            case 'error':
                this.allowErrorFlag = false;
                break;
            default:
                this.allowSuccessFlag = false;
                this.allowErrorFlag = false;
            }
        },
        /*
         * 取消触发事件
         * @method
         * @access private
         * @param {String} 要触发的事件类型('onsuccess'或'onerrors'或'ononce')
         * @param {Function} 要触发的事件
         */
        _when : function (type, callbackFunc) {
            var callbacks = this.callbacks,
                status,
                allow,
                that = this;

            switch (type) {
            case 'onsuccess':
                callbacks['onsuccess'].add(callbackFunc);
                status = 'hasSuccess';
                allow = 'allowSuccessFlag';
                break;
            case 'onerrors':
                callbacks['onerrors'].add(callbackFunc);
                status = 'hasError';
                allow = 'allowErrorFlag';
                break;
            case 'ononce':
                var i = 0;
                var subNameList = that.subNameSpace[that.subName].subNameList;
                var len = callbacks['onsuccess'].list.length;
                var funcStr = callbackFunc.toString();
                var lsFuncStr = '';
                var isSame = false;
                
                for (var k in subNameList) {
                    var lsFunc = subNameList[k].callbacks.onsuccess.list[0];
                    var lsFuncStr = lsFunc ? lsFunc.toString() : '';
                    if (funcStr == lsFuncStr) {
                        isSame = true;
                    }
                }

                if (!isSame) {
                    that._when('onsuccess', callbackFunc);
                }
                else {
                    status = 'hasSuccess';
                    allow = 'allowSuccessFlag';
                    type = 'onsuccess';
                }

                break;
            default:
                break;
            }

            //检测订阅之前，是否有执行过
            var deps = that.subName.split(',');
            var doneCount = 0;
            var extData = {};
            for (var i = 0, len = deps.length; i < len; i++) {
                if (that.subNameSpace[deps[i]] && that.subNameSpace[deps[i]][status] == true) {
                    extData = $.extend(extData, that.subNameSpace[deps[i]]['data'][type]);
                    doneCount++;
                }
            }

            //如果已经主题发布，则立即执行
            if (doneCount == len && that[allow]) {
                callbackFunc(extData);
            }
        }
    };

    /*
     * 事件类(可惜jQuery里的$.callbacks没list返回, 在此实现简易callbacks)
     * @method
     * @access public
     */
    function Callbacks() {
        this.list = [];
    }

    Callbacks.prototype = {
        /*
         * 添加事件到队列
         * @method
         * @access public
         * @param {Function} 要触发的事件
         */
        add : function(func) {
            var list = this.list;
            var type = $.isFunction(func);
            for (var i = 0, len = list.length + 1; i < len; i++) {
                if (type && func != list[i]) {
                    list.push(func);
                }
            }
        },
        /*
         * 执行事件
         * @method
         * @access public
         */
        fire : function() {
            var list = this.list;
            var args = arguments;
            for (var i = 0, len = list.length; i < len; i++) {
                list[i].apply(null, args);
            }
        }
    }

    /**
     * 订阅与发布事件组件
     */
    var Listeners = {
        /**
         * 组件版本号
         */
        version : '1.0.1.20130109',
        /**
         * 主题集合的命名空间
         * @type {Object}
         * @default {}
         */
        subNameSpace : {},
        hasPubList : [],
        subNameList : [],

        /**
         * 订阅主题
         * @method sub
         * @param {String} subName 主题名
         * @return {Object} Subject Object
         * @example
             //onsuccess(callbackFunc)  成功时执行的事件  参数:{Function} 订阅成功时执行的事件
             //ononce(callbackFunc) 成功时执行的事件   参数:{Function} 订阅成功时执行的事件，同一个回调函数只会绑定一次，可以避免重复监听。
             //onerror(callbackFunc) 错误时执行的事件  参数:{Function} 订阅错误时执行的事件。
             //trigger(type) 触发事件  参数: {String} 要触发的事件类型。
             //unsub(type) 要触发的事件类型  参数:{String} ('success'或'error')。
             //订阅mySub主题，订阅成功时将会打印'success'
             
             $.Listeners.pub('mySub').success({data : 1});
             var key1 = $.Listeners.sub('mySub').onsuccess(function () {
                 VIPSHOP.log('success');
             });
              
             //订阅多个主题, 当mySub1和mySub2主题都订阅成功时，才会打印'success'
             $.Listeners.pub('mySub1').success({data1 : 1111});
             var key2 = $.Listeners.sub('mySub1', 'mySub2').onsuccess(function(){
                   VIPSHOP.log('success');
             });
             $.Listeners.pub('mySub2').success({data2 : 2222});
         */
        sub : function (subName) {
            if (typeof subName != 'string') { return ; }

            var subNameSpace = this.subNameSpace,
                 _t = Math.floor(Math.random() * new Date().getTime() + 1),
                 args = Array.prototype.slice.call(arguments),
                 subjectObj;

            subName = args.join(',');
            if (!subNameSpace[subName]) {
                subNameSpace[subName] = {
                    subNameList : {}
                };
            }

            subjectObj = new Subject(subName, subNameSpace, subNameSpace[subName].data);
            subjectObj['_t'] = _t;
            subNameSpace[subName]['subNameList']['subjectObj_' + _t] = subjectObj;

            return subjectObj;
        },
        /*
         * 兼容处理
         * @method
         * @access private
         * @param {String} subName 主题名
         * @param {String} type 事件类型('onsuccess'或'onerros')
         */
        _facade : function(subName, type, data) {
            var subNameSpace = this.subNameSpace,
                hasState;

            switch (type) {
            case 'onsuccess':
                hasState = 'hasSuccess';
                break;
            case 'onerrors':
                hasState = 'hasError';
                break;
            default:
                break;
            }

            !subNameSpace[subName]['data'] && (subNameSpace[subName]['data'] = {});
            subNameSpace[subName]['data'][type] = $.extend({}, subNameSpace[subName]['data'][type], data);

            //标记已发布状态
            subNameSpace[subName][hasState] = true;

            //加入已发布队列
            if ($.inArray(subName, this.hasPubList) == -1) {
                this.hasPubList.push(subName);
            }

            //[subName]['subNameList']
            for (var i in subNameSpace) {
                var count;
                var arr = i.split(',');
                var len = count = arr.length;
                var extData = {};

                if ($.inArray(subName, arr) != -1) {
                    for (var j = 0; j < len; j++) {
                        if ($.inArray(arr[j], this.hasPubList) != -1) {
                            extData = $.extend(extData, subNameSpace[arr[j]]['data'][type]);
                            count--;
                        }
                    }
                    
                    if (count == 0) {
                        for (var k in subNameSpace[i]['subNameList']) {
                            subNameSpace[i]['subNameList'][k].trigger(type, extData);       
                        }
                    }
                }
            }
        },
        /**
         * 发布事件
         * @method pub
         * @param {String} subName 主题名
         * @return {Object} 返回状态的操作方法集
         * @example
            //success()  发布对应主题的成功方法。
            //error()  发布对应主题的错误方法。
            //发布mySub主题
            $.Listeners.pub('mySub').success();
            //发布时传值
            $.Listeners.pub('mySub').success({test1 : 123});
            $.Listeners.pub('mySub').success({test1: 456});
            $.Listeners.pub('mySub').success({test2 : 789});
            //订阅时取值
            $.Listeners.sub('mySub').onsuccess(function(data){
                VIPSHOP.log(data);    // {test1 : 456, test2 : 789}
            });
         */
        pub : function (subName)  {
            var subNameSpace = this.subNameSpace,
                callbackType,
                args = Array.prototype.slice.call(arguments),
                that = this;

            for (var i = 0, len = args.length; i < len; i++) {
                subName = args[i];
                if (!subNameSpace[subName]) {
                    //若主题不存在，则创建;
                    subNameSpace[subName] = {
                        subNameList : {}
                    };
                }
            }

            return {
                success : function (data) {
                    for (var i = 0, len = args.length; i < len; i++) {
                        that._facade(args[i], 'onsuccess', data);
                    }
                    return this;
                },
                error : function (data) {
                    for (var i = 0, len = args.length; i < len; i++) {
                        that._facade(args[i], 'onerrors', data);    
                    }
                    return this;
                }
            };
        },
        /**
         * 重置主题
         * @method reset
         * @param {String} subName 主题名
         * @return {Object} 返回状态的操作方法集
         */
        reset : function (subName) {
            var hasPubList = this.hasPubList;
            var subNameSpace = this.subNameSpace;
            var index = $.inArray(subName, hasPubList);

            //删除已经发布列表中的对应主题名，并且删除
            if (index != -1) {
                hasPubList.splice(index, 1);
                delete subNameSpace[subName];

                for (var i in subNameSpace) {
                    var tempArr = i.split(',');
                    if ($.inArray(subName, tempArr) != -1) {
                        delete subNameSpace[i]['data'];
                    }
                }
            }
            return this;
        },
        /**
         * 取消发布事件
         * @method unsub
         * @param {String} subName 主题名
         * @return {Object} 返回状态的操作方法集
         * @example
            //success(key)  取消发布指定主题的成功事件  参数{subjectObject} 主题对象的引用。
            //error(key)  取消发布指定主题的错误事件  参数{subjectObject} 主题对象的引用。
            //all() 取消发布指定主题的所有事件。

            //先订阅一个主题
            var unsubKey1 = $.Listeners.sub('mySub').onsuccess($.noop);
            //取消发布一个主题<br>
            $.Listeners.unsub('mySub').success(unsubKey1);
         */
        unsub : function (subName) {
            var subNameSpace = this.subNameSpace,
                facade;

            if (subNameSpace[subName]) {
                facade = function (type, key) {
                    if (key) {
                        var _t = key._t;
                        var subjectObj = subNameSpace[subName]['subNameList']['subjectObj_' + _t];
                        subjectObj.unsub(type);
                    }
                    else {
                        for (var i in subNameSpace[subName]['subNameList']) {
                            subNameSpace[subName]['subNameList'][i].unsub(type);
                        }
                    }
                }

                return {
                    success : function (key) {
                        facade('success', key);
                        return this;
                    },
                    error : function (key) {
                        facade('error', key);
                        return this;
                    },
                    all : function () {
                        facade();
                        return this;
                    }
                };
            }
            else {
                var rtnNoop = function () {
                    return this;
                }
                return {
                    success : rtnNoop,
                    error : rtnNoop,
                    all : rtnNoop
                }
            }
        }
    };

    module.exports = Listeners;
})();


},{}],34:[function(require,module,exports){
/**
 * 模块加载器<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Loader
 */
(function () {
    'use strict';

     /**
     * Loader组件<br />
     * <br />
     * 基于jQuery的loader组件，主要实现：<br />
     *  1、以包的方式批量、异步、并行加载css+html+json+js<br />
     *  2、批量加载css<br />
     *  3、批量加载js<br />
     *  4、存在相互依赖关系的队列式js加载<br />
     */
    var Loader = {
        /**
         * 以key > value方式保存等待加载的队列
         * @property _queue
         * @type {Array}
         * @default []
         * @private
         */
        _queue : [],
        /**
         * 以key > value方式保存模块结构定义
         * @property _modules
         * @type {Array}
         * @default []
         * @private
         */
        _modules : [],
        /**
         * 以key > value方式保存已加载模块
         * @property _modules
         * @type {Array}
         * @default []
         * @private
         */
        _loaded : [],
        /**
         * CSP专用属性
         * @type {String}
         */
        nonce : '',
        /**
         * 以pagelet的方式批量加载资源<br />
         * pagelet化的加载css及js，并在js内对html进行模版式渲染，最终填充内容到pid<br />
         *  加载顺序为css>json>html>js<br />
         *  json数据会存放在pid的data方法里<br />
         *  pid为空则默认为$('body')<br />
         * @method pagelet
         * @param {Object} pars
         * @chainable
         * @example
               Loader.pagelet({
                   name : 'jquery',        //string
                   html : '',              //url
                   css : [],               //array or string
                   js : [],                //array or function
                   json : [],              //array or object
                   jsonp : [],             //array or object
                   pid : ''                //string or jquery dom
               });
         */
        pagelet : function (pars) {
            var loadQueue = [];

            //获得目标容器
            if (typeof pars.pid != 'undefined' && pars.pid != '') {
                pars.pid = $(pars.pid);
            }
            else {
                pars.pid = $('body');
            }

            //批量加载css文件
            if (typeof pars.css != 'undefined' && pars.css.length) {
                this.style(pars.css);
            }

            //json
            if (pars.json) {
                if (!$.isArray(pars.json)) {
                    pars.json = [pars.json];
                }

                for (var i = 0, len = pars.json.length; i < len; i++) {
                    loadQueue.push($.getJSON(pars.json[i]));
                }
            }
            
            //jsonp
            if (pars.jsonp) {
                if (!$.isArray(pars.jsonp)) {
                    pars.jsonp = [pars.jsonp];
                }

                for (var i = 0, len = pars.jsonp.length; i < len; i++) {
                    var rtnDtd = this.jsonp(pars.jsonp[i]);
                    loadQueue.push(rtnDtd);
                }
            }

            //加载html
            if (pars.html) {
                if (!$.isArray(pars.html)) {
                    pars.html = [pars.html];
                }

                for (var i = 0, len = pars.html.length; i < len; i++) {
                    var rtnDtd = this.loadHtml(pars.html[i]);
                    loadQueue.push(rtnDtd);
                }
            }
            
            //执行队列
            var q = $.when.apply(null, loadQueue);
            q.then(function () {
                var dataList = Array.prototype.slice.call(arguments);
                pars.callback && pars.callback.apply(null, dataList);

                if (typeof pars.js == 'function') {
                    pars.js();
                }
                else {
                    $.Loader.script(pars.js);
                }
            });

            return this;
        },

        /**
         * 加载css文件<br />
         * 支持单个或批量加载，支持链式调用
         * @method style
         * @param {Array|String} herf
         * @chainable
         * @example
         * <code>
         * Loader.style('');
         * Loader.style(['', '']);
         * </code>
         */
        style : function (herf) {
            if (typeof herf === 'string') {
                var styleTag = document.createElement('link');
                //herf = herf.indexOf('?') > 0 ? herf + '&t=' : herf + '?&t=';
                //herf+= (new Date()).getTime();
                styleTag.setAttribute('rel', 'stylesheet');
                styleTag.setAttribute('href', herf);
                $('head')[0].appendChild(styleTag);
            }
            else if (herf.length > 0) {
                for (var i = 0, j = herf.length;i < j;i++) {
                    this.style(herf[i]);
                }
            }

            return this;
        },
        /**
         * 加载CSS文件（带回调）
         * @param  {String}   cssurl   CSS文件路径
         * @param  {Function} callback CSS文件加载完毕之后要执行的回调
         */
        css : function (cssurl, callback) {
            var node = document.createElement("link");
            node.setAttribute("rel","stylesheet");
            node.setAttribute("type","text/css");
            node.setAttribute("href", $.trim(cssurl));
            document.body.appendChild(node);
            this._styleOnload(node, function(){
                callback && callback();
            });
        },
        _styleOnload : function (node, callback) {
            var self = this;
            // for IE6-9 and Opera
            if (node.attachEvent) {
                node.attachEvent('onload', callback);
            // NOTICE:
            // 1. "onload" will be fired in IE6-9 when the file is 404, but in
            // this situation, Opera does nothing, so fallback to timeout.
            // 2. "onerror" doesn't fire in any browsers!
            }
            // polling for Firefox, Chrome, Safari
            else {
                setTimeout(function() {
                    self._poll(node, callback);
                }, 0); // for cache
            }
        },
        _poll : function (node, callback) {
            var self = this;
            if (callback.isCalled) {
                return;
            }

            var isLoaded = false;

            if (/webkit/i.test(navigator.userAgent)) {//webkit
                if (node['sheet']) {
                    isLoaded = true;
                }
            }
            // for Firefox
            else if (node['sheet']) {
                try {
                    if (node['sheet'].cssRules) {
                        isLoaded = true;
                    }
                } catch (ex) {
                    // NS_ERROR_DOM_SECURITY_ERR
                    if (ex.code === 1000) {
                        isLoaded = true;
                    }
                }
            }

            if (isLoaded) {
                // give time to render.
                setTimeout(function() {
                    callback();
                }, 1);
            }
            else {
                setTimeout(function() {
                    self._poll(node, callback);
                }, 1);
            }
        },
        /**
         * 加载js文件<br />
         * 支持单个或批量加载，支持链式调用<br />
         * 这个是基础方法，不考虑依赖关系
         * @method script
         * @param {Array|String} src
         * @chainable
         * @example
         * <code>
         * Loader.script('');
         * Loader.script(['', '']);
         * </code>
         */
        script : function (src) {
            if (typeof src === 'string') {
                $.ajax({
                    url: $.trim(src),
                    dataType: 'script',
                    cache : true,
                    nonce : this.nonce
                });
            }
            else if (src.length > 0) {
                for (var i = 0, j = src.length;i < j;i++) {
                    this.script(src[i]);
                }
            }

            return this;
        },
        jsonp : function (src) {
            var dtd = $.Deferred();

            if (typeof src === 'object') {
                var fetchJsonp = $.ajax({
                    url : $.trim(src.url),
                    data : src.data || '',
                    dataType : 'jsonp',
                    cache : src.cache || false,
                    jsonp: src.jsonp || 'callback',
                    jsonpCallback : src.jsonpCallback || '',
                    nonce : src.nonce || '',
                    success : function (data) {
                        src.success && src.success(data);
                        dtd.resolve(data);
                    }
                });


                fetchJsonp.complete(function () {
                    dtd.resolve();
                });
            }
            else {
                dtd.resolve();
            }

            return dtd.promise();
        },
        loadHtml : function (src) {
            var dtd = $.Deferred();
            var aTag = document.createElement('a');
            var pathname, cbName;

            aTag.setAttribute('href', src);
            pathname = aTag.pathname;
            cbName = pathname.replace('/public', '')
                    .replace(/[\/\.]/g, '_')
                    .replace(/^_/, '');

            $.ajax({
                url : src,
                dataType : 'jsonp',
                jsonp : 'callback',
                jsonpCallback : cbName,
                cache : true,
                success : function (data) {
                    dtd.resolve(data);
                }
            });

            return dtd.promise();
        },
        /**
         * 扩展加载js文件方法<br />
         * 以树的方式构建js文件间的依存关系<br />
         * 如设定requires，则存在依赖关系，会顺序执行，否则为并行<br />
         * 支持多重依赖关系
         * @method advScript
         * @param {Object} *
         * @chainable
         * @example
            $.advScript({
                 name : 'jquery',
                 url : 'http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'
             }, {
                 name : 'local',
                 def : function () {
                     $('#test').html($('#test').html() + 'local > ');
                 }
             }, {
                 name : 'index',
                 def : function () {
                     $('#test').html($('#test').html() + 'index > ');
                 },
                 requires : ['jquery', 'local']
             });
         */
        advScript : function () {
            for (var i = 0, j = arguments.length; i < j; i++) {
                var module = $.extend({}, arguments[i], { req : 0});

                //查找是否已加载
                if (this._loaded[module.name]) {
                    continue;
                }
                this._modules[module.name] = module;

                //是否依赖其他模块
                if ($.isArray(module.requires) && module.requires.length > 0) {
                    module.req = module.requires.length;
                }

                if (module.nonce) {
                    this.nonce = module.nonce;
                }

                this._queue.push(module);
            }
            this._Execute();

            return this;
        },

        /*
            执行js模块加载队列

            @access private
        */
        _Execute : function () {
            if (this._queue.length <= 0) { return ; }

            var index = 0;
            var src;
            //分析队列
            while (src = this._queue[index]) {
                //已加载
                if (this._loaded[src.name]) {
                    this._queue.splice(index, 1);
                    continue;
                }

                //是否存在依赖关系，并且依赖尚未加载
                if ($.isArray(src.requires) && src.requires.length > 0) {
                    for (var i = 0, j = src.requires.length;i < j ;i++ ) {
                        if (this._loaded[src.requires[i]]) {
                            //依赖计数-1
                            src.req--;

                            //删除依赖
                            src.requires.splice(i, 1);

                            i--;
                        }
                    }
                }

                if (src.req > 0) {
                    //尚存依赖，跳过
                    index++;
                    continue;
                }

                if (src.url) {
                    //外部脚本
                    this._queue.splice(index, 1);
                    $.ajax({
                        url: $.trim(src.url),
                        dataType: 'script',
                        context : { name : src.name },
                        cache : true,
                        nonce : this.nonce,
                        success: function(){
                            //标记模块已加载
                            Loader._loaded[this.name] = 1;

                            //回调，检查是否有存在依赖关系的模块
                            Loader._Execute();
                        }
                    });
                }
                else {
                    //自定义脚本
                    src.def && src.def();

                    this._loaded[src.name] = 1;
                    this._queue.splice(index, 1);
                }
            }
        }
    };

    module.exports = Loader;
})();


},{}],35:[function(require,module,exports){
/**
 * 控制台打印日志<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Log
 */
(function () {
    'use strict';

    /**
     * 兼容处理不支持console['log']的浏览器
     * @method log
     * @param {String, Object, Boolean} msg
     */
    var log = function (msg) {
        if (window["console"]) {
            try {
                console['log'].apply(console, arguments);
            }
            catch (e) {
                console['log'](msg);
            }
        }
        return this;
    }

    module.exports = log;
})();


},{}],36:[function(require,module,exports){
/**
 * 模块注入<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Mod
 */
(function () {
    'use strict';

    var Log = require('./Log');
    var Listeners = require('./Listeners');
    var Collection = {};
    var errorMsg = 'depMods only accept string type value!';

    var Mod = {
        /**
         * 获取模块
         * @method get
         * @param  {String} modName 需要获取的模块名称，如果为空则获取全部模块。
         * @return {Object}         对应模块的内容
         *                          {
         *                              level : ,
         *                              depMods : 
         *                          }
         * @example
         *     $.Mod.get('modName');
         */
        get : function (modName) {
            return modName ? Collection[modName] : Collection;
        },
        /**
         * 添加模块
         * @method add
         * @param  {String} modName 模块名名称
         * @param  {Number} ready   ready等级  
         *                          // 1 -> domReady, 
         *                          // 2 -> 5 seconds after onload,
         *                          // 3 -> after 2
         * @param  {String} depMods 所依赖的模块，多模块时用逗号链接  
         *                          // 'nsA.init,nsB.init'
         * @example
         *     $.Mod.add('modeName', 1, 'nsA.init,nsB.init');
         */
        add : function (modName, ready, depMods) {
            //default value
            depMods = depMods || '';
            ready = ready || 1;

            if ($.type(depMods) != 'string') {
                Log(errorMsg);
            }

            Collection[modName] = {
                'level' : ready,
                'depMods' : depMods
            }
        },
        init : function () {
            for (var modName in Collection) {
                var curMod = Collection[modName];
                var Listenfunc = function (modName) {
                    return function () {
                        eval(modName + '.init()');
                    }
                }(modName);

                if (!curMod.depMods) {
                    //没依赖模块，按ready等级来初始化
                    var levelMaps = {
                        1 : 'ready.first',
                        2 : 'ready.second',
                        3 : 'ready.third'
                    }

                    var levelName = levelMaps[curMod.level];

                    Listeners
                    .sub(levelName)
                    .onsuccess(Listenfunc);
                }
                else {
                    //有依赖模块，则订阅所依赖模块初始化
                    Listeners
                    .sub(curMod.depMods)
                    .onsuccess(Listenfunc);
                }
            }
        }
    }

    module.exports = Mod;
})();


},{"./Listeners":33,"./Log":35}],37:[function(require,module,exports){
/**
 * 命名空间<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class NS
 */
(function () {
    'use strict';

    /**
     * 生成命名空间
     * @param {Object} root 顶级命名空间
     * @return {Function} 返回命名空间构造函数
     * @see namespace
     * @example
     *     var V = {};
     *     var ns = NS(V);
     *     ns('V.a.b.c', 123);
     *     VIPSHOP.log(V.a.b.c); //123
     */
    var NS = function (root) {
        /**
         * 属性赋值
         * @param  {String} str 属性字符串
         * @param  {Object | String | Boolean} val 指定的值
         * @return {Object}     返回处理完的根对象
         */
        var namespace = function (str, val) {
            var arr = str.split('.');
            var _root = root;
            var i = arr[0] == 'V' ? '1' : 0;
            var len = arr.length;

            for (; i < len; i++) {
                _root[arr[i]] = _root[arr[i]] || {};
                if (i == len - 1
                    && typeof val !== 'undefined') {
                    _root[arr[i]] = val;
                }
                _root = _root[arr[i]];
            }

            return _root;
        };

        return namespace;
    }

    module.exports = NS;
})();


},{}],38:[function(require,module,exports){
/**
 * 本地存储<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Storage
 */
(function () {
    'use strict';

    var detect = require('./Detect');
    var Storage = (function () {
        // --------- 浏览器在隐私模式下的检测 --------
        var rule1 = detect.browser != 'MSIE';
        var rule2 = detect.browser == 'MSIE' 
                    && detect.browser.version - 0 >= 8 //IE版本大于等于8

        if (rule1 || rule2) {
            try {
                localStorage.setItem('localStorageTest', 1);
            } 
            catch (e) {
                return {
                    set : $.noop,
                    get : $.noop,
                    remove : $.noop
                }
            }
            localStorage.removeItem('localStorageTest'); //删除测试
        }
        
        if (window.localStorage) {
            //suport localStorage
            return (function () {
                var method = {
                    /**
                     * 保存值到本地存储
                     * @method set
                     * @param {String} key     需要保存的键名
                     * @param {Object|String|Array|Boolean} value  需要保存的值
                     * @param {Number} expires 存储的过期时间
                     */
                    set : function(key, value, expires) {
                        var v = [];
                        if (expires) {
                            var d = new Date().getTime();
                            v.push({'expires' : (d + expires*1000)});
                        }
                        v.push(value);
                        localStorage.setItem(key, $.stringifyJSON(v));
                    },
                    /**
                     * 需要获取的本地存储
                     * @method get
                     * @param  {String} key 对应的key
                     * @return {Object|String|Array|Boolean}  返回值
                     */
                    get : function(key) {
                        var value = localStorage.getItem(key);
                        if (value == null || value == undefined) {
                            value = '';
                            return value;
                        }

                        try{value = $.parseJSON(value)}catch(e){};
                        if(typeof value != 'object') return value;

                        //兼容旧业务代码
                        if ($.type(value[0]) == 'string') {
                            return value[0];
                        }

                        //兼容旧业务代码
                        if ($.type(value) == 'object') {
                            return value;
                        }

                        var expires = value[0] && value[0].expires;
                        if (expires && /^\d{13,}$/.test(expires)) {
                            var d = new Date().getTime();
                            if (expires <= d) {
                                localStorage.removeItem(key);
                                return '';
                            }
                            value.shift();
                        }
                        return value[0]
                    },
                    /**
                     * 删除一个本地存储
                     * @method remove
                     * @param  {String} key 需要删除的key
                     */
                    remove : function(key) {
                        localStorage.removeItem(key);
                    }
                };

                //判断是否过期，如果过期则先删除
                var d = new Date().getTime();
                for(var key in localStorage){
                    var v = localStorage.getItem(key);
                    try{v = $.parseJSON(v)}catch(e){};
                    if(Object.prototype.toString.call(v).toLowerCase().indexOf('array') > 0){
                        var expires = v[0] && v[0].expires;
                        if(expires && /^\d{13,}$/.test(expires) && expires <= d) localStorage.removeItem(key);
                    }
                }

                return method;
            })();
        }
        else {
            //ie,userData
            return (function () {
                var storage = null;
                var hostName = 'vip.com';

                function buildInput () {
                    try {
                        if (!storage) {
                            storage = document.createElement('INPUT');
                            storage.type = "hidden";
                            storage.style.display = "none";
                            storage.addBehavior ("#default#userData");
                            document.body.appendChild(storage);
                            var expires = new Date();
                            expires.setDate(expires.getDate() + 365);
                            storage.expires = expires.toUTCString();
                        }
                    } catch(e) {
                        VIPSHOP.log(e);
                        return;
                    }
                }


                return {
                    /**
                     * 保存值到本地存储
                     * @param {String} key     需要保存的键名
                     * @param {Object|String|Array|Boolean} value  需要保存的值
                     * @param {Number} expires 存储的过期时间
                     */
                    set : function(key, value, expires) {
                        buildInput();
                        var v = [];
                        if (expires) {
                            var d = new Date().getTime();
                            v.push({'expires' : (d + expires*1000)});
                            /*d.setTime(d.getTime() + expires * 1000);
                            storage.expires = d.toUTCString();*/
                        }
                        v.push(value);
                        storage.load(hostName);
                        storage.setAttribute(key, $.stringifyJSON(v));
                        storage.save(hostName);
                    },
                    /**
                     * 需要获取的本地存储
                     * @param  {String} key 对应的key
                     * @return {Object|String|Array|Boolean}  返回值
                     */
                    get : function(key) {
                        buildInput();
                        storage.load(hostName);

                        if (key === '') {
                            return '';
                        }

                        var value = storage.getAttribute(key);

                        if (value == null || value == undefined) {
                            value = '';
                            return value
                        }

                        try{value = $.parseJSON(value)}catch(e){}

                        //兼容旧业务代码
                        if ($.type(value[0]) == 'string') {
                            return value[0];
                        }

                        //兼容旧业务代码
                        if ($.type(value) == 'object') {
                            return value;
                        }

                        if(typeof value != 'object') return value;
                        var expires = value[0].expires;
                        if (expires && /^\d{13,}$/.test(expires)) {
                            var d = new Date().getTime();

                            if (expires <= d) {
                                storage.load(hostName);
                                storage.removeAttribute(key);
                                storage.save(hostName);
                                return '';
                            }
                            value.shift();
                        }
                        return value[0];
                    },
                    /**
                     * 删除一个本地存储
                     * @param  {String} key 需要删除的key
                     */
                    remove : function(key) {
                        buildInput();
                        storage.load(hostName);
                        storage.removeAttribute(key);
                        storage.save(hostName);
                    }
                };
            })();
        }
    })(); 

    module.exports = Storage;
})();


},{"./Detect":29}],39:[function(require,module,exports){
/**
 * 函数节流<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Throttle
 */
(function () {
    'use strict';

    var _now = Date.now || function() {
        return new Date().getTime();
    };

    /**
     * throttle
     * 返回一个函数节流包装后的函数，当一个函数被频繁执行时，
     * 最多每隔wait毫秒调用一次。对于控制一些触发频率较高的事件有帮助。
     * @method Throttle
     * @param  {Function} func    要包装的函数
     * @param  {Number} wait    时间间隔（毫秒）
     * @param  {Object} [options] {
     *     leading : false, //如果要禁止第一次调用，则设置为false
     *     trailing : false //如果要禁止最后一次调用，则设置为false
     * }
     * @return {Function}         包装后的函数
     */
    function Throttle (func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        if (!options) options = {};

        var later = function() {
            previous = options.leading === false ? 0 : _now();
            timeout = null;
            result = func.apply(context, args);
            if (!timeout) context = args = null;
        };

        return function() {
            var now = _now();
            if (!previous && options.leading === false) {
                previous = now;
            }
            var remaining = wait - (now - previous);
            context = this;
            args = arguments;
            if (remaining <= 0 || remaining > wait) {
                if (timeout) {
                    clearTimeout(timeout);
                    timeout = null;
                }

                previous = now;
                result = func.apply(context, args);
                if (!timeout) context = args = null;
            }
            else if (!timeout && options.trailing !== false) {
                timeout = setTimeout(later, remaining);
            }
            return result;
        };
    }

    module.exports = Throttle;
})();


},{}],40:[function(require,module,exports){
/**
 * 时间函数<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Time
 */
(function () {
    'use strict';

    
    var Cookie = require('./Cookie');
    Cookie = new Cookie({
        path : '/',
        domain : '.vip.com'
    });
    var Time = {};
    var _Globals = {
        'VipDFT' : parseInt(Cookie.get("VipDFT"))
    };
    var hasRegulate = false;

    /**
     * 计时函数 <br />
     *      支持正计时和倒计时
     * @method fn_countDown
     * @param {Number} timestamp 倒计时
     * @param {Number} [timestamp] 正计时
     * @return {Object} 剩余时间
     **/
    Time.fn_countDown = function (timestamp) {
        var nowTime = Math.round(new Date().getTime() / 1000);
        var recoup = _Globals['VipDFT'] ? _Globals['VipDFT'] : 0;

        if (arguments.length > 1) {
            //正计时
            var lastTime = nowTime - recoup - arguments[1];
        }
        else {
            //倒计时
            var lastTime = timestamp - nowTime - recoup;
        }
        var rt = {};

        if (lastTime > 0) {
            rt.day = Math.floor(lastTime / 86400);

            //剩余天数大于20时，则重新校正
            if (!hasRegulate && rt.day > 20) {
                hasRegulate = true;
                jQuery.ajax({
                    url : 'http://www.vip.com/index-ajax.php',
                    data : {
                        act : 'getServerTime'
                    },
                    dataType : 'jsonp',
                    success : function (data) {
                        _Globals['VipDFT'] = data.time - nowTime;
                        jQuery.Cookie.set('VipDFT', _Globals['VipDFT']);
                    }
                });
                return {day:'-', hour:'-', min:'-', sec:'-'};
            }

            var day_timestamp = 86400 * rt.day;

            var v = ('00' + Math.floor((lastTime - day_timestamp) / 3600));
            rt.hour= v.substring(v.length - 2);
            var hour_timestamp = 3600 * rt.hour;

            var v = ('00' + Math.floor((lastTime - day_timestamp - hour_timestamp) / 60));
            rt.min = v.substring(v.length - 2);

            var v = ('00' + (lastTime - day_timestamp - hour_timestamp - 60 * rt.min));
            rt.sec = v.substring(v.length - 2);
        }
        else {
            rt.day = 0;
            rt.hour= 0;
            rt.min = 0;
            rt.sec = 0;
        }

        return rt;
    }

    /**
     * 解析时间字符串为时间戳
     * @method parse
     * @param  {String} dateStr 传入的时间字符串，如：2014/11/11 10:00:00
     * @return {Number}         返回的时间戳
     */
    Time.parse = function (dateStr) {
        return Date.parse(dateStr.replace(/-/g, '/'));
    }

    /**
     * 按给定的时间戳获取年月日时分秒
     * @method get
     * @param  {Number} timeStamp 时间戳，如果为空，则默认为当前时间
     * @param  {String} formatStr 时间格式
     * @return {String}           返回指定格式的日期
     */
    Time.get = function (timeStamp, formatStr) {
        var T = timeStamp ? new Date(timeStamp) : new Date();
        var timeTmp = [];
        var patterns = /[YMDHmS]/g;
        var cursor = 0;
        var match;
        
        while (match = patterns.exec(formatStr))  {
            var linker = formatStr.slice(cursor, match.index);
            add(linker)(match[0], true);
            cursor = match.index + match[0].length;
        }

        function add (str, isMatch) {
            if (isMatch) {
                timeTmp.push(convert(str));
            }
            else {
                timeTmp.push(str);
            }
            return add;
        }

        function convert (str) {
            switch (str) {
                case 'Y':
                    return T.getFullYear();
                    break;
                case 'M':
                    return T.getMonth() + 1;
                    break;
                case 'D':
                    return T.getDate();
                    break;
                case 'H':
                    return T.getHours();
                    break;
                case 'm':
                    return T.getMinutes();
                    break;
                case 'S':
                    return T.getSeconds();
                    break;
                default:
                    break;
            }
        }

        timeTmp.shift();
        return timeTmp.join('');
    }

    /**
     * 获取时间
     * @param  {Number}   diffTime 允许的时差(秒)
     * @param  {Function} cb       获取时间后执行的回调
     */
    Time.getTime = function (diffTime, cb) {
        var nowTime = Math.round(new Date().getTime() / 1000);
        var recoup = _Globals['VipDFT'] ? _Globals['VipDFT'] : 0;

        //如果时间误差超过指定值时，重新读取接口
        if (Math.abs(recoup) > diffTime) {
            $.ajax({
                url : 'http://www.vip.com/index-ajax.php',
                data : {
                    act : 'getServerTime'
                },
                dataType : 'jsonp',
                success : function (data) {
                    var diffTime = new Date() - data.time;
                    var hostname = location.hostname;
                    //计算服务器时间和本地时间差，写到cookie，时效一小时
                    $.Cookie.set('VipDFT', diffTime, hostname, '/', 1);
                    cb && cb(data.time);
                }
            });
        }
        else {
            cb(nowTime - recoup);
        }
    }

    module.exports = Time;
})();


},{"./Cookie":25}],41:[function(require,module,exports){
/**
 * 解析URL<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Url
 */
(function () {
    'use strict';

    /**
     * 解析一个URI链接的各部分
     * @method Url
     * @param  {String} uri 传入的URI
     * @return {Object}     {
     *         protocol : 协议
     *         hostname : 主机名(如果端口不是80时，会返回端口)
     *         port : 端口
     *         pathname : 路径
     *         search : 查询字串
     *         hash : 锚点
     *         host : 主机名(不返回端口)
     * }
     */
    function Url (uri) {
        if (!uri) {
            uri = location.href; //当前页面URL为缺省值
        }
        uri = decodeURI(uri);

        var tag = document.createElement('a');
        var rt = {};
        tag.href = uri;
        rt.protocol = tag.protocol;
        rt.hostname = tag.hostname;
        rt.port = tag.port;
        rt.pathname = tag.pathname;
        rt.search = tag.search;
        rt.hash = tag.hash;
        rt.host = tag.host;
        rt.domain = tag.hostname
        return rt;
    }

    module.exports = Url;
})();


},{}],42:[function(require,module,exports){
/**
 * 变量池<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class Var
 */
(function () {
    'use strict';

    var Collection = {};
    var lastMethods = {
        set : function (currObj, key, value) {
            currObj[key] = value;
            return currObj[key];
        },
        get : function (currObj, key) {
            return currObj[key];
        },
        del : function (currObj, key) {
           delete currObj[key];
        },
        add : function (currObj, key, value) {
            currObj[key] = $.extend(currObj[key], value);
        }
    }

    /**
     * Collection操作
     * @method objCtrl
     * @param  {String} type     操作的类型
     * @param  {String} variable 变量名
     * @param  {String|Number|Object|Array|Boolean} value    值
     * @private
     */
    var objCtrl = function (type, variable, value) {
        var varArr = variable.split('.');
        var currObj = Collection;
        var lastEvt = lastMethods[type];

        for (var i = 0, len = varArr.length; i < len; i++) {
            if (i == len - 1) {
                // last
                return lastEvt(currObj, varArr[i], value);
            }
            else {
                // iter
                if (type == 'get' &&
                    !currObj[varArr[i]]) {
                    return;
                }

                if ($.type(currObj[varArr[i]]) == 'object') {
                    currObj[varArr[i]] = currObj[varArr[i]];
                }
                else {
                    currObj[varArr[i]] = {};
                }
                currObj = currObj[varArr[i]];
            }
        }
    }

    var Var = {
        /**
         * 设置一个值
         * @method set
         * @param {String} variable 变量名
         * @param {String|Number|Object|Array|Boolean} value 值
         */
        set : function (variable, value) {
            return objCtrl('set', variable, value);
        },
        /**
         * 获取一个值
         * @method get
         * @param  {String} variable 变量名
         * @return {String|Number|Object|Array|Boolean}  值
         */
        get : function (variable) {
            return objCtrl('get', variable);
        },
        /**
         * 删除一个值
         * @method del
         * @param  {String} variable 变量名
         * @return {Boolean}         删除成功后返回true
         */
        del : function (variable) {
            return objCtrl('del', variable);
        },
        /**
         * 追加一个值
         * @method add
         * @param {String} variable 变量名
         * @param {String|Number|Object|Array|Boolean} value  值
         */
        add : function (variable, value) {
            objCtrl('add', variable, value);
        }
    }

    module.exports = Var;
})();


},{}],43:[function(require,module,exports){
/**
 * 查询字符转换为对象<br>
 * version 1.0.1.20141102<br>
 * author zzbo <zhenbo.zheng@vipshop.com><br>
 * @module Util
 * @class queryStringToJSON
 */
(function () {
    'use strict';

    /**
     * 查询字符转换为对象
     * @method queryStringToJSON
     * @param {String} url 一个URL地址或queryString
     * @return {Object} 解析生成后的对象
     */
    var queryStringToJSON = function (url) {
        if (url === '')
            return '';
        var pairs = (url || location.search).replace(/^\?/,'').split('&');
        var result = {};
        for (var i = 0, len = pairs.length; i < len; i++) {
            var pair = pairs[i].split('=');
            if (!!pair[0]) {
                result[pair[0]] = decodeURIComponent(pair[1] || '');
            }
        }
        return result;
    }

    module.exports = queryStringToJSON;
})();


},{}],44:[function(require,module,exports){
/**
 * @核心库入口文件
 * @version 1.0.0.20141120
 * @author zzbo<zhenbo.zheng@vipshop.com>
 */
window.VIPSHOP = window.VIPSHOP || {
	apiHost: '//w2.vip.com',
	cartHost: '//cart.vip.com/te2',
	checkoutHost: '//checkout.vip.com/te2',
	detailHost: '//www.vip.com',
	listHost: '//www.vip.com',
	frontHost: '//www.vip.com',
	staticHost : '//s2.vipstatic.com',
	staticCss: '//s2.vipstatic.com/css/public',
	staticImg: '//s2.vipstatic.com/img',
	staticJs: '//s2.vipstatic.com/js/public',
	userHost: 'https://passport.vip.com',
	user_profile_api : '//reco.api.vip.com:8050',
	bootstrapHost : '//bootstrap.vipstatic.com',
	catStaticHost : '//category.vipstatic.com',
	globalStaticHost : '//global.vipstatic.com',
	homeStaticHost : '//home.vipstatic.com',
	beautyStaticHost : '//beauty.vipstatic.com',
	ugcStaticHost : '//ugc.vipstatic.com',
	memberStaticHost : '//member.vipstatic.com',
	ccpStaticHost : '//ccp.vipstatic.com',
	payStaticHost : '//pay-static.vip.com',
	kidStaticHost : '//kid.vipstatic.com',
	pmsHost : '//pms.vip.com',
	config : {pmsHost : '//pms.vip.com'}
};
VIPSHOP.core3 = true;

var Class = require('./Class/Class'); //类
var Loader = require('./Util/Loader');
var Cookie = require('./Util/Cookie'); //cookie类
var Time = require('./Util/Time'); //时间类
var Hash = require('./Util/Hash'); //URL的hash操作工具
var Log = require('./Util/Log'); //log类
var NS = require('./Util/NameSpace'); //命名空间
var Url = require('./Util/Url'); //Url解析工具
var Mod = require('./Util/Mod'); //模块化
var Var = require('./Util/Var'); //变量注入
var Guid = require('./Util/Guid'); //生成Guid
var Isset = require('./Util/Isset'); //对象属性的检测工具
var Detect = require('./Util/Detect'); //浏览器属性检测工具
var Storage = require('./Util/Storage'); //本地存储
var Listeners = require('./Util/Listeners'); //事件监听
var Switchable = require('./UI/Switchable'); //Switchable
var Selector = require('./UI/Selector');  //Selector
var Template = require('./UI/Template'); //简易模板引擎
var artTemplate = require('./Lib/artTemplate.js')
var Dialog = require('./UI/Dialog'); //弹窗组件
var Button = require('./UI/Button'); //按钮组件
var Form = require('./UI/Form'); //表单验证组件
var DatePicker = require('./UI/DatePicker'); //日历组件
var Lazydom = require('./UI/Lazydom'); //滚动生成DOM
var Scrollspy = require('./UI/Scrollspy'); //滚动侦测
var Validation = require('./UI/Validation'); //表单验证
var Placeholder = require('./UI/Placeholder'); //placeholder
var Messenger = require('./Lib/messenger'); //引入messenger 
var stringifyJSON = require('./Lib/StringifyJSON'); //JSON序列化
var CrossStorage = require('./Util/CrossStorage'); //引入跨域存储
var Throttle = require('./Util/Throttle'); //函数节流
var Debounce = require('./Util/Debounce'); //函数延迟
var CutString = require('./Util/CutString'); //字符串截取
var queryStringToJSON = require('./Util/queryStringToJSON'); //querystring转JSON
var Event = require('./Event/Event'); //各种事件

// -------------- 业务组件 --------------
var Login = require('./Component/Login'); //登录弹窗组件
var Share = require('./Component/Share'); //分享组件
var OnlineService = require('./Component/OnlineService'); //在线客服
var Member = require('./Component/Member'); //会员模块
var UINFO = require('./Component/UINFO'); //判断用户类型
var Ready = require('./Component/Ready'); //默认消息监听

VIPSHOP.Class = Class;
VIPSHOP.Time = Time;
VIPSHOP.Hash = Hash;
VIPSHOP.log = Log;
VIPSHOP.NS = NS(VIPSHOP);
VIPSHOP.Url = Url;
VIPSHOP.isset = Isset;
VIPSHOP.Detect = Detect;
VIPSHOP.guid = Guid;
VIPSHOP.Throttle = Throttle;
VIPSHOP.Debounce = Debounce;
VIPSHOP.Share = Share;
VIPSHOP.OnlineService = OnlineService;
VIPSHOP.Member = VIPSHOP.member = Member;
VIPSHOP.UINFO = window.UINFO = UINFO;
VIPSHOP.CutString = CutString;
VIPSHOP.login = Login.login;
VIPSHOP.setPwd = Login.setPwd;
VIPSHOP.queryStringToJSON = queryStringToJSON;

jQuery.Loader = Loader;
jQuery.stringifyJSON = stringifyJSON;
jQuery.Storage = Storage;
jQuery.crossStorage = CrossStorage;
jQuery.Validation = Validation;
jQuery.Listeners = Listeners;
jQuery.Messenger = Messenger;
jQuery.Template = Template;
jQuery.Tpl = artTemplate;
jQuery.Form = Form;
jQuery.Mod = Mod;
jQuery.Var = Var;
jQuery.Cookie = new Cookie({
	path : '/',
	domain : '.vip.com'
});


//---------- core2到core3过渡 ------------
VIPSHOP.isIE6 = VIPSHOP.Detect.isIE6;






},{"./Class/Class":1,"./Component/Login":2,"./Component/Member":3,"./Component/OnlineService":4,"./Component/Ready":5,"./Component/Share":6,"./Component/UINFO":7,"./Event/Event":8,"./Lib/StringifyJSON":10,"./Lib/artTemplate.js":11,"./Lib/messenger":12,"./UI/Button":13,"./UI/DatePicker":14,"./UI/Dialog":15,"./UI/Form":16,"./UI/Lazydom":17,"./UI/Placeholder":18,"./UI/Scrollspy":19,"./UI/Selector":20,"./UI/Switchable":21,"./UI/Template":22,"./UI/Validation":23,"./Util/Cookie":25,"./Util/CrossStorage":26,"./Util/CutString":27,"./Util/Debounce":28,"./Util/Detect":29,"./Util/Guid":30,"./Util/Hash":31,"./Util/Isset":32,"./Util/Listeners":33,"./Util/Loader":34,"./Util/Log":35,"./Util/Mod":36,"./Util/NameSpace":37,"./Util/Storage":38,"./Util/Throttle":39,"./Util/Time":40,"./Util/Url":41,"./Util/Var":42,"./Util/queryStringToJSON":43}]},{},[44])